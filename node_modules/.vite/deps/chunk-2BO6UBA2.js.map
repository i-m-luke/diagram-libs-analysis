{
  "version": 3,
  "sources": ["../../diagram-js/lib/core/ElementRegistry.js"],
  "sourcesContent": ["var ELEMENT_ID = 'data-element-id';\n\nimport { attr as svgAttr } from 'tiny-svg';\n\n/**\n * @typedef {import('./Types').ElementLike} ElementLike\n *\n * @typedef {import('./EventBus').default} EventBus\n *\n * @typedef { (element: ElementLike, gfx: SVGElement) => boolean|any } ElementRegistryFilterCallback\n * @typedef { (element: ElementLike, gfx: SVGElement) => any } ElementRegistryForEachCallback\n */\n\n/**\n * A registry that keeps track of all shapes in the diagram.\n *\n * @class\n * @constructor\n *\n * @param {EventBus} eventBus\n */\nexport default function ElementRegistry(eventBus) {\n\n  /**\n   * @type { {\n   *   [id: string]: {\n   *     element: ElementLike;\n   *     gfx?: SVGElement;\n   *     secondaryGfx?: SVGElement;\n   *   }\n   * } }\n   */\n  this._elements = {};\n\n  this._eventBus = eventBus;\n}\n\nElementRegistry.$inject = [ 'eventBus' ];\n\n/**\n * Add an element and its graphical representation(s) to the registry.\n *\n * @param {ElementLike} element The element to be added.\n * @param {SVGElement} gfx The primary graphical representation.\n * @param {SVGElement} [secondaryGfx] The secondary graphical representation.\n */\nElementRegistry.prototype.add = function(element, gfx, secondaryGfx) {\n\n  var id = element.id;\n\n  this._validateId(id);\n\n  // associate dom node with element\n  svgAttr(gfx, ELEMENT_ID, id);\n\n  if (secondaryGfx) {\n    svgAttr(secondaryGfx, ELEMENT_ID, id);\n  }\n\n  this._elements[id] = { element: element, gfx: gfx, secondaryGfx: secondaryGfx };\n};\n\n/**\n * Remove an element from the registry.\n *\n * @param {ElementLike|string} element\n */\nElementRegistry.prototype.remove = function(element) {\n  var elements = this._elements,\n      id = element.id || element,\n      container = id && elements[id];\n\n  if (container) {\n\n    // unset element id on gfx\n    svgAttr(container.gfx, ELEMENT_ID, '');\n\n    if (container.secondaryGfx) {\n      svgAttr(container.secondaryGfx, ELEMENT_ID, '');\n    }\n\n    delete elements[id];\n  }\n};\n\n/**\n * Update an elements ID.\n *\n * @param {ElementLike|string} element The element or its ID.\n * @param {string} newId The new ID.\n */\nElementRegistry.prototype.updateId = function(element, newId) {\n\n  this._validateId(newId);\n\n  if (typeof element === 'string') {\n    element = this.get(element);\n  }\n\n  this._eventBus.fire('element.updateId', {\n    element: element,\n    newId: newId\n  });\n\n  var gfx = this.getGraphics(element),\n      secondaryGfx = this.getGraphics(element, true);\n\n  this.remove(element);\n\n  element.id = newId;\n\n  this.add(element, gfx, secondaryGfx);\n};\n\n/**\n * Update the graphical representation of an element.\n *\n * @param {ElementLike|string} filter The element or its ID.\n * @param {SVGElement} gfx The new graphical representation.\n * @param {boolean} [secondary=false] Whether to update the secondary graphical representation.\n */\nElementRegistry.prototype.updateGraphics = function(filter, gfx, secondary) {\n  var id = filter.id || filter;\n\n  var container = this._elements[id];\n\n  if (secondary) {\n    container.secondaryGfx = gfx;\n  } else {\n    container.gfx = gfx;\n  }\n\n  if (gfx) {\n    svgAttr(gfx, ELEMENT_ID, id);\n  }\n\n  return gfx;\n};\n\n/**\n * Get the element with the given ID or graphical representation.\n *\n * @example\n *\n * ```javascript\n * elementRegistry.get('SomeElementId_1');\n *\n * elementRegistry.get(gfx);\n * ```\n *\n * @param {string|SVGElement} filter The elements ID or graphical representation.\n *\n * @return {ElementLike|undefined} The element.\n */\nElementRegistry.prototype.get = function(filter) {\n  var id;\n\n  if (typeof filter === 'string') {\n    id = filter;\n  } else {\n    id = filter && svgAttr(filter, ELEMENT_ID);\n  }\n\n  var container = this._elements[id];\n  return container && container.element;\n};\n\n/**\n * Return all elements that match a given filter function.\n *\n * @param {ElementRegistryFilterCallback} fn The filter function.\n *\n * @return {ElementLike[]} The matching elements.\n */\nElementRegistry.prototype.filter = function(fn) {\n\n  var filtered = [];\n\n  this.forEach(function(element, gfx) {\n    if (fn(element, gfx)) {\n      filtered.push(element);\n    }\n  });\n\n  return filtered;\n};\n\n/**\n * Return the first element that matches the given filter function.\n *\n * @param {ElementRegistryFilterCallback} fn The filter function.\n *\n * @return {ElementLike|undefined} The matching element.\n */\nElementRegistry.prototype.find = function(fn) {\n  var map = this._elements,\n      keys = Object.keys(map);\n\n  for (var i = 0; i < keys.length; i++) {\n    var id = keys[i],\n        container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n\n    if (fn(element, gfx)) {\n      return element;\n    }\n  }\n};\n\n/**\n * Get all elements.\n *\n * @return {ElementLike[]} All elements.\n */\nElementRegistry.prototype.getAll = function() {\n  return this.filter(function(e) { return e; });\n};\n\n/**\n * Execute a given function for each element.\n *\n * @param {ElementRegistryForEachCallback} fn The function to execute.\n */\nElementRegistry.prototype.forEach = function(fn) {\n\n  var map = this._elements;\n\n  Object.keys(map).forEach(function(id) {\n    var container = map[id],\n        element = container.element,\n        gfx = container.gfx;\n\n    return fn(element, gfx);\n  });\n};\n\n/**\n * Return the graphical representation of an element.\n *\n * @example\n *\n * ```javascript\n * elementRegistry.getGraphics('SomeElementId_1');\n *\n * elementRegistry.getGraphics(rootElement); // <g ...>\n *\n * elementRegistry.getGraphics(rootElement, true); // <svg ...>\n * ```\n *\n * @param {ElementLike|string} filter The element or its ID.\n * @param {boolean} [secondary=false] Whether to return the secondary graphical representation.\n *\n * @return {SVGElement} The graphical representation.\n */\nElementRegistry.prototype.getGraphics = function(filter, secondary) {\n  var id = filter.id || filter;\n\n  var container = this._elements[id];\n  return container && (secondary ? container.secondaryGfx : container.gfx);\n};\n\n/**\n * Validate an ID and throw an error if invalid.\n *\n * @param {string} id\n *\n * @throws {Error} Error indicating that the ID is invalid or already assigned.\n */\nElementRegistry.prototype._validateId = function(id) {\n  if (!id) {\n    throw new Error('element must have an id');\n  }\n\n  if (this._elements[id]) {\n    throw new Error('element with id ' + id + ' already added');\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
