{
  "version": 3,
  "sources": ["../../diagram-js/lib/draw/BaseRenderer.js"],
  "sourcesContent": ["var DEFAULT_RENDER_PRIORITY = 1000;\n\n/**\n * @typedef {import('../core/Types').ElementLike} Element\n * @typedef {import('../core/Types').ConnectionLike} Connection\n * @typedef {import('../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../core/EventBus').default} EventBus\n */\n\n/**\n * The base implementation of shape and connection renderers.\n *\n * @param {EventBus} eventBus\n * @param {number} [renderPriority=1000]\n */\nexport default function BaseRenderer(eventBus, renderPriority) {\n  var self = this;\n\n  renderPriority = renderPriority || DEFAULT_RENDER_PRIORITY;\n\n  eventBus.on([ 'render.shape', 'render.connection' ], renderPriority, function(evt, context) {\n    var type = evt.type,\n        element = context.element,\n        visuals = context.gfx,\n        attrs = context.attrs;\n\n    if (self.canRender(element)) {\n      if (type === 'render.shape') {\n        return self.drawShape(visuals, element, attrs);\n      } else {\n        return self.drawConnection(visuals, element, attrs);\n      }\n    }\n  });\n\n  eventBus.on([ 'render.getShapePath', 'render.getConnectionPath' ], renderPriority, function(evt, element) {\n    if (self.canRender(element)) {\n      if (evt.type === 'render.getShapePath') {\n        return self.getShapePath(element);\n      } else {\n        return self.getConnectionPath(element);\n      }\n    }\n  });\n}\n\n/**\n * Checks whether an element can be rendered.\n *\n * @param {Element} element The element to be rendered.\n *\n * @return {boolean} Whether the element can be rendered.\n */\nBaseRenderer.prototype.canRender = function(element) {};\n\n/**\n * Draws a shape.\n *\n * @param {SVGElement} visuals The SVG element to draw the shape into.\n * @param {Shape} shape The shape to be drawn.\n *\n * @return {SVGElement} The SVG element of the shape drawn.\n */\nBaseRenderer.prototype.drawShape = function(visuals, shape) {};\n\n/**\n * Draws a connection.\n *\n * @param {SVGElement} visuals The SVG element to draw the connection into.\n * @param {Connection} connection The connection to be drawn.\n *\n * @return {SVGElement} The SVG element of the connection drawn.\n */\nBaseRenderer.prototype.drawConnection = function(visuals, connection) {};\n\n/**\n * Gets the SVG path of the graphical representation of a shape.\n *\n * @param {Shape} shape The shape.\n *\n * @return {string} The SVG path of the shape.\n */\nBaseRenderer.prototype.getShapePath = function(shape) {};\n\n/**\n * Gets the SVG path of the graphical representation of a connection.\n *\n * @param {Connection} connection The connection.\n *\n * @return {string} The SVG path of the connection.\n */\nBaseRenderer.prototype.getConnectionPath = function(connection) {};\n"],
  "mappings": ";AAAA,IAAI,0BAA0B;AAgBf,SAAR,aAA8B,UAAU,gBAAgB;AAC7D,MAAI,OAAO;AAEX,mBAAiB,kBAAkB;AAEnC,WAAS,GAAG,CAAE,gBAAgB,mBAAoB,GAAG,gBAAgB,SAAS,KAAK,SAAS;AAC1F,QAAI,OAAO,IAAI,MACX,UAAU,QAAQ,SAClB,UAAU,QAAQ,KAClB,QAAQ,QAAQ;AAEpB,QAAI,KAAK,UAAU,OAAO,GAAG;AAC3B,UAAI,SAAS,gBAAgB;AAC3B,eAAO,KAAK,UAAU,SAAS,SAAS,KAAK;AAAA,MAC/C,OAAO;AACL,eAAO,KAAK,eAAe,SAAS,SAAS,KAAK;AAAA,MACpD;AAAA,IACF;AAAA,EACF,CAAC;AAED,WAAS,GAAG,CAAE,uBAAuB,0BAA2B,GAAG,gBAAgB,SAAS,KAAK,SAAS;AACxG,QAAI,KAAK,UAAU,OAAO,GAAG;AAC3B,UAAI,IAAI,SAAS,uBAAuB;AACtC,eAAO,KAAK,aAAa,OAAO;AAAA,MAClC,OAAO;AACL,eAAO,KAAK,kBAAkB,OAAO;AAAA,MACvC;AAAA,IACF;AAAA,EACF,CAAC;AACH;AASA,aAAa,UAAU,YAAY,SAAS,SAAS;AAAC;AAUtD,aAAa,UAAU,YAAY,SAAS,SAAS,OAAO;AAAC;AAU7D,aAAa,UAAU,iBAAiB,SAAS,SAAS,YAAY;AAAC;AASvE,aAAa,UAAU,eAAe,SAAS,OAAO;AAAC;AASvD,aAAa,UAAU,oBAAoB,SAAS,YAAY;AAAC;",
  "names": []
}
