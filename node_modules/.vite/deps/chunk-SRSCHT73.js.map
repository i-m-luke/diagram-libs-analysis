{
  "version": 3,
  "sources": ["../../diagram-js/lib/features/modeling/cmd/AlignElementsHandler.js", "../../diagram-js/lib/features/modeling/cmd/AppendShapeHandler.js", "../../diagram-js/lib/features/modeling/cmd/CreateConnectionHandler.js", "../../diagram-js/lib/features/modeling/cmd/CreateElementsHandler.js", "../../diagram-js/lib/features/modeling/cmd/CreateShapeHandler.js", "../../diagram-js/lib/features/modeling/cmd/CreateLabelHandler.js", "../../diagram-js/lib/util/Removal.js", "../../diagram-js/lib/features/modeling/cmd/DeleteConnectionHandler.js", "../../diagram-js/lib/features/modeling/cmd/DeleteElementsHandler.js", "../../diagram-js/lib/features/modeling/cmd/DeleteShapeHandler.js", "../../diagram-js/lib/features/modeling/cmd/DistributeElementsHandler.js", "../../diagram-js/lib/features/modeling/cmd/LayoutConnectionHandler.js", "../../diagram-js/lib/features/modeling/cmd/MoveConnectionHandler.js", "../../diagram-js/lib/util/PositionUtil.js", "../../diagram-js/lib/util/AttachUtil.js", "../../diagram-js/lib/features/modeling/cmd/helper/AnchorsHelper.js", "../../diagram-js/lib/features/modeling/cmd/helper/MoveClosure.js", "../../diagram-js/lib/features/modeling/cmd/helper/MoveHelper.js", "../../diagram-js/lib/features/modeling/cmd/MoveElementsHandler.js", "../../diagram-js/lib/features/modeling/cmd/MoveShapeHandler.js", "../../diagram-js/lib/features/modeling/cmd/ReconnectConnectionHandler.js", "../../diagram-js/lib/features/modeling/cmd/ReplaceShapeHandler.js", "../../diagram-js/lib/features/modeling/cmd/ResizeShapeHandler.js", "../../diagram-js/lib/features/space-tool/SpaceUtil.js", "../../diagram-js/lib/features/modeling/cmd/SpaceToolHandler.js", "../../diagram-js/lib/features/modeling/cmd/ToggleShapeCollapseHandler.js", "../../diagram-js/lib/features/modeling/cmd/UpdateAttachmentHandler.js", "../../diagram-js/lib/features/modeling/cmd/UpdateWaypointsHandler.js", "../../diagram-js/lib/features/modeling/Modeling.js", "../../bpmn-js/lib/features/modeling/cmd/UpdateModdlePropertiesHandler.js", "../../bpmn-js/lib/features/modeling/cmd/UpdatePropertiesHandler.js", "../../bpmn-js/lib/features/modeling/cmd/UpdateCanvasRootHandler.js", "../../diagram-js/lib/features/resize/ResizeUtil.js", "../../bpmn-js/lib/features/modeling/util/LaneUtil.js", "../../bpmn-js/lib/features/modeling/cmd/AddLaneHandler.js", "../../bpmn-js/lib/features/modeling/cmd/SplitLaneHandler.js", "../../bpmn-js/lib/features/modeling/cmd/ResizeLaneHandler.js", "../../bpmn-js/lib/features/modeling/cmd/UpdateFlowNodeRefsHandler.js", "../../bpmn-js/lib/features/modeling/cmd/IdClaimHandler.js", "../../bpmn-js/lib/util/LabelUtil.js", "../../bpmn-js/lib/features/modeling/cmd/SetColorHandler.js", "../../bpmn-js/lib/features/label-editing/cmd/UpdateLabelHandler.js", "../../bpmn-js/lib/features/modeling/Modeling.js"],
  "sourcesContent": ["import { forEach, isDefined } from 'min-dash';\n\n/**\n * @typedef {import('../../../core/Canvas').default} Canvas\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that align elements in a certain way.\n *\n * @param {Modeling} modeling\n * @param {Canvas} canvas\n */\nexport default function AlignElements(modeling, canvas) {\n  this._modeling = modeling;\n  this._canvas = canvas;\n}\n\nAlignElements.$inject = [ 'modeling', 'canvas' ];\n\n\nAlignElements.prototype.preExecute = function(context) {\n  var modeling = this._modeling;\n\n  var elements = context.elements,\n      alignment = context.alignment;\n\n\n  forEach(elements, function(element) {\n    var delta = {\n      x: 0,\n      y: 0\n    };\n\n    if (isDefined(alignment.left)) {\n      delta.x = alignment.left - element.x;\n\n    } else if (isDefined(alignment.right)) {\n      delta.x = (alignment.right - element.width) - element.x;\n\n    } else if (isDefined(alignment.center)) {\n      delta.x = (alignment.center - Math.round(element.width / 2)) - element.x;\n\n    } else if (isDefined(alignment.top)) {\n      delta.y = alignment.top - element.y;\n\n    } else if (isDefined(alignment.bottom)) {\n      delta.y = (alignment.bottom - element.height) - element.y;\n\n    } else if (isDefined(alignment.middle)) {\n      delta.y = (alignment.middle - Math.round(element.height / 2)) - element.y;\n    }\n\n    modeling.moveElements([ element ], delta, element.parent);\n  });\n};\n\nAlignElements.prototype.postExecute = function(context) {\n\n};\n", "import { some } from 'min-dash';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Parent} Parent\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible appending of shapes\n * to a source shape.\n *\n * @param {Modeling} modeling\n */\nexport default function AppendShapeHandler(modeling) {\n  this._modeling = modeling;\n}\n\nAppendShapeHandler.$inject = [ 'modeling' ];\n\n\n// api //////////////////////\n\n\n/**\n * Creates a new shape.\n *\n * @param {Object} context\n * @param {Partial<Shape>} context.shape The new shape.\n * @param {Element} context.source The element to which to append the new shape to.\n * @param {Parent} context.parent The parent.\n * @param {Point} context.position The position at which to create the new shape.\n */\nAppendShapeHandler.prototype.preExecute = function(context) {\n\n  var source = context.source;\n\n  if (!source) {\n    throw new Error('source required');\n  }\n\n  var target = context.target || source.parent,\n      shape = context.shape,\n      hints = context.hints || {};\n\n  shape = context.shape =\n    this._modeling.createShape(\n      shape,\n      context.position,\n      target, { attach: hints.attach });\n\n  context.shape = shape;\n};\n\nAppendShapeHandler.prototype.postExecute = function(context) {\n  var hints = context.hints || {};\n\n  if (!existsConnection(context.source, context.shape)) {\n\n    // create connection\n    if (hints.connectionTarget === context.source) {\n      this._modeling.connect(context.shape, context.source, context.connection);\n    } else {\n      this._modeling.connect(context.source, context.shape, context.connection);\n    }\n  }\n};\n\n\nfunction existsConnection(source, target) {\n  return some(source.outgoing, function(c) {\n    return c.target === target;\n  });\n}", "/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../Modeling').ModelingHints} ModelingHints\n *\n * @typedef {import('../../../core/Canvas').default} Canvas\n * @typedef {import('../../../layout/BaseLayouter').default} Layouter\n */\n\n/**\n * @param {Canvas} canvas\n * @param {Layouter} layouter\n */\nexport default function CreateConnectionHandler(canvas, layouter) {\n  this._canvas = canvas;\n  this._layouter = layouter;\n}\n\nCreateConnectionHandler.$inject = [ 'canvas', 'layouter' ];\n\n\n// api //////////////////////\n\n\n/**\n * Creates a new connection between two elements.\n *\n * @param {Object} context\n * @param {Element} context.source The source.\n * @param {Element} context.target The target.\n * @param {Shape} context.parent The parent.\n * @param {number} [context.parentIndex] The optional index at which to add the\n * connection to the parent's children.\n * @param {ModelingHints} [context.hints] The optional hints.\n */\nCreateConnectionHandler.prototype.execute = function(context) {\n\n  var connection = context.connection,\n      source = context.source,\n      target = context.target,\n      parent = context.parent,\n      parentIndex = context.parentIndex,\n      hints = context.hints;\n\n  if (!source || !target) {\n    throw new Error('source and target required');\n  }\n\n  if (!parent) {\n    throw new Error('parent required');\n  }\n\n  connection.source = source;\n  connection.target = target;\n\n  if (!connection.waypoints) {\n    connection.waypoints = this._layouter.layoutConnection(connection, hints);\n  }\n\n  // add connection\n  this._canvas.addConnection(connection, parent, parentIndex);\n\n  return connection;\n};\n\nCreateConnectionHandler.prototype.revert = function(context) {\n  var connection = context.connection;\n\n  this._canvas.removeConnection(connection);\n\n  connection.source = null;\n  connection.target = null;\n\n  return connection;\n};", "import {\r\n  assign,\r\n  filter,\r\n  forEach,\r\n  isNumber,\r\n  map,\r\n  omit,\r\n  pick,\r\n  values\r\n} from 'min-dash';\r\n\r\nimport {\r\n  getBBox,\r\n  getParents\r\n} from '../../../util/Elements';\r\n\r\nimport {\r\n  isConnection,\r\n  isLabel\r\n} from '../../../util/ModelUtil';\r\n\r\n/**\r\n * @typedef {import('../Modeling').default} Modeling\r\n */\r\n\r\nvar round = Math.round;\r\n\r\n/**\r\n * @param {Modeling} modeling\r\n */\r\nexport default function CreateElementsHandler(modeling) {\r\n  this._modeling = modeling;\r\n}\r\n\r\nCreateElementsHandler.$inject = [\r\n  'modeling'\r\n];\r\n\r\nCreateElementsHandler.prototype.preExecute = function(context) {\r\n  var elements = context.elements,\r\n      parent = context.parent,\r\n      parentIndex = context.parentIndex,\r\n      position = context.position,\r\n      hints = context.hints;\r\n\r\n  var modeling = this._modeling;\r\n\r\n  // make sure each element has x and y\r\n  forEach(elements, function(element) {\r\n    if (!isNumber(element.x)) {\r\n      element.x = 0;\r\n    }\r\n\r\n    if (!isNumber(element.y)) {\r\n      element.y = 0;\r\n    }\r\n  });\r\n\r\n  var visibleElements = filter(elements, function(element) {\r\n    return !element.hidden;\r\n  });\r\n\r\n  var bbox = getBBox(visibleElements);\r\n\r\n  // center elements around position\r\n  forEach(elements, function(element) {\r\n    if (isConnection(element)) {\r\n      element.waypoints = map(element.waypoints, function(waypoint) {\r\n        return {\r\n          x: round(waypoint.x - bbox.x - bbox.width / 2 + position.x),\r\n          y: round(waypoint.y - bbox.y - bbox.height / 2 + position.y)\r\n        };\r\n      });\r\n    }\r\n\r\n    assign(element, {\r\n      x: round(element.x - bbox.x - bbox.width / 2 + position.x),\r\n      y: round(element.y - bbox.y - bbox.height / 2 + position.y)\r\n    });\r\n  });\r\n\r\n  var parents = getParents(elements);\r\n\r\n  var cache = {};\r\n\r\n  forEach(elements, function(element) {\r\n    if (isConnection(element)) {\r\n      cache[ element.id ] = isNumber(parentIndex) ?\r\n        modeling.createConnection(\r\n          cache[ element.source.id ],\r\n          cache[ element.target.id ],\r\n          parentIndex,\r\n          element,\r\n          element.parent || parent,\r\n          hints\r\n        ) :\r\n        modeling.createConnection(\r\n          cache[ element.source.id ],\r\n          cache[ element.target.id ],\r\n          element,\r\n          element.parent || parent,\r\n          hints\r\n        );\r\n\r\n      return;\r\n    }\r\n\r\n    var createShapeHints = assign({}, hints);\r\n\r\n    if (parents.indexOf(element) === -1) {\r\n      createShapeHints.autoResize = false;\r\n    }\r\n\r\n    if (isLabel(element)) {\r\n      createShapeHints = omit(createShapeHints, [ 'attach' ]);\r\n    }\r\n\r\n    cache[ element.id ] = isNumber(parentIndex) ?\r\n      modeling.createShape(\r\n        element,\r\n        pick(element, [ 'x', 'y', 'width', 'height' ]),\r\n        element.parent || parent,\r\n        parentIndex,\r\n        createShapeHints\r\n      ) :\r\n      modeling.createShape(\r\n        element,\r\n        pick(element, [ 'x', 'y', 'width', 'height' ]),\r\n        element.parent || parent,\r\n        createShapeHints\r\n      );\r\n  });\r\n\r\n  context.elements = values(cache);\r\n};", "import { assign } from 'min-dash';\n\n/**\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../util/Types').Point} Point\n *\n * @typedef {import('../../../core/Canvas').default} Canvas\n */\n\nvar round = Math.round;\n\n\n/**\n * A handler that implements reversible addition of shapes.\n *\n * @param {Canvas} canvas\n */\nexport default function CreateShapeHandler(canvas) {\n  this._canvas = canvas;\n}\n\nCreateShapeHandler.$inject = [ 'canvas' ];\n\n\n// api //////////////////////\n\n\n/**\n * Appends a shape to a target shape\n *\n * @param {Object} context\n * @param {Element} context.parent The parent.\n * @param {Point} context.position The position at which to create the new shape.\n * @param {number} [context.parentIndex] The optional index at which to add the\n * shape to the parent's children.\n */\nCreateShapeHandler.prototype.execute = function(context) {\n\n  var shape = context.shape,\n      positionOrBounds = context.position,\n      parent = context.parent,\n      parentIndex = context.parentIndex;\n\n  if (!parent) {\n    throw new Error('parent required');\n  }\n\n  if (!positionOrBounds) {\n    throw new Error('position required');\n  }\n\n  // (1) add at event center position _or_ at given bounds\n  if (positionOrBounds.width !== undefined) {\n    assign(shape, positionOrBounds);\n  } else {\n    assign(shape, {\n      x: positionOrBounds.x - round(shape.width / 2),\n      y: positionOrBounds.y - round(shape.height / 2)\n    });\n  }\n\n  // (2) add to canvas\n  this._canvas.addShape(shape, parent, parentIndex);\n\n  return shape;\n};\n\n\n/**\n * Undo append by removing the shape\n */\nCreateShapeHandler.prototype.revert = function(context) {\n\n  var shape = context.shape;\n\n  // (3) remove form canvas\n  this._canvas.removeShape(shape);\n\n  return shape;\n};", "import inherits from 'inherits-browser';\n\nimport CreateShapeHandler from './CreateShapeHandler';\n\n/**\n * @typedef {import('../../../core/Canvas').default} Canvas\n *\n * @typedef {import('../../../model/Types').Element} Element\n * @typedef {import('../../../model/Types').Parent} Parent\n * @typedef {import('../../../model/Types').Shape} Shape\n * @typedef {import('../../../util/Types').Point} Point\n */\n\n/**\n * A handler that attaches a label to a given target shape.\n *\n * @param {Canvas} canvas\n */\nexport default function CreateLabelHandler(canvas) {\n  CreateShapeHandler.call(this, canvas);\n}\n\ninherits(CreateLabelHandler, CreateShapeHandler);\n\nCreateLabelHandler.$inject = [ 'canvas' ];\n\n\n// api //////////////////////\n\n\nvar originalExecute = CreateShapeHandler.prototype.execute;\n\n/**\n * Append label to element.\n *\n * @param { {\n *   parent: Parent;\n *   position: Point;\n *   shape: Shape;\n *   target: Element;\n * } } context\n */\nCreateLabelHandler.prototype.execute = function(context) {\n\n  var label = context.shape;\n\n  ensureValidDimensions(label);\n\n  label.labelTarget = context.labelTarget;\n\n  return originalExecute.call(this, context);\n};\n\nvar originalRevert = CreateShapeHandler.prototype.revert;\n\n/**\n * Revert appending by removing label.\n */\nCreateLabelHandler.prototype.revert = function(context) {\n  context.shape.labelTarget = null;\n\n  return originalRevert.call(this, context);\n};\n\n\n// helpers //////////////////////\n\nfunction ensureValidDimensions(label) {\n\n  // make sure a label has valid { width, height } dimensions\n  [ 'width', 'height' ].forEach(function(prop) {\n    if (typeof label[prop] === 'undefined') {\n      label[prop] = 0;\n    }\n  });\n}", "/**\n * Remove from the beginning of a collection until it is empty.\n *\n * This is a null-safe operation that ensures elements\n * are being removed from the given collection until the\n * collection is empty.\n *\n * The implementation deals with the fact that a remove operation\n * may touch, i.e. remove multiple elements in the collection\n * at a time.\n *\n * @param {Object[]} [collection]\n * @param {(element: Object) => void} removeFn\n *\n * @return {Object[]} the cleared collection\n */\nexport function saveClear(collection, removeFn) {\n\n  if (typeof removeFn !== 'function') {\n    throw new Error('removeFn iterator must be a function');\n  }\n\n  if (!collection) {\n    return;\n  }\n\n  var e;\n\n  while ((e = collection[0])) {\n    removeFn(e);\n  }\n\n  return collection;\n}\n", "import {\n  add as collectionAdd,\n  indexOf as collectionIdx\n} from '../../../util/Collections';\n\nimport { saveClear } from '../../../util/Removal';\n\n/**\n * @typedef {import('../../../core/Canvas').default} Canvas\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible deletion of Connections.\n */\nexport default function DeleteConnectionHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\n\nDeleteConnectionHandler.$inject = [\n  'canvas',\n  'modeling'\n];\n\n\n/**\n * - Remove connections\n */\nDeleteConnectionHandler.prototype.preExecute = function(context) {\n\n  var modeling = this._modeling;\n\n  var connection = context.connection;\n\n  // remove connections\n  saveClear(connection.incoming, function(connection) {\n\n    // To make sure that the connection isn't removed twice\n    // For example if a container is removed\n    modeling.removeConnection(connection, { nested: true });\n  });\n\n  saveClear(connection.outgoing, function(connection) {\n    modeling.removeConnection(connection, { nested: true });\n  });\n\n};\n\n\nDeleteConnectionHandler.prototype.execute = function(context) {\n\n  var connection = context.connection,\n      parent = connection.parent;\n\n  context.parent = parent;\n\n  // remember containment\n  context.parentIndex = collectionIdx(parent.children, connection);\n\n  context.source = connection.source;\n  context.target = connection.target;\n\n  this._canvas.removeConnection(connection);\n\n  connection.source = null;\n  connection.target = null;\n\n  return connection;\n};\n\n/**\n * Command revert implementation.\n */\nDeleteConnectionHandler.prototype.revert = function(context) {\n\n  var connection = context.connection,\n      parent = context.parent,\n      parentIndex = context.parentIndex;\n\n  connection.source = context.source;\n  connection.target = context.target;\n\n  // restore containment\n  collectionAdd(parent.children, connection, parentIndex);\n\n  this._canvas.addConnection(connection, parent);\n\n  return connection;\n};\n", "import { forEach } from 'min-dash';\n\n/**\n * @typedef {import('../../../core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * @param {Modeling} modeling\n * @param {ElementRegistry} elementRegistry\n */\nexport default function DeleteElementsHandler(modeling, elementRegistry) {\n  this._modeling = modeling;\n  this._elementRegistry = elementRegistry;\n}\n\nDeleteElementsHandler.$inject = [\n  'modeling',\n  'elementRegistry'\n];\n\n\nDeleteElementsHandler.prototype.postExecute = function(context) {\n\n  var modeling = this._modeling,\n      elementRegistry = this._elementRegistry,\n      elements = context.elements;\n\n  forEach(elements, function(element) {\n\n    // element may have been removed with previous\n    // remove operations already (e.g. in case of nesting)\n    if (!elementRegistry.get(element.id)) {\n      return;\n    }\n\n    if (element.waypoints) {\n      modeling.removeConnection(element);\n    } else {\n      modeling.removeShape(element);\n    }\n  });\n};", "import {\n  add as collectionAdd,\n  indexOf as collectionIdx\n} from '../../../util/Collections';\n\nimport { saveClear } from '../../../util/Removal';\n\nimport { isConnection } from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('../../../core/Canvas').default} Canvas\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible deletion of shapes.\n *\n * @param {Canvas} canvas\n * @param {Modeling} modeling\n */\nexport default function DeleteShapeHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\n\nDeleteShapeHandler.$inject = [ 'canvas', 'modeling' ];\n\n\n/**\n * - Remove connections\n * - Remove all direct children\n */\nDeleteShapeHandler.prototype.preExecute = function(context) {\n\n  var modeling = this._modeling;\n\n  var shape = context.shape;\n\n  // remove connections\n  saveClear(shape.incoming, function(connection) {\n\n    // To make sure that the connection isn't removed twice\n    // For example if a container is removed\n    modeling.removeConnection(connection, { nested: true });\n  });\n\n  saveClear(shape.outgoing, function(connection) {\n    modeling.removeConnection(connection, { nested: true });\n  });\n\n  // remove child shapes and connections\n  saveClear(shape.children, function(child) {\n    if (isConnection(child)) {\n      modeling.removeConnection(child, { nested: true });\n    } else {\n      modeling.removeShape(child, { nested: true });\n    }\n  });\n};\n\n/**\n * Remove shape and remember the parent\n */\nDeleteShapeHandler.prototype.execute = function(context) {\n  var canvas = this._canvas;\n\n  var shape = context.shape,\n      oldParent = shape.parent;\n\n  context.oldParent = oldParent;\n\n  // remove containment\n  context.oldParentIndex = collectionIdx(oldParent.children, shape);\n\n  // remove shape\n  canvas.removeShape(shape);\n\n  return shape;\n};\n\n\n/**\n * Command revert implementation\n */\nDeleteShapeHandler.prototype.revert = function(context) {\n\n  var canvas = this._canvas;\n\n  var shape = context.shape,\n      oldParent = context.oldParent,\n      oldParentIndex = context.oldParentIndex;\n\n  // restore containment\n  collectionAdd(oldParent.children, shape, oldParentIndex);\n\n  canvas.addShape(shape, oldParent);\n\n  return shape;\n};\n", "import {\n  forEach,\n  sortBy\n} from 'min-dash';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that distributes elements evenly.\n *\n * @param {Modeling} modeling\n */\nexport default function DistributeElements(modeling) {\n  this._modeling = modeling;\n}\n\nDistributeElements.$inject = [ 'modeling' ];\n\nvar OFF_AXIS = {\n  x: 'y',\n  y: 'x'\n};\n\nDistributeElements.prototype.preExecute = function(context) {\n  var modeling = this._modeling;\n\n  var groups = context.groups,\n      axis = context.axis,\n      dimension = context.dimension;\n\n  function updateRange(group, element) {\n    group.range.min = Math.min(element[axis], group.range.min);\n    group.range.max = Math.max(element[axis] + element[dimension], group.range.max);\n  }\n\n  function center(element) {\n    return element[axis] + element[dimension] / 2;\n  }\n\n  function lastIdx(arr) {\n    return arr.length - 1;\n  }\n\n  function rangeDiff(range) {\n    return range.max - range.min;\n  }\n\n  function centerElement(refCenter, element) {\n    var delta = { y: 0 };\n\n    delta[axis] = refCenter - center(element);\n\n    if (delta[axis]) {\n\n      delta[OFF_AXIS[axis]] = 0;\n\n      modeling.moveElements([ element ], delta, element.parent);\n    }\n  }\n\n  var firstGroup = groups[0],\n      lastGroupIdx = lastIdx(groups),\n      lastGroup = groups[ lastGroupIdx ];\n\n  var margin,\n      spaceInBetween,\n      groupsSize = 0; // the size of each range\n\n  forEach(groups, function(group, idx) {\n    var sortedElements,\n        refElem,\n        refCenter;\n\n    if (group.elements.length < 2) {\n      if (idx && idx !== groups.length - 1) {\n        updateRange(group, group.elements[0]);\n\n        groupsSize += rangeDiff(group.range);\n      }\n      return;\n    }\n\n    sortedElements = sortBy(group.elements, axis);\n\n    refElem = sortedElements[0];\n\n    if (idx === lastGroupIdx) {\n      refElem = sortedElements[lastIdx(sortedElements)];\n    }\n\n    refCenter = center(refElem);\n\n    // wanna update the ranges after the shapes have been centered\n    group.range = null;\n\n    forEach(sortedElements, function(element) {\n\n      centerElement(refCenter, element);\n\n      if (group.range === null) {\n        group.range = {\n          min: element[axis],\n          max: element[axis] + element[dimension]\n        };\n\n        return;\n      }\n\n      // update group's range after centering the range elements\n      updateRange(group, element);\n    });\n\n    if (idx && idx !== groups.length - 1) {\n      groupsSize += rangeDiff(group.range);\n    }\n  });\n\n  spaceInBetween = Math.abs(lastGroup.range.min - firstGroup.range.max);\n\n  margin = Math.round((spaceInBetween - groupsSize) / (groups.length - 1));\n\n  if (margin < groups.length - 1) {\n    return;\n  }\n\n  forEach(groups, function(group, groupIdx) {\n    var delta = {},\n        prevGroup;\n\n    if (group === firstGroup || group === lastGroup) {\n      return;\n    }\n\n    prevGroup = groups[groupIdx - 1];\n\n    group.range.max = 0;\n\n    forEach(group.elements, function(element, idx) {\n      delta[OFF_AXIS[axis]] = 0;\n      delta[axis] = (prevGroup.range.max - element[axis]) + margin;\n\n      if (group.range.min !== element[axis]) {\n        delta[axis] += element[axis] - group.range.min;\n      }\n\n      if (delta[axis]) {\n        modeling.moveElements([ element ], delta, element.parent);\n      }\n\n      group.range.max = Math.max(element[axis] + element[dimension], idx ? group.range.max : 0);\n    });\n  });\n};\n\nDistributeElements.prototype.postExecute = function(context) {\n\n};\n", "import { assign } from 'min-dash';\n\n/**\n * @typedef {import('../../../core/Canvas').default} Canvas\n * @typedef {import('../../../layout/BaseLayouter').default} Layouter\n */\n\n/**\n * A handler that implements reversible moving of shapes.\n *\n * @param {Layouter} layouter\n * @param {Canvas} canvas\n */\nexport default function LayoutConnectionHandler(layouter, canvas) {\n  this._layouter = layouter;\n  this._canvas = canvas;\n}\n\nLayoutConnectionHandler.$inject = [ 'layouter', 'canvas' ];\n\nLayoutConnectionHandler.prototype.execute = function(context) {\n\n  var connection = context.connection;\n\n  var oldWaypoints = connection.waypoints;\n\n  assign(context, {\n    oldWaypoints: oldWaypoints\n  });\n\n  connection.waypoints = this._layouter.layoutConnection(connection, context.hints);\n\n  return connection;\n};\n\nLayoutConnectionHandler.prototype.revert = function(context) {\n\n  var connection = context.connection;\n\n  connection.waypoints = context.oldWaypoints;\n\n  return connection;\n};\n", "import { forEach } from 'min-dash';\n\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../../../util/Collections';\n\n\n/**\n * A handler that implements reversible moving of connections.\n *\n * The handler differs from the layout connection handler in a sense\n * that it preserves the connection layout.\n */\nexport default function MoveConnectionHandler() { }\n\n\nMoveConnectionHandler.prototype.execute = function(context) {\n\n  var connection = context.connection,\n      delta = context.delta;\n\n  var newParent = context.newParent || connection.parent,\n      newParentIndex = context.newParentIndex,\n      oldParent = connection.parent;\n\n  // save old parent in context\n  context.oldParent = oldParent;\n  context.oldParentIndex = collectionRemove(oldParent.children, connection);\n\n  // add to new parent at position\n  collectionAdd(newParent.children, connection, newParentIndex);\n\n  // update parent\n  connection.parent = newParent;\n\n  // update waypoint positions\n  forEach(connection.waypoints, function(p) {\n    p.x += delta.x;\n    p.y += delta.y;\n\n    if (p.original) {\n      p.original.x += delta.x;\n      p.original.y += delta.y;\n    }\n  });\n\n  return connection;\n};\n\nMoveConnectionHandler.prototype.revert = function(context) {\n\n  var connection = context.connection,\n      newParent = connection.parent,\n      oldParent = context.oldParent,\n      oldParentIndex = context.oldParentIndex,\n      delta = context.delta;\n\n  // remove from newParent\n  collectionRemove(newParent.children, connection);\n\n  // restore previous location in old parent\n  collectionAdd(oldParent.children, connection, oldParentIndex);\n\n  // restore parent\n  connection.parent = oldParent;\n\n  // revert to old waypoint positions\n  forEach(connection.waypoints, function(p) {\n    p.x -= delta.x;\n    p.y -= delta.y;\n\n    if (p.original) {\n      p.original.x -= delta.x;\n      p.original.y -= delta.y;\n    }\n  });\n\n  return connection;\n};", "/**\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n */\n\n/**\n * @param {Rect} bounds\n * @return {Point}\n */\nexport function center(bounds) {\n  return {\n    x: bounds.x + (bounds.width / 2),\n    y: bounds.y + (bounds.height / 2)\n  };\n}\n\n\n/**\n * @param {Point} a\n * @param {Point} b\n * @return {Point}\n */\nexport function delta(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n", "import {\n  asTRBL,\n  getOrientation,\n  roundPoint\n} from '../layout/LayoutUtil';\n\nimport {\n  center,\n  delta\n} from './PositionUtil';\n\n/**\n * @typedef {import('../model/Types').Shape} Shape\n *\n * @typedef {import('../util/Types').Point} Point\n * @typedef {import('../util/Types').Rect} Rect\n */\n\n/**\n * Calculates the absolute point relative to the new element's position.\n *\n * @param {Point} point [absolute]\n * @param {Rect} oldBounds\n * @param {Rect} newBounds\n *\n * @return {Point} point [absolute]\n */\nexport function getNewAttachPoint(point, oldBounds, newBounds) {\n  var oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      oldDelta = delta(point, oldCenter);\n\n  var newDelta = {\n    x: oldDelta.x * (newBounds.width / oldBounds.width),\n    y: oldDelta.y * (newBounds.height / oldBounds.height)\n  };\n\n  return roundPoint({\n    x: newCenter.x + newDelta.x,\n    y: newCenter.y + newDelta.y\n  });\n}\n\n\n/**\n * Calculates the shape's delta relative to a new position\n * of a certain element's bounds.\n *\n * @param {Shape} shape\n * @param {Rect} oldBounds\n * @param {Rect} newBounds\n *\n * @return {Point} delta\n */\nexport function getNewAttachShapeDelta(shape, oldBounds, newBounds) {\n  var shapeCenter = center(shape),\n      oldCenter = center(oldBounds),\n      newCenter = center(newBounds),\n      shapeDelta = delta(shape, shapeCenter),\n      oldCenterDelta = delta(shapeCenter, oldCenter),\n      stickyPositionDelta = getStickyPositionDelta(shapeCenter, oldBounds, newBounds);\n\n  if (stickyPositionDelta) {\n    return stickyPositionDelta;\n  }\n\n  var newCenterDelta = {\n    x: oldCenterDelta.x * (newBounds.width / oldBounds.width),\n    y: oldCenterDelta.y * (newBounds.height / oldBounds.height)\n  };\n\n  var newShapeCenter = {\n    x: newCenter.x + newCenterDelta.x,\n    y: newCenter.y + newCenterDelta.y\n  };\n\n  return roundPoint({\n    x: newShapeCenter.x + shapeDelta.x - shape.x,\n    y: newShapeCenter.y + shapeDelta.y - shape.y\n  });\n}\n\nfunction getStickyPositionDelta(oldShapeCenter, oldBounds, newBounds) {\n  var oldTRBL = asTRBL(oldBounds),\n      newTRBL = asTRBL(newBounds);\n\n  if (isMoved(oldTRBL, newTRBL)) {\n    return null;\n  }\n\n  var oldOrientation = getOrientation(oldBounds, oldShapeCenter),\n      stickyPositionDelta,\n      newShapeCenter,\n      newOrientation;\n\n  if (oldOrientation === 'top') {\n    stickyPositionDelta = {\n      x: 0,\n      y: newTRBL.bottom - oldTRBL.bottom\n    };\n  } else if (oldOrientation === 'bottom') {\n    stickyPositionDelta = {\n      x: 0,\n      y: newTRBL.top - oldTRBL.top\n    };\n  } else if (oldOrientation === 'right') {\n    stickyPositionDelta = {\n      x: newTRBL.left - oldTRBL.left,\n      y: 0\n    };\n  } else if (oldOrientation === 'left') {\n    stickyPositionDelta = {\n      x: newTRBL.right - oldTRBL.right,\n      y: 0\n    };\n  } else {\n\n    // fallback to proportional movement for corner-placed attachments\n    return null;\n  }\n\n  newShapeCenter = {\n    x: oldShapeCenter.x + stickyPositionDelta.x,\n    y: oldShapeCenter.y + stickyPositionDelta.y\n  };\n\n  newOrientation = getOrientation(newBounds, newShapeCenter);\n\n  if (newOrientation !== oldOrientation) {\n\n    // fallback to proportional movement if orientation would otherwise change\n    return null;\n  }\n\n  return stickyPositionDelta;\n}\n\nfunction isMoved(oldTRBL, newTRBL) {\n  return isHorizontallyMoved(oldTRBL, newTRBL) || isVerticallyMoved(oldTRBL, newTRBL);\n}\n\nfunction isHorizontallyMoved(oldTRBL, newTRBL) {\n  return oldTRBL.right !== newTRBL.right && oldTRBL.left !== newTRBL.left;\n}\n\nfunction isVerticallyMoved(oldTRBL, newTRBL) {\n  return oldTRBL.top !== newTRBL.top && oldTRBL.bottom !== newTRBL.bottom;\n}\n", "import {\n  getNewAttachPoint\n} from '../../../../util/AttachUtil';\n\nimport {\n  getOrientation\n} from '../../../../layout/LayoutUtil';\n\nimport {\n  filter,\n  map\n} from 'min-dash';\n\n/**\n * @typedef {import('../../../../core/Types').ConnectionLike} Connection\n * @typedef {import('../../../../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../../../../util/Types').Point} Point\n * @typedef {import('../../../../util/Types').Rect} Rect\n */\n\n/**\n * @param {Connection} connection\n * @param {Shape} shape\n * @param {Rect} oldBounds\n * @return {Point}\n */\nexport function getResizedSourceAnchor(connection, shape, oldBounds) {\n\n  var waypoints = safeGetWaypoints(connection),\n      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),\n      oldAnchor = waypoints[0];\n\n  // new anchor is the last waypoint enclosed be resized source\n  if (waypointsInsideNewBounds.length) {\n    return waypointsInsideNewBounds[ waypointsInsideNewBounds.length - 1 ];\n  }\n\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\n\n\nexport function getResizedTargetAnchor(connection, shape, oldBounds) {\n\n  var waypoints = safeGetWaypoints(connection),\n      waypointsInsideNewBounds = getWaypointsInsideBounds(waypoints, shape),\n      oldAnchor = waypoints[waypoints.length - 1];\n\n  // new anchor is the first waypoint enclosed be resized target\n  if (waypointsInsideNewBounds.length) {\n    return waypointsInsideNewBounds[ 0 ];\n  }\n\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, shape);\n}\n\n\nexport function getMovedSourceAnchor(connection, source, moveDelta) {\n\n  var waypoints = safeGetWaypoints(connection),\n      oldBounds = subtract(source, moveDelta),\n      oldAnchor = waypoints[ 0 ];\n\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, source);\n}\n\n\nexport function getMovedTargetAnchor(connection, target, moveDelta) {\n\n  var waypoints = safeGetWaypoints(connection),\n      oldBounds = subtract(target, moveDelta),\n      oldAnchor = waypoints[ waypoints.length - 1 ];\n\n  return getNewAttachPoint(oldAnchor.original || oldAnchor, oldBounds, target);\n}\n\n\n// helpers //////////////////////\n\nfunction subtract(bounds, delta) {\n  return {\n    x: bounds.x - delta.x,\n    y: bounds.y - delta.y,\n    width: bounds.width,\n    height: bounds.height\n  };\n}\n\n\n/**\n * Return waypoints of given connection; throw if non exists (should not happen!!).\n *\n * @param {Connection} connection\n *\n * @return {Point[]}\n */\nfunction safeGetWaypoints(connection) {\n\n  var waypoints = connection.waypoints;\n\n  if (!waypoints.length) {\n    throw new Error('connection#' + connection.id + ': no waypoints');\n  }\n\n  return waypoints;\n}\n\nfunction getWaypointsInsideBounds(waypoints, bounds) {\n  var originalWaypoints = map(waypoints, getOriginal);\n\n  return filter(originalWaypoints, function(waypoint) {\n    return isInsideBounds(waypoint, bounds);\n  });\n}\n\n/**\n * Checks if point is inside bounds, incl. edges.\n *\n * @param {Point} point\n * @param {Rect} bounds\n */\nfunction isInsideBounds(point, bounds) {\n  return getOrientation(bounds, point, 1) === 'intersect';\n}\n\nfunction getOriginal(point) {\n  return point.original || point;\n}\n", "import {\n  assign\n} from 'min-dash';\n\nimport {\n  getClosure\n} from '../../../../util/Elements';\n\n/**\n * @typedef {import('../../../../model/Types').Connection} Connection\n * @typedef {import('../../../../model/Types').Element} Element\n * @typedef {import('../../../../model/Types').Shape} Shape\n */\n\nexport default function MoveClosure() {\n\n  /**\n   * @type {Record<string, Shape>}\n   */\n  this.allShapes = {};\n\n  /**\n   * @type {Record<string, Connection>}\n   */\n  this.allConnections = {};\n\n  /**\n   * @type {Record<string, Element>}\n   */\n  this.enclosedElements = {};\n\n  /**\n   * @type {Record<string, Connection>}\n   */\n  this.enclosedConnections = {};\n\n  /**\n   * @type {Record<string, Element>}\n   */\n  this.topLevel = {};\n}\n\n/**\n * @param {Element} element\n * @param {boolean} [isTopLevel]\n *\n * @return {MoveClosure}\n */\nMoveClosure.prototype.add = function(element, isTopLevel) {\n  return this.addAll([ element ], isTopLevel);\n};\n\n/**\n * @param {Element[]} elements\n * @param {boolean} [isTopLevel]\n *\n * @return {MoveClosure}\n */\nMoveClosure.prototype.addAll = function(elements, isTopLevel) {\n\n  var newClosure = getClosure(elements, !!isTopLevel, this);\n\n  assign(this, newClosure);\n\n  return this;\n};", "import {\n  forEach\n} from 'min-dash';\n\nimport {\n  getMovedSourceAnchor,\n  getMovedTargetAnchor\n} from './AnchorsHelper';\n\nimport MoveClosure from './MoveClosure';\n\n/**\n * @typedef {import('../../../../core/Types').ElementLike} Element\n * @typedef {import('../../../../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../../../../util/Types').Point} Point\n *\n * @typedef {import('../../Modeling').default} Modeling\n */\n\n/**\n * A helper that is able to carry out serialized move\n * operations on multiple elements.\n *\n * @param {Modeling} modeling\n */\nexport default function MoveHelper(modeling) {\n  this._modeling = modeling;\n}\n\n/**\n * Move the specified elements and all children by the given delta.\n *\n * This moves all enclosed connections, too and layouts all affected\n * external connections.\n *\n * @template {Element} T\n *\n * @param {T[]} elements\n * @param {Point} delta\n * @param {Shape} newParent The new parent of all elements that are not nested.\n *\n * @return {T[]}\n */\nMoveHelper.prototype.moveRecursive = function(elements, delta, newParent) {\n  if (!elements) {\n    return [];\n  } else {\n    return this.moveClosure(this.getClosure(elements), delta, newParent);\n  }\n};\n\n/**\n * Move the given closure of elmements.\n *\n * @param {Object} closure\n * @param {Point} delta\n * @param {Shape} [newParent]\n * @param {Shape} [newHost]\n */\nMoveHelper.prototype.moveClosure = function(closure, delta, newParent, newHost, primaryShape) {\n  var modeling = this._modeling;\n\n  var allShapes = closure.allShapes,\n      allConnections = closure.allConnections,\n      enclosedConnections = closure.enclosedConnections,\n      topLevel = closure.topLevel,\n      keepParent = false;\n\n  if (primaryShape && primaryShape.parent === newParent) {\n    keepParent = true;\n  }\n\n  // move all shapes\n  forEach(allShapes, function(shape) {\n\n    // move the element according to the given delta\n    modeling.moveShape(shape, delta, topLevel[shape.id] && !keepParent && newParent, {\n      recurse: false,\n      layout: false\n    });\n  });\n\n  // move all child connections / layout external connections\n  forEach(allConnections, function(c) {\n\n    var sourceMoved = !!allShapes[c.source.id],\n        targetMoved = !!allShapes[c.target.id];\n\n    if (enclosedConnections[c.id] && sourceMoved && targetMoved) {\n      modeling.moveConnection(c, delta, topLevel[c.id] && !keepParent && newParent);\n    } else {\n      modeling.layoutConnection(c, {\n        connectionStart: sourceMoved && getMovedSourceAnchor(c, c.source, delta),\n        connectionEnd: targetMoved && getMovedTargetAnchor(c, c.target, delta)\n      });\n    }\n  });\n};\n\n/**\n * Returns the closure for the selected elements\n *\n * @param {Element[]} elements\n *\n * @return {MoveClosure}\n */\nMoveHelper.prototype.getClosure = function(elements) {\n  return new MoveClosure().addAll(elements, true);\n};", "import MoveHelper from './helper/MoveHelper';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible moving of shapes.\n *\n * @param {Modeling} modeling\n */\nexport default function MoveElementsHandler(modeling) {\n  this._helper = new MoveHelper(modeling);\n}\n\nMoveElementsHandler.$inject = [ 'modeling' ];\n\nMoveElementsHandler.prototype.preExecute = function(context) {\n  context.closure = this._helper.getClosure(context.shapes);\n};\n\nMoveElementsHandler.prototype.postExecute = function(context) {\n\n  var hints = context.hints,\n      primaryShape;\n\n  if (hints && hints.primaryShape) {\n    primaryShape = hints.primaryShape;\n    hints.oldParent = primaryShape.parent;\n  }\n\n  this._helper.moveClosure(\n    context.closure,\n    context.delta,\n    context.newParent,\n    context.newHost,\n    primaryShape\n  );\n};", "import {\n  assign,\n  forEach,\n  pick\n} from 'min-dash';\n\nimport MoveHelper from './helper/MoveHelper';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../../../util/Collections';\n\nimport {\n  getMovedSourceAnchor,\n  getMovedTargetAnchor\n} from './helper/AnchorsHelper';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible moving of shapes.\n *\n * @param {Modeling} modeling\n */\nexport default function MoveShapeHandler(modeling) {\n  this._modeling = modeling;\n\n  this._helper = new MoveHelper(modeling);\n}\n\nMoveShapeHandler.$inject = [ 'modeling' ];\n\n\nMoveShapeHandler.prototype.execute = function(context) {\n\n  var shape = context.shape,\n      delta = context.delta,\n      newParent = context.newParent || shape.parent,\n      newParentIndex = context.newParentIndex,\n      oldParent = shape.parent;\n\n  context.oldBounds = pick(shape, [ 'x', 'y', 'width', 'height' ]);\n\n  // save old parent in context\n  context.oldParent = oldParent;\n  context.oldParentIndex = collectionRemove(oldParent.children, shape);\n\n  // add to new parent at position\n  collectionAdd(newParent.children, shape, newParentIndex);\n\n  // update shape parent + position\n  assign(shape, {\n    parent: newParent,\n    x: shape.x + delta.x,\n    y: shape.y + delta.y\n  });\n\n  return shape;\n};\n\nMoveShapeHandler.prototype.postExecute = function(context) {\n\n  var shape = context.shape,\n      delta = context.delta,\n      hints = context.hints;\n\n  var modeling = this._modeling;\n\n  if (hints.layout !== false) {\n\n    forEach(shape.incoming, function(c) {\n      modeling.layoutConnection(c, {\n        connectionEnd: getMovedTargetAnchor(c, shape, delta)\n      });\n    });\n\n    forEach(shape.outgoing, function(c) {\n      modeling.layoutConnection(c, {\n        connectionStart: getMovedSourceAnchor(c, shape, delta)\n      });\n    });\n  }\n\n  if (hints.recurse !== false) {\n    this.moveChildren(context);\n  }\n};\n\nMoveShapeHandler.prototype.revert = function(context) {\n\n  var shape = context.shape,\n      oldParent = context.oldParent,\n      oldParentIndex = context.oldParentIndex,\n      delta = context.delta;\n\n  // restore previous location in old parent\n  collectionAdd(oldParent.children, shape, oldParentIndex);\n\n  // revert to old position and parent\n  assign(shape, {\n    parent: oldParent,\n    x: shape.x - delta.x,\n    y: shape.y - delta.y\n  });\n\n  return shape;\n};\n\nMoveShapeHandler.prototype.moveChildren = function(context) {\n\n  var delta = context.delta,\n      shape = context.shape;\n\n  this._helper.moveRecursive(shape.children, delta, null);\n};\n\nMoveShapeHandler.prototype.getNewParent = function(context) {\n  return context.newParent || context.shape.parent;\n};\n", "import { isArray } from 'min-dash';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * Reconnect connection handler.\n *\n * @param {Modeling} modeling\n */\nexport default function ReconnectConnectionHandler(modeling) {\n  this._modeling = modeling;\n}\n\nReconnectConnectionHandler.$inject = [ 'modeling' ];\n\nReconnectConnectionHandler.prototype.execute = function(context) {\n  var newSource = context.newSource,\n      newTarget = context.newTarget,\n      connection = context.connection,\n      dockingOrPoints = context.dockingOrPoints;\n\n  if (!newSource && !newTarget) {\n    throw new Error('newSource or newTarget required');\n  }\n\n  if (isArray(dockingOrPoints)) {\n    context.oldWaypoints = connection.waypoints;\n    connection.waypoints = dockingOrPoints;\n  }\n\n  if (newSource) {\n    context.oldSource = connection.source;\n    connection.source = newSource;\n  }\n\n  if (newTarget) {\n    context.oldTarget = connection.target;\n    connection.target = newTarget;\n  }\n\n  return connection;\n};\n\nReconnectConnectionHandler.prototype.postExecute = function(context) {\n  var connection = context.connection,\n      newSource = context.newSource,\n      newTarget = context.newTarget,\n      dockingOrPoints = context.dockingOrPoints,\n      hints = context.hints || {};\n\n  var layoutConnectionHints = {};\n\n  if (hints.connectionStart) {\n    layoutConnectionHints.connectionStart = hints.connectionStart;\n  }\n\n  if (hints.connectionEnd) {\n    layoutConnectionHints.connectionEnd = hints.connectionEnd;\n  }\n\n  if (hints.layoutConnection === false) {\n    return;\n  }\n\n  if (newSource && (!newTarget || hints.docking === 'source')) {\n    layoutConnectionHints.connectionStart = layoutConnectionHints.connectionStart\n      || getDocking(isArray(dockingOrPoints) ? dockingOrPoints[ 0 ] : dockingOrPoints);\n  }\n\n  if (newTarget && (!newSource || hints.docking === 'target')) {\n    layoutConnectionHints.connectionEnd = layoutConnectionHints.connectionEnd\n      || getDocking(isArray(dockingOrPoints) ? dockingOrPoints[ dockingOrPoints.length - 1 ] : dockingOrPoints);\n  }\n\n  if (hints.newWaypoints) {\n    layoutConnectionHints.waypoints = hints.newWaypoints;\n  }\n\n  this._modeling.layoutConnection(connection, layoutConnectionHints);\n};\n\nReconnectConnectionHandler.prototype.revert = function(context) {\n  var oldSource = context.oldSource,\n      oldTarget = context.oldTarget,\n      oldWaypoints = context.oldWaypoints,\n      connection = context.connection;\n\n  if (oldSource) {\n    connection.source = oldSource;\n  }\n\n  if (oldTarget) {\n    connection.target = oldTarget;\n  }\n\n  if (oldWaypoints) {\n    connection.waypoints = oldWaypoints;\n  }\n\n  return connection;\n};\n\n\n\n// helpers //////////\n\nfunction getDocking(point) {\n  return point.original || point;\n}", "import { forEach } from 'min-dash';\n\nimport {\n  getResizedSourceAnchor,\n  getResizedTargetAnchor\n} from './helper/AnchorsHelper';\n\n/**\n * @typedef {import('../../model/Types').Shape} Shape\n *\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../../rules/Rules').default} Rules\n */\n\n/**\n * Replace shape by adding new shape and removing old shape. Incoming and outgoing connections will\n * be kept if possible.\n *\n * @class\n * @constructor\n *\n * @param {Modeling} modeling\n * @param {Rules} rules\n */\nexport default function ReplaceShapeHandler(modeling, rules) {\n  this._modeling = modeling;\n  this._rules = rules;\n}\n\nReplaceShapeHandler.$inject = [ 'modeling', 'rules' ];\n\n\n/**\n * Add new shape.\n *\n * @param {Object} context\n * @param {Shape} context.oldShape\n * @param {Object} context.newData\n * @param {string} context.newData.type\n * @param {number} context.newData.x\n * @param {number} context.newData.y\n * @param {Object} [context.hints]\n */\nReplaceShapeHandler.prototype.preExecute = function(context) {\n  var self = this,\n      modeling = this._modeling,\n      rules = this._rules;\n\n  var oldShape = context.oldShape,\n      newData = context.newData,\n      hints = context.hints || {},\n      newShape;\n\n  function canReconnect(source, target, connection) {\n    return rules.allowed('connection.reconnect', {\n      connection: connection,\n      source: source,\n      target: target\n    });\n  }\n\n  // (1) add new shape at given position\n  var position = {\n    x: newData.x,\n    y: newData.y\n  };\n\n  var oldBounds = {\n    x: oldShape.x,\n    y: oldShape.y,\n    width: oldShape.width,\n    height: oldShape.height\n  };\n\n  newShape = context.newShape =\n    context.newShape ||\n    self.createShape(newData, position, oldShape.parent, hints);\n\n  // (2) update host\n  if (oldShape.host) {\n    modeling.updateAttachment(newShape, oldShape.host);\n  }\n\n  // (3) adopt all children from old shape\n  var children;\n\n  if (hints.moveChildren !== false) {\n    children = oldShape.children.slice();\n\n    modeling.moveElements(children, { x: 0, y: 0 }, newShape, hints);\n  }\n\n  // (4) reconnect connections to new shape if possible\n  var incoming = oldShape.incoming.slice(),\n      outgoing = oldShape.outgoing.slice();\n\n  forEach(incoming, function(connection) {\n    var source = connection.source,\n        allowed = canReconnect(source, newShape, connection);\n\n    if (allowed) {\n      self.reconnectEnd(\n        connection, newShape,\n        getResizedTargetAnchor(connection, newShape, oldBounds),\n        hints\n      );\n    }\n  });\n\n  forEach(outgoing, function(connection) {\n    var target = connection.target,\n        allowed = canReconnect(newShape, target, connection);\n\n    if (allowed) {\n      self.reconnectStart(\n        connection, newShape,\n        getResizedSourceAnchor(connection, newShape, oldBounds),\n        hints\n      );\n    }\n  });\n};\n\n\n/**\n * Remove old shape.\n */\nReplaceShapeHandler.prototype.postExecute = function(context) {\n  var oldShape = context.oldShape;\n\n  this._modeling.removeShape(oldShape);\n};\n\n\nReplaceShapeHandler.prototype.execute = function(context) {};\n\n\nReplaceShapeHandler.prototype.revert = function(context) {};\n\n\nReplaceShapeHandler.prototype.createShape = function(shape, position, target, hints) {\n  return this._modeling.createShape(shape, position, target, hints);\n};\n\n\nReplaceShapeHandler.prototype.reconnectStart = function(connection, newSource, dockingPoint, hints) {\n  this._modeling.reconnectStart(connection, newSource, dockingPoint, hints);\n};\n\n\nReplaceShapeHandler.prototype.reconnectEnd = function(connection, newTarget, dockingPoint, hints) {\n  this._modeling.reconnectEnd(connection, newTarget, dockingPoint, hints);\n};\n", "import {\n  assign,\n  forEach\n} from 'min-dash';\n\nimport {\n  getResizedSourceAnchor,\n  getResizedTargetAnchor\n} from './helper/AnchorsHelper';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible resizing of shapes.\n *\n * @param {Modeling} modeling\n */\nexport default function ResizeShapeHandler(modeling) {\n  this._modeling = modeling;\n}\n\nResizeShapeHandler.$inject = [ 'modeling' ];\n\n/**\n * {\n *   shape: {....}\n *   newBounds: {\n *     width:  20,\n *     height: 40,\n *     x:       5,\n *     y:      10\n *   }\n *\n * }\n */\nResizeShapeHandler.prototype.execute = function(context) {\n  var shape = context.shape,\n      newBounds = context.newBounds,\n      minBounds = context.minBounds;\n\n  if (newBounds.x === undefined || newBounds.y === undefined ||\n      newBounds.width === undefined || newBounds.height === undefined) {\n    throw new Error('newBounds must have {x, y, width, height} properties');\n  }\n\n  if (minBounds && (newBounds.width < minBounds.width\n    || newBounds.height < minBounds.height)) {\n    throw new Error('width and height cannot be less than minimum height and width');\n  } else if (!minBounds\n    && newBounds.width < 10 || newBounds.height < 10) {\n    throw new Error('width and height cannot be less than 10px');\n  }\n\n  // save old bbox in context\n  context.oldBounds = {\n    width:  shape.width,\n    height: shape.height,\n    x:      shape.x,\n    y:      shape.y\n  };\n\n  // update shape\n  assign(shape, {\n    width:  newBounds.width,\n    height: newBounds.height,\n    x:      newBounds.x,\n    y:      newBounds.y\n  });\n\n  return shape;\n};\n\nResizeShapeHandler.prototype.postExecute = function(context) {\n  var modeling = this._modeling;\n\n  var shape = context.shape,\n      oldBounds = context.oldBounds,\n      hints = context.hints || {};\n\n  if (hints.layout === false) {\n    return;\n  }\n\n  forEach(shape.incoming, function(c) {\n    modeling.layoutConnection(c, {\n      connectionEnd: getResizedTargetAnchor(c, shape, oldBounds)\n    });\n  });\n\n  forEach(shape.outgoing, function(c) {\n    modeling.layoutConnection(c, {\n      connectionStart: getResizedSourceAnchor(c, shape, oldBounds)\n    });\n  });\n\n};\n\nResizeShapeHandler.prototype.revert = function(context) {\n\n  var shape = context.shape,\n      oldBounds = context.oldBounds;\n\n  // restore previous bbox\n  assign(shape, {\n    width:  oldBounds.width,\n    height: oldBounds.height,\n    x:      oldBounds.x,\n    y:      oldBounds.y\n  });\n\n  return shape;\n};\n", "/**\n * @typedef {import('../../core/Types').ConnectionLike} Connection\n * @typedef {import('../../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../../util/Types').Axis} Axis\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n */\n\nimport { forEach } from 'min-dash';\n\n/**\n * Return direction given axis and delta.\n *\n * @param {Axis} axis\n * @param {number} delta\n *\n * @return {Direction}\n */\nexport function getDirection(axis, delta) {\n\n  if (axis === 'x') {\n    if (delta > 0) {\n      return 'e';\n    }\n\n    if (delta < 0) {\n      return 'w';\n    }\n  }\n\n  if (axis === 'y') {\n    if (delta > 0) {\n      return 's';\n    }\n\n    if (delta < 0) {\n      return 'n';\n    }\n  }\n\n  return null;\n}\n\n/**\n * Returns connections whose waypoints are to be updated. Waypoints are to be updated if start\n * or end is to be moved or resized.\n *\n * @param {Array<Shape>} movingShapes\n * @param {Array<Shape>} resizingShapes\n *\n * @return {Array<Connection>}\n */\nexport function getWaypointsUpdatingConnections(movingShapes, resizingShapes) {\n  var waypointsUpdatingConnections = [];\n\n  forEach(movingShapes.concat(resizingShapes), function(shape) {\n    var incoming = shape.incoming,\n        outgoing = shape.outgoing;\n\n    forEach(incoming.concat(outgoing), function(connection) {\n      var source = connection.source,\n          target = connection.target;\n\n      if (includes(movingShapes, source) ||\n        includes(movingShapes, target) ||\n        includes(resizingShapes, source) ||\n        includes(resizingShapes, target)) {\n\n        if (!includes(waypointsUpdatingConnections, connection)) {\n          waypointsUpdatingConnections.push(connection);\n        }\n      }\n    });\n  });\n\n  return waypointsUpdatingConnections;\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\n/**\n * Resize bounds.\n *\n * @param {Rect} bounds\n * @param {Direction} direction\n * @param {Point} delta\n *\n * @return {Rect}\n */\nexport function resizeBounds(bounds, direction, delta) {\n  var x = bounds.x,\n      y = bounds.y,\n      width = bounds.width,\n      height = bounds.height,\n      dx = delta.x,\n      dy = delta.y;\n\n  switch (direction) {\n  case 'n':\n    return {\n      x: x,\n      y: y + dy,\n      width: width,\n      height: height - dy\n    };\n  case 's':\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height + dy\n    };\n  case 'w':\n    return {\n      x: x + dx,\n      y: y,\n      width: width - dx,\n      height: height\n    };\n  case 'e':\n    return {\n      x: x,\n      y: y,\n      width: width + dx,\n      height: height\n    };\n  default:\n    throw new Error('unknown direction: ' + direction);\n  }\n}", "import {\n  assign,\n  forEach,\n  map\n} from 'min-dash';\n\nimport {\n  getWaypointsUpdatingConnections,\n  resizeBounds\n} from '../../space-tool/SpaceUtil';\n\nimport {\n  getMovedSourceAnchor,\n  getMovedTargetAnchor,\n  getResizedSourceAnchor,\n  getResizedTargetAnchor\n} from './helper/AnchorsHelper';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * Add or remove space by moving and resizing shapes and updating connection waypoints.\n *\n * @param {Modeling} modeling\n */\nexport default function SpaceToolHandler(modeling) {\n  this._modeling = modeling;\n}\n\nSpaceToolHandler.$inject = [ 'modeling' ];\n\nSpaceToolHandler.prototype.preExecute = function(context) {\n  var delta = context.delta,\n      direction = context.direction,\n      movingShapes = context.movingShapes,\n      resizingShapes = context.resizingShapes,\n      start = context.start,\n      oldBounds = {};\n\n  // (1) move shapes\n  this.moveShapes(movingShapes, delta);\n\n  // (2a) save old bounds of resized shapes\n  forEach(resizingShapes, function(shape) {\n    oldBounds[shape.id] = getBounds(shape);\n  });\n\n  // (2b) resize shapes\n  this.resizeShapes(resizingShapes, delta, direction);\n\n  // (3) update connection waypoints\n  this.updateConnectionWaypoints(\n    getWaypointsUpdatingConnections(movingShapes, resizingShapes),\n    delta,\n    direction,\n    start,\n    movingShapes,\n    resizingShapes,\n    oldBounds\n  );\n};\n\nSpaceToolHandler.prototype.execute = function() {};\nSpaceToolHandler.prototype.revert = function() {};\n\nSpaceToolHandler.prototype.moveShapes = function(shapes, delta) {\n  var self = this;\n\n  forEach(shapes, function(element) {\n    self._modeling.moveShape(element, delta, null, {\n      autoResize: false,\n      layout: false,\n      recurse: false\n    });\n  });\n};\n\nSpaceToolHandler.prototype.resizeShapes = function(shapes, delta, direction) {\n  var self = this;\n\n  forEach(shapes, function(shape) {\n    var newBounds = resizeBounds(shape, direction, delta);\n\n    self._modeling.resizeShape(shape, newBounds, null, {\n      attachSupport: false,\n      autoResize: false,\n      layout: false\n    });\n  });\n};\n\n/**\n * Update connections waypoints according to the rules:\n *   1. Both source and target are moved/resized => move waypoints by the delta\n *   2. Only one of source and target is moved/resized => re-layout connection with moved start/end\n */\nSpaceToolHandler.prototype.updateConnectionWaypoints = function(\n    connections,\n    delta,\n    direction,\n    start,\n    movingShapes,\n    resizingShapes,\n    oldBounds\n) {\n  var self = this,\n      affectedShapes = movingShapes.concat(resizingShapes);\n\n  forEach(connections, function(connection) {\n    var source = connection.source,\n        target = connection.target,\n        waypoints = copyWaypoints(connection),\n        axis = getAxisFromDirection(direction),\n        layoutHints = {};\n\n    if (includes(affectedShapes, source) && includes(affectedShapes, target)) {\n\n      // move waypoints\n      waypoints = map(waypoints, function(waypoint) {\n        if (shouldMoveWaypoint(waypoint, start, direction)) {\n\n          // move waypoint\n          waypoint[ axis ] = waypoint[ axis ] + delta[ axis ];\n        }\n\n        if (waypoint.original && shouldMoveWaypoint(waypoint.original, start, direction)) {\n\n          // move waypoint original\n          waypoint.original[ axis ] = waypoint.original[ axis ] + delta[ axis ];\n        }\n\n        return waypoint;\n      });\n\n      self._modeling.updateWaypoints(connection, waypoints, {\n        labelBehavior: false\n      });\n    } else if (includes(affectedShapes, source) || includes(affectedShapes, target)) {\n\n      // re-layout connection with moved start/end\n      if (includes(movingShapes, source)) {\n        layoutHints.connectionStart = getMovedSourceAnchor(connection, source, delta);\n      } else if (includes(movingShapes, target)) {\n        layoutHints.connectionEnd = getMovedTargetAnchor(connection, target, delta);\n      } else if (includes(resizingShapes, source)) {\n        layoutHints.connectionStart = getResizedSourceAnchor(\n          connection, source, oldBounds[source.id]\n        );\n      } else if (includes(resizingShapes, target)) {\n        layoutHints.connectionEnd = getResizedTargetAnchor(\n          connection, target, oldBounds[target.id]\n        );\n      }\n\n      self._modeling.layoutConnection(connection, layoutHints);\n    }\n  });\n};\n\n\n// helpers //////////\n\nfunction copyWaypoint(waypoint) {\n  return assign({}, waypoint);\n}\n\nfunction copyWaypoints(connection) {\n  return map(connection.waypoints, function(waypoint) {\n\n    waypoint = copyWaypoint(waypoint);\n\n    if (waypoint.original) {\n      waypoint.original = copyWaypoint(waypoint.original);\n    }\n\n    return waypoint;\n  });\n}\n\nfunction getAxisFromDirection(direction) {\n  switch (direction) {\n  case 'n':\n    return 'y';\n  case 'w':\n    return 'x';\n  case 's':\n    return 'y';\n  case 'e':\n    return 'x';\n  }\n}\n\nfunction shouldMoveWaypoint(waypoint, start, direction) {\n  var relevantAxis = getAxisFromDirection(direction);\n\n  if (/e|s/.test(direction)) {\n    return waypoint[ relevantAxis ] > start;\n  } else if (/n|w/.test(direction)) {\n    return waypoint[ relevantAxis ] < start;\n  }\n}\n\nfunction includes(array, item) {\n  return array.indexOf(item) !== -1;\n}\n\nfunction getBounds(shape) {\n  return {\n    x: shape.x,\n    y: shape.y,\n    height: shape.height,\n    width: shape.width\n  };\n}\n", "import {\n  assign,\n  forEach\n} from 'min-dash';\n\n/**\n * @typedef {import('../../model/Types').Shape} Shape\n *\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that toggles the collapsed state of an element\n * and the visibility of all its children.\n *\n * @param {Modeling} modeling\n */\nexport default function ToggleShapeCollapseHandler(modeling) {\n  this._modeling = modeling;\n}\n\nToggleShapeCollapseHandler.$inject = [ 'modeling' ];\n\n\nToggleShapeCollapseHandler.prototype.execute = function(context) {\n\n  var shape = context.shape,\n      children = shape.children;\n\n  // recursively remember previous visibility of children\n  context.oldChildrenVisibility = getElementsVisibilityRecursive(children);\n\n  // toggle state\n  shape.collapsed = !shape.collapsed;\n\n  // recursively hide/show children\n  var result = setHiddenRecursive(children, shape.collapsed);\n\n  return [ shape ].concat(result);\n};\n\n\nToggleShapeCollapseHandler.prototype.revert = function(context) {\n\n  var shape = context.shape,\n      oldChildrenVisibility = context.oldChildrenVisibility;\n\n  var children = shape.children;\n\n  // recursively set old visability of children\n  var result = restoreVisibilityRecursive(children, oldChildrenVisibility);\n\n  // retoggle state\n  shape.collapsed = !shape.collapsed;\n\n  return [ shape ].concat(result);\n};\n\n\n// helpers //////////////////////\n\n/**\n * Return a map { elementId -> hiddenState}.\n *\n * @param {Shape[]} elements\n *\n * @return {Object}\n */\nfunction getElementsVisibilityRecursive(elements) {\n\n  var result = {};\n\n  forEach(elements, function(element) {\n    result[element.id] = element.hidden;\n\n    if (element.children) {\n      result = assign({}, result, getElementsVisibilityRecursive(element.children));\n    }\n  });\n\n  return result;\n}\n\n\nfunction setHiddenRecursive(elements, newHidden) {\n  var result = [];\n  forEach(elements, function(element) {\n    element.hidden = newHidden;\n\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(setHiddenRecursive(element.children, element.collapsed || newHidden));\n    }\n  });\n\n  return result;\n}\n\nfunction restoreVisibilityRecursive(elements, lastState) {\n  var result = [];\n  forEach(elements, function(element) {\n    element.hidden = lastState[element.id];\n\n    result = result.concat(element);\n\n    if (element.children) {\n      result = result.concat(restoreVisibilityRecursive(element.children, lastState));\n    }\n  });\n\n  return result;\n}\n", "import {\n  add as collectionAdd,\n  remove as collectionRemove\n} from '../../../util/Collections';\n\n/**\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that implements reversible attaching/detaching of shapes.\n *\n * @param {Modeling} modeling\n */\nexport default function UpdateAttachmentHandler(modeling) {\n  this._modeling = modeling;\n}\n\nUpdateAttachmentHandler.$inject = [ 'modeling' ];\n\n\nUpdateAttachmentHandler.prototype.execute = function(context) {\n  var shape = context.shape,\n      newHost = context.newHost,\n      oldHost = shape.host;\n\n  // (0) detach from old host\n  context.oldHost = oldHost;\n  context.attacherIdx = removeAttacher(oldHost, shape);\n\n  // (1) attach to new host\n  addAttacher(newHost, shape);\n\n  // (2) update host\n  shape.host = newHost;\n\n  return shape;\n};\n\nUpdateAttachmentHandler.prototype.revert = function(context) {\n  var shape = context.shape,\n      newHost = context.newHost,\n      oldHost = context.oldHost,\n      attacherIdx = context.attacherIdx;\n\n  // (2) update host\n  shape.host = oldHost;\n\n  // (1) attach to new host\n  removeAttacher(newHost, shape);\n\n  // (0) detach from old host\n  addAttacher(oldHost, shape, attacherIdx);\n\n  return shape;\n};\n\n\nfunction removeAttacher(host, attacher) {\n\n  // remove attacher from host\n  return collectionRemove(host && host.attachers, attacher);\n}\n\nfunction addAttacher(host, attacher, idx) {\n\n  if (!host) {\n    return;\n  }\n\n  var attachers = host.attachers;\n\n  if (!attachers) {\n    host.attachers = attachers = [];\n  }\n\n  collectionAdd(attachers, attacher, idx);\n}\n", "export default function UpdateWaypointsHandler() { }\n\nUpdateWaypointsHandler.prototype.execute = function(context) {\n\n  var connection = context.connection,\n      newWaypoints = context.newWaypoints;\n\n  context.oldWaypoints = connection.waypoints;\n\n  connection.waypoints = newWaypoints;\n\n  return connection;\n};\n\nUpdateWaypointsHandler.prototype.revert = function(context) {\n\n  var connection = context.connection,\n      oldWaypoints = context.oldWaypoints;\n\n  connection.waypoints = oldWaypoints;\n\n  return connection;\n};", "import {\n  assign,\n  forEach,\n  isArray\n} from 'min-dash';\n\nimport AlignElementsHandler from './cmd/AlignElementsHandler';\nimport AppendShapeHandler from './cmd/AppendShapeHandler';\nimport CreateConnectionHandler from './cmd/CreateConnectionHandler';\nimport CreateElementsHandler from './cmd/CreateElementsHandler';\nimport CreateLabelHandler from './cmd/CreateLabelHandler';\nimport CreateShapeHandler from './cmd/CreateShapeHandler';\nimport DeleteConnectionHandler from './cmd/DeleteConnectionHandler';\nimport DeleteElementsHandler from './cmd/DeleteElementsHandler';\nimport DeleteShapeHandler from './cmd/DeleteShapeHandler';\nimport DistributeElementsHandler from './cmd/DistributeElementsHandler';\nimport LayoutConnectionHandler from './cmd/LayoutConnectionHandler';\nimport MoveConnectionHandler from './cmd/MoveConnectionHandler';\nimport MoveElementsHandler from './cmd/MoveElementsHandler';\nimport MoveShapeHandler from './cmd/MoveShapeHandler';\nimport ReconnectConnectionHandler from './cmd/ReconnectConnectionHandler';\nimport ReplaceShapeHandler from './cmd/ReplaceShapeHandler';\nimport ResizeShapeHandler from './cmd/ResizeShapeHandler';\nimport SpaceToolHandler from './cmd/SpaceToolHandler';\nimport ToggleShapeCollapseHandler from './cmd/ToggleShapeCollapseHandler';\nimport UpdateAttachmentHandler from './cmd/UpdateAttachmentHandler';\nimport UpdateWaypointsHandler from './cmd/UpdateWaypointsHandler';\n\nimport { isModelElement } from '../../model';\n\n/**\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Connection} Connection\n * @typedef {import('../../model/Types').Parent} Parent\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').Label} Label\n *\n * @typedef {import('../../command/CommandStack').default} CommandStack\n * @typedef {import('../../core/ElementFactory').default} ElementFactory\n * @typedef {import('../../core/EventBus').default} EventBus\n *\n * @typedef {import('../../command/CommandStack').CommandHandlerConstructor} CommandHandlerConstructor\n *\n * @typedef {import('../../util/Types').Dimensions} Dimensions\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n *\n * @typedef { 'x' | 'y' } ModelingDistributeAxis\n *\n * @typedef { 'width' | 'height' } ModelingDistributeDimension\n *\n * @typedef { {\n *   bottom?: number;\n *   center?: number;\n *   left?: number;\n *   middle?: number;\n *   right?: number;\n *   top?: number;\n * } } ModelingAlignAlignment\n *\n * @typedef { {\n *   [key: string]: any;\n * } } ModelingHints\n *\n * @typedef { {\n *   attach?: boolean;\n * } & ModelingHints } ModelingMoveElementsHints\n *\n * @typedef { {\n *   attach?: boolean;\n * } & ModelingHints } ModelingCreateShapeHints\n */\n\n/**\n * @template {Element} U\n *\n * @typedef { {\n *   elements: U[],\n *   range: {\n *     min: number;\n *     max: number;\n *   } }\n * } ModelingDistributeGroup\n */\n\n/**\n * The basic modeling entry point.\n *\n * @template {Connection} [T=Connection]\n * @template {Element} [U=Element]\n * @template {Label} [V=Label]\n * @template {Parent} [W=Parent]\n * @template {Shape} [X=Shape]\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n */\nexport default function Modeling(eventBus, elementFactory, commandStack) {\n  this._eventBus = eventBus;\n  this._elementFactory = elementFactory;\n  this._commandStack = commandStack;\n\n  var self = this;\n\n  eventBus.on('diagram.init', function() {\n\n    // register modeling handlers\n    self.registerHandlers(commandStack);\n  });\n}\n\nModeling.$inject = [ 'eventBus', 'elementFactory', 'commandStack' ];\n\n/**\n * Get a map of all command handlers.\n *\n * @return {Map<string, CommandHandlerConstructor>}\n */\nModeling.prototype.getHandlers = function() {\n  return {\n    'shape.append': AppendShapeHandler,\n    'shape.create': CreateShapeHandler,\n    'shape.delete': DeleteShapeHandler,\n    'shape.move': MoveShapeHandler,\n    'shape.resize': ResizeShapeHandler,\n    'shape.replace': ReplaceShapeHandler,\n    'shape.toggleCollapse': ToggleShapeCollapseHandler,\n\n    'spaceTool': SpaceToolHandler,\n\n    'label.create': CreateLabelHandler,\n\n    'connection.create': CreateConnectionHandler,\n    'connection.delete': DeleteConnectionHandler,\n    'connection.move': MoveConnectionHandler,\n    'connection.layout': LayoutConnectionHandler,\n\n    'connection.updateWaypoints': UpdateWaypointsHandler,\n\n    'connection.reconnect': ReconnectConnectionHandler,\n\n    'elements.create': CreateElementsHandler,\n    'elements.move': MoveElementsHandler,\n    'elements.delete': DeleteElementsHandler,\n\n    'elements.distribute': DistributeElementsHandler,\n    'elements.align': AlignElementsHandler,\n\n    'element.updateAttachment': UpdateAttachmentHandler\n  };\n};\n\n/**\n * Register handlers with the command stack\n *\n * @param {CommandStack} commandStack\n */\nModeling.prototype.registerHandlers = function(commandStack) {\n  forEach(this.getHandlers(), function(handler, id) {\n    commandStack.registerHandler(id, handler);\n  });\n};\n\n\n/**\n * Move a shape by the given delta and optionally to a new parent.\n *\n * @param {X} shape\n * @param {Point} delta\n * @param {W} [newParent]\n * @param {number} [newParentIndex]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.moveShape = function(shape, delta, newParent, newParentIndex, hints) {\n\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = null;\n  }\n\n  var context = {\n    shape: shape,\n    delta:  delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.move', context);\n};\n\n\n/**\n * Update the attachment of a shape.\n *\n * @param {X} shape\n * @param {X} [newHost=undefined]\n */\nModeling.prototype.updateAttachment = function(shape, newHost) {\n  var context = {\n    shape: shape,\n    newHost: newHost\n  };\n\n  this._commandStack.execute('element.updateAttachment', context);\n};\n\n\n/**\n * Move elements by a given delta and optionally to a new parent.\n *\n * @param {U[]} shapes\n * @param {Point} delta\n * @param {W} [target]\n * @param {ModelingMoveElementsHints} [hints]\n */\nModeling.prototype.moveElements = function(shapes, delta, target, hints) {\n\n  hints = hints || {};\n\n  var attach = hints.attach;\n\n  var newParent = target,\n      newHost;\n\n  if (attach === true) {\n    newHost = target;\n    newParent = target.parent;\n  } else if (attach === false) {\n    newHost = null;\n  }\n\n  var context = {\n    shapes: shapes,\n    delta: delta,\n    newParent: newParent,\n    newHost: newHost,\n    hints: hints\n  };\n\n  this._commandStack.execute('elements.move', context);\n};\n\n/**\n * Move a shape by the given delta and optionally to a new parent.\n *\n * @param {T} connection\n * @param {Point} delta\n * @param {W} [newParent]\n * @param {number} [newParentIndex]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.moveConnection = function(connection, delta, newParent, newParentIndex, hints) {\n\n  if (typeof newParentIndex === 'object') {\n    hints = newParentIndex;\n    newParentIndex = undefined;\n  }\n\n  var context = {\n    connection: connection,\n    delta: delta,\n    newParent: newParent,\n    newParentIndex: newParentIndex,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.move', context);\n};\n\n/**\n * Layout a connection.\n *\n * @param {T} connection\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.layoutConnection = function(connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.layout', context);\n};\n\n/**\n * Create a connection.\n *\n * @overlord\n *\n * @param {U} source\n * @param {U} target\n * @param {Partial<T>} connection\n * @param {W} parent\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\n\n/**\n * Create a connection.\n *\n * @param {U} source\n * @param {U} target\n * @param {number} parentIndex\n * @param {Partial<T>} connection\n * @param {W} parent\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.createConnection = function(source, target, parentIndex, connection, parent, hints) {\n\n  if (typeof parentIndex === 'object') {\n    hints = parent;\n    parent = connection;\n    connection = parentIndex;\n    parentIndex = undefined;\n  }\n\n  connection = this._create('connection', connection);\n\n  var context = {\n    source: source,\n    target: target,\n    parent: parent,\n    parentIndex: parentIndex,\n    connection: connection,\n    hints: hints\n  };\n\n  this._commandStack.execute('connection.create', context);\n\n  return context.connection;\n};\n\n\n/**\n * Create a shape.\n *\n * @overlord\n *\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {ModelingCreateShapeHints} [hints]\n *\n * @return {X}\n */\n\n/**\n * Create a shape.\n *\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {number} parentIndex\n * @param {ModelingCreateShapeHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.createShape = function(shape, position, target, parentIndex, hints) {\n\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n\n  hints = hints || {};\n\n  var attach = hints.attach,\n      parent,\n      host;\n\n  shape = this._create('shape', shape);\n\n  if (attach) {\n    parent = target.parent;\n    host = target;\n  } else {\n    parent = target;\n  }\n\n  var context = {\n    position: position,\n    shape: shape,\n    parent: parent,\n    parentIndex: parentIndex,\n    host: host,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.create', context);\n\n  return context.shape;\n};\n\n/**\n * Create elements.\n *\n * @param {Partial<U>[]} elements\n * @param {Point} position\n * @param {W} parent\n * @param {number} [parentIndex]\n * @param {ModelingHints} [hints]\n *\n * @return {U[]}\n */\nModeling.prototype.createElements = function(elements, position, parent, parentIndex, hints) {\n  if (!isArray(elements)) {\n    elements = [ elements ];\n  }\n\n  if (typeof parentIndex !== 'number') {\n    hints = parentIndex;\n    parentIndex = undefined;\n  }\n\n  hints = hints || {};\n\n  var context = {\n    position: position,\n    elements: elements,\n    parent: parent,\n    parentIndex: parentIndex,\n    hints: hints\n  };\n\n  this._commandStack.execute('elements.create', context);\n\n  return context.elements;\n};\n\n/**\n * Create a label.\n *\n * @param {U} labelTarget\n * @param {Point} position\n * @param {Partial<V>} label\n * @param {W} [parent]\n *\n * @return {V}\n */\nModeling.prototype.createLabel = function(labelTarget, position, label, parent) {\n\n  label = this._create('label', label);\n\n  var context = {\n    labelTarget: labelTarget,\n    position: position,\n    parent: parent || labelTarget.parent,\n    shape: label\n  };\n\n  this._commandStack.execute('label.create', context);\n\n  return context.shape;\n};\n\n\n/**\n * Create and connect a shape to a source.\n *\n * @param {U} source\n * @param {Partial<X>} shape\n * @param {Point} position\n * @param {W} target\n * @param {ModelingHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.appendShape = function(source, shape, position, target, hints) {\n\n  hints = hints || {};\n\n  shape = this._create('shape', shape);\n\n  var context = {\n    source: source,\n    position: position,\n    target: target,\n    shape: shape,\n    connection: hints.connection,\n    connectionParent: hints.connectionParent,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.append', context);\n\n  return context.shape;\n};\n\n/**\n * Remove elements.\n *\n * @param {U[]} elements\n */\nModeling.prototype.removeElements = function(elements) {\n  var context = {\n    elements: elements\n  };\n\n  this._commandStack.execute('elements.delete', context);\n};\n\n/**\n * Distribute elements along a given axis.\n *\n * @param {ModelingDistributeGroup<U>[]} groups\n * @param {ModelingDistributeAxis} axis\n * @param {ModelingDistributeDimension} dimension\n */\nModeling.prototype.distributeElements = function(groups, axis, dimension) {\n  var context = {\n    groups: groups,\n    axis: axis,\n    dimension: dimension\n  };\n\n  this._commandStack.execute('elements.distribute', context);\n};\n\n/**\n * Remove a shape.\n *\n * @param {X} shape\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.removeShape = function(shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.delete', context);\n};\n\n/**\n * Remove a connection.\n *\n * @param {T} connection\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.removeConnection = function(connection, hints) {\n  var context = {\n    connection: connection,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.delete', context);\n};\n\n/**\n * Replace a shape.\n *\n * @param {X} oldShape\n * @param {Partial<X>} newShape\n * @param {ModelingHints} [hints]\n *\n * @return {X}\n */\nModeling.prototype.replaceShape = function(oldShape, newShape, hints) {\n  var context = {\n    oldShape: oldShape,\n    newData: newShape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.replace', context);\n\n  return context.newShape;\n};\n\n/**\n * Align elements.\n *\n * @param {U[]} elements\n * @param {ModelingAlignAlignment} alignment\n */\nModeling.prototype.alignElements = function(elements, alignment) {\n  var context = {\n    elements: elements,\n    alignment: alignment\n  };\n\n  this._commandStack.execute('elements.align', context);\n};\n\n/**\n * Resize a shape.\n *\n * @param {X} shape\n * @param {Rect} newBounds\n * @param {Dimensions} [minBounds]\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.resizeShape = function(shape, newBounds, minBounds, hints) {\n  var context = {\n    shape: shape,\n    newBounds: newBounds,\n    minBounds: minBounds,\n    hints: hints\n  };\n\n  this._commandStack.execute('shape.resize', context);\n};\n\n/**\n * Create space along an horizontally or vertically.\n *\n * @param {X[]} movingShapes\n * @param {X[]} resizingShapes\n * @param {Point} delta\n * @param {Direction} direction\n * @param {number} start\n */\nModeling.prototype.createSpace = function(movingShapes, resizingShapes, delta, direction, start) {\n  var context = {\n    delta: delta,\n    direction: direction,\n    movingShapes: movingShapes,\n    resizingShapes: resizingShapes,\n    start: start\n  };\n\n  this._commandStack.execute('spaceTool', context);\n};\n\n/**\n * Update a connetions waypoints.\n *\n * @param {T} connection\n * @param {Point[]} newWaypoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.updateWaypoints = function(connection, newWaypoints, hints) {\n  var context = {\n    connection: connection,\n    newWaypoints: newWaypoints,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.updateWaypoints', context);\n};\n\n/**\n * Reconnect a connections source and/or target.\n *\n * @param {T} connection\n * @param {U} source\n * @param {U} target\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnect = function(connection, source, target, dockingOrPoints, hints) {\n  var context = {\n    connection: connection,\n    newSource: source,\n    newTarget: target,\n    dockingOrPoints: dockingOrPoints,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('connection.reconnect', context);\n};\n\n/**\n * Reconnect a connections source.\n *\n * @param {T} connection\n * @param {U} newSource\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnectStart = function(connection, newSource, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n\n  this.reconnect(connection, newSource, connection.target, dockingOrPoints, assign(hints, {\n    docking: 'source'\n  }));\n};\n\n/**\n * Reconnect a connections target.\n *\n * @param {T} connection\n * @param {U} newTarget\n * @param {Point|Point[]} dockingOrPoints\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.reconnectEnd = function(connection, newTarget, dockingOrPoints, hints) {\n  if (!hints) {\n    hints = {};\n  }\n\n  this.reconnect(connection, connection.source, newTarget, dockingOrPoints, assign(hints, {\n    docking: 'target'\n  }));\n};\n\n/**\n * Connect two elements.\n *\n * @param {U} source\n * @param {U} target\n * @param {Partial<T>} [attrs]\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.connect = function(source, target, attrs, hints) {\n  return this.createConnection(source, target, attrs || {}, source.parent, hints);\n};\n\nModeling.prototype._create = function(type, attrs) {\n  if (isModelElement(attrs)) {\n    return attrs;\n  } else {\n    return this._elementFactory.create(type, attrs);\n  }\n};\n\n/**\n * Collapse or expand a shape.\n *\n * @param {X} shape\n * @param {ModelingHints} [hints]\n */\nModeling.prototype.toggleCollapse = function(shape, hints) {\n  var context = {\n    shape: shape,\n    hints: hints || {}\n  };\n\n  this._commandStack.execute('shape.toggleCollapse', context);\n};\n", "import {\n  reduce,\n  keys,\n  forEach\n} from 'min-dash';\n\nimport {\n  is,\n  getBusinessObject\n} from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Shape} Shape\n * @typedef {import('../../../model/Types').ModdleElement} ModdleElement\n */\n\n/**\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n */\nexport default function UpdateModdlePropertiesHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\n\nUpdateModdlePropertiesHandler.$inject = [ 'elementRegistry' ];\n\nUpdateModdlePropertiesHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      moddleElement = context.moddleElement,\n      properties = context.properties;\n\n  if (!moddleElement) {\n    throw new Error('<moddleElement> required');\n  }\n\n  // TODO(nikku): we need to ensure that ID properties\n  // are properly registered / unregistered via\n  // this._moddle.ids.assigned(id)\n  var changed = context.changed || this._getVisualReferences(moddleElement).concat(element);\n  var oldProperties = context.oldProperties || getModdleProperties(moddleElement, keys(properties));\n\n  setModdleProperties(moddleElement, properties);\n\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  return changed;\n};\n\nUpdateModdlePropertiesHandler.prototype.revert = function(context) {\n  var oldProperties = context.oldProperties,\n      moddleElement = context.moddleElement,\n      changed = context.changed;\n\n  setModdleProperties(moddleElement, oldProperties);\n\n  return changed;\n};\n\n/**\n * Return visual references of given moddle element within the diagram.\n *\n * @param {ModdleElement} moddleElement\n *\n * @return {Shape[]}\n */\nUpdateModdlePropertiesHandler.prototype._getVisualReferences = function(moddleElement) {\n\n  var elementRegistry = this._elementRegistry;\n\n  if (is(moddleElement, 'bpmn:DataObject')) {\n    return getAllDataObjectReferences(moddleElement, elementRegistry);\n  }\n\n  return [];\n};\n\n\n// helpers /////////////////\n\nfunction getModdleProperties(moddleElement, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = moddleElement.get(key);\n    return result;\n  }, {});\n}\n\nfunction setModdleProperties(moddleElement, properties) {\n  forEach(properties, function(value, key) {\n    moddleElement.set(key, value);\n  });\n}\n\nfunction getAllDataObjectReferences(dataObject, elementRegistry) {\n  return elementRegistry.filter(function(element) {\n    return (\n      is(element, 'bpmn:DataObjectReference') &&\n          getBusinessObject(element).dataObjectRef === dataObject\n    );\n  });\n}\n", "import {\n  reduce,\n  keys,\n  forEach,\n  assign\n} from 'min-dash';\n\nimport {\n  getBusinessObject,\n  getDi\n} from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n * @typedef {import('diagram-js/lib/command/CommandStack').CommandContext} CommandContext\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n * @typedef {import('../../../model/Types').Moddle} Moddle\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../../../draw/TextRenderer').default} TextRenderer\n *\n * @typedef {import('../../../model/Types').Element} Element\n */\n\nvar DEFAULT_FLOW = 'default',\n    ID = 'id',\n    DI = 'di';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * A handler that implements a BPMN 2.0 property update.\n *\n * This should be used to set simple properties on elements with\n * an underlying BPMN business object.\n *\n * Use respective diagram-js provided handlers if you would\n * like to perform automated modeling.\n *\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n * @param {Moddle} moddle\n * @param {Modeling} modeling\n * @param {TextRenderer} textRenderer\n */\nexport default function UpdatePropertiesHandler(\n    elementRegistry, moddle,\n    modeling, textRenderer) {\n\n  this._elementRegistry = elementRegistry;\n  this._moddle = moddle;\n  this._modeling = modeling;\n  this._textRenderer = textRenderer;\n}\n\nUpdatePropertiesHandler.$inject = [\n  'elementRegistry',\n  'moddle',\n  'modeling',\n  'textRenderer'\n];\n\n\n// api //////////////////////\n\n/**\n * Update a BPMN element's properties.\n *\n * @param { {\n *   element: Element;\n *   properties: Record<string, any>;\n * } & CommandContext } context\n *\n * @return {Element[]}\n */\nUpdatePropertiesHandler.prototype.execute = function(context) {\n\n  var element = context.element,\n      changed = [ element ];\n\n  if (!element) {\n    throw new Error('element required');\n  }\n\n  var elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  var businessObject = element.businessObject,\n      properties = unwrapBusinessObjects(context.properties),\n      oldProperties = context.oldProperties || getProperties(element, properties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(businessObject[ID]);\n\n    elementRegistry.updateId(element, properties[ID]);\n\n    ids.claim(properties[ID], businessObject);\n  }\n\n  // correctly indicate visual changes on default flow updates\n  if (DEFAULT_FLOW in properties) {\n\n    if (properties[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(properties[DEFAULT_FLOW].id));\n    }\n\n    if (businessObject[DEFAULT_FLOW]) {\n      changed.push(elementRegistry.get(businessObject[DEFAULT_FLOW].id));\n    }\n  }\n\n  // update properties\n  setProperties(element, properties);\n\n  // store old values\n  context.oldProperties = oldProperties;\n  context.changed = changed;\n\n  // indicate changed on objects affected by the update\n  return changed;\n};\n\n\nUpdatePropertiesHandler.prototype.postExecute = function(context) {\n  var element = context.element,\n      label = element.label;\n\n  var text = label && getBusinessObject(label).name;\n\n  if (!text) {\n    return;\n  }\n\n  // get layouted text bounds and resize external\n  // external label accordingly\n  var newLabelBounds = this._textRenderer.getExternalLabelBounds(label, text);\n\n  this._modeling.resizeShape(label, newLabelBounds, NULL_DIMENSIONS);\n};\n\n/**\n * Revert updating a BPMN element's properties.\n *\n * @param { {\n *   element: Element;\n *   properties: Record<string, any>;\n *   oldProperties: Record<string, any>;\n * } & CommandContext } context\n *\n * @return {Element[]}\n */\nUpdatePropertiesHandler.prototype.revert = function(context) {\n\n  var element = context.element,\n      properties = context.properties,\n      oldProperties = context.oldProperties,\n      businessObject = element.businessObject,\n      elementRegistry = this._elementRegistry,\n      ids = this._moddle.ids;\n\n  // update properties\n  setProperties(element, oldProperties);\n\n  if (isIdChange(properties, businessObject)) {\n    ids.unclaim(properties[ID]);\n\n    elementRegistry.updateId(element, oldProperties[ID]);\n\n    ids.claim(oldProperties[ID], businessObject);\n  }\n\n  return context.changed;\n};\n\n\nfunction isIdChange(properties, businessObject) {\n  return ID in properties && properties[ID] !== businessObject[ID];\n}\n\n\nfunction getProperties(element, properties) {\n  var propertyNames = keys(properties),\n      businessObject = element.businessObject,\n      di = getDi(element);\n\n  return reduce(propertyNames, function(result, key) {\n\n    // handle DI separately\n    if (key !== DI) {\n      result[key] = businessObject.get(key);\n\n    } else {\n      result[key] = getDiProperties(di, keys(properties.di));\n    }\n\n    return result;\n  }, {});\n}\n\n\nfunction getDiProperties(di, propertyNames) {\n  return reduce(propertyNames, function(result, key) {\n    result[key] = di && di.get(key);\n\n    return result;\n  }, {});\n}\n\n\nfunction setProperties(element, properties) {\n  var businessObject = element.businessObject,\n      di = getDi(element);\n\n  forEach(properties, function(value, key) {\n\n    if (key !== DI) {\n      businessObject.set(key, value);\n    } else {\n\n      // only update, if di exists\n      if (di) {\n        setDiProperties(di, value);\n      }\n    }\n  });\n}\n\n\nfunction setDiProperties(di, properties) {\n  forEach(properties, function(value, key) {\n    di.set(key, value);\n  });\n}\n\n\nvar referencePropertyNames = [ 'default' ];\n\n/**\n * Make sure we unwrap the actual business object behind diagram element that\n * may have been passed as arguments.\n *\n * @param  {Record<string, any>} properties\n *\n * @return {Record<string, any>} unwrappedProps\n */\nfunction unwrapBusinessObjects(properties) {\n\n  var unwrappedProps = assign({}, properties);\n\n  referencePropertyNames.forEach(function(name) {\n    if (name in properties) {\n      unwrappedProps[name] = getBusinessObject(unwrappedProps[name]);\n    }\n  });\n\n  return unwrappedProps;\n}", "import {\n  add as collectionAdd,\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\nimport { getDi } from '../../../util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/Canvas').default} Canvas\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * @implements {CommandHandler}\n *\n * @param {Canvas} canvas\n * @param {Modeling} modeling\n */\nexport default function UpdateCanvasRootHandler(canvas, modeling) {\n  this._canvas = canvas;\n  this._modeling = modeling;\n}\n\nUpdateCanvasRootHandler.$inject = [\n  'canvas',\n  'modeling'\n];\n\n\nUpdateCanvasRootHandler.prototype.execute = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = canvas.getRootElement(),\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = oldRootBusinessObject.$parent,\n      diPlane = getDi(oldRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(newRoot);\n  canvas.removeRootElement(oldRoot);\n\n  // (2) update root elements\n  collectionAdd(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = bpmnDefinitions;\n\n  collectionRemove(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = null;\n\n  // (3) wire di\n  oldRoot.di = null;\n\n  diPlane.bpmnElement = newRootBusinessObject;\n  newRoot.di = diPlane;\n\n  context.oldRoot = oldRoot;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n  return [];\n};\n\n\nUpdateCanvasRootHandler.prototype.revert = function(context) {\n\n  var canvas = this._canvas;\n\n  var newRoot = context.newRoot,\n      newRootBusinessObject = newRoot.businessObject,\n      oldRoot = context.oldRoot,\n      oldRootBusinessObject = oldRoot.businessObject,\n      bpmnDefinitions = newRootBusinessObject.$parent,\n      diPlane = getDi(newRoot);\n\n  // (1) replace process old <> new root\n  canvas.setRootElement(oldRoot);\n  canvas.removeRootElement(newRoot);\n\n  // (2) update root elements\n  collectionRemove(bpmnDefinitions.rootElements, newRootBusinessObject);\n  newRootBusinessObject.$parent = null;\n\n  collectionAdd(bpmnDefinitions.rootElements, oldRootBusinessObject);\n  oldRootBusinessObject.$parent = bpmnDefinitions;\n\n  // (3) wire di\n  newRoot.di = null;\n\n  diPlane.bpmnElement = oldRootBusinessObject;\n  oldRoot.di = diPlane;\n\n  // TODO(nikku): return changed elements?\n  // return [ newRoot, oldRoot ];\n\n  return [];\n};", "import {\n  filter,\n  isNumber\n} from 'min-dash';\n\nvar max = Math.max,\n    min = Math.min;\n\nvar DEFAULT_CHILD_BOX_PADDING = 20;\n\nimport {\n  getBBox\n} from '../../util/Elements';\n\nimport {\n  asTRBL,\n  asBounds\n} from '../../layout/LayoutUtil';\n\n/**\n * @typedef {import('../../core/Types').ElementLike} Element\n * @typedef {import('../../core/Types').ShapeLike} Shape\n *\n * @typedef {import('../../util/Types').Direction} Direction\n * @typedef {import('../../util/Types').Point} Point\n * @typedef {import('../../util/Types').Rect} Rect\n * @typedef {import('../../util/Types').RectTRBL} RectTRBL\n */\n\n/**\n * Substract a TRBL from another\n *\n * @param {RectTRBL} trblA\n * @param {RectTRBL} trblB\n *\n * @return {RectTRBL}\n */\nexport function substractTRBL(trblA, trblB) {\n  return {\n    top: trblA.top - trblB.top,\n    right: trblA.right - trblB.right,\n    bottom: trblA.bottom - trblB.bottom,\n    left: trblA.left - trblB.left\n  };\n}\n\n/**\n * Resize the given bounds by the specified delta from a given anchor point.\n *\n * @param {Rect} bounds the bounding box that should be resized\n * @param {Direction} direction in which the element is resized (nw, ne, se, sw)\n * @param {Point} delta of the resize operation\n *\n * @return {Rect} resized bounding box\n */\nexport function resizeBounds(bounds, direction, delta) {\n  var dx = delta.x,\n      dy = delta.y;\n\n  var newBounds = {\n    x: bounds.x,\n    y: bounds.y,\n    width: bounds.width,\n    height: bounds.height\n  };\n\n  if (direction.indexOf('n') !== -1) {\n    newBounds.y = bounds.y + dy;\n    newBounds.height = bounds.height - dy;\n  } else if (direction.indexOf('s') !== -1) {\n    newBounds.height = bounds.height + dy;\n  }\n\n  if (direction.indexOf('e') !== -1) {\n    newBounds.width = bounds.width + dx;\n  } else if (direction.indexOf('w') !== -1) {\n    newBounds.x = bounds.x + dx;\n    newBounds.width = bounds.width - dx;\n  }\n\n  return newBounds;\n}\n\n\n/**\n * Resize the given bounds by applying the passed\n * { top, right, bottom, left } delta.\n *\n * @param {Rect} bounds\n * @param {RectTRBL} resize\n *\n * @return {Rect}\n */\nexport function resizeTRBL(bounds, resize) {\n  return {\n    x: bounds.x + (resize.left || 0),\n    y: bounds.y + (resize.top || 0),\n    width: bounds.width - (resize.left || 0) + (resize.right || 0),\n    height: bounds.height - (resize.top || 0) + (resize.bottom || 0)\n  };\n}\n\n\nexport function reattachPoint(bounds, newBounds, point) {\n\n  var sx = bounds.width / newBounds.width,\n      sy = bounds.height / newBounds.height;\n\n  return {\n    x: Math.round((newBounds.x + newBounds.width / 2)) - Math.floor(((bounds.x + bounds.width / 2) - point.x) / sx),\n    y: Math.round((newBounds.y + newBounds.height / 2)) - Math.floor(((bounds.y + bounds.height / 2) - point.y) / sy)\n  };\n}\n\n\nfunction applyConstraints(attr, trbl, resizeConstraints) {\n\n  var value = trbl[attr],\n      minValue = resizeConstraints.min && resizeConstraints.min[attr],\n      maxValue = resizeConstraints.max && resizeConstraints.max[attr];\n\n  if (isNumber(minValue)) {\n    value = (/top|left/.test(attr) ? min : max)(value, minValue);\n  }\n\n  if (isNumber(maxValue)) {\n    value = (/top|left/.test(attr) ? max : min)(value, maxValue);\n  }\n\n  return value;\n}\n\nexport function ensureConstraints(currentBounds, resizeConstraints) {\n\n  if (!resizeConstraints) {\n    return currentBounds;\n  }\n\n  var currentTrbl = asTRBL(currentBounds);\n\n  return asBounds({\n    top: applyConstraints('top', currentTrbl, resizeConstraints),\n    right: applyConstraints('right', currentTrbl, resizeConstraints),\n    bottom: applyConstraints('bottom', currentTrbl, resizeConstraints),\n    left: applyConstraints('left', currentTrbl, resizeConstraints)\n  });\n}\n\n\nexport function getMinResizeBounds(direction, currentBounds, minDimensions, childrenBounds) {\n\n  var currentBox = asTRBL(currentBounds);\n\n  var minBox = {\n    top: /n/.test(direction) ? currentBox.bottom - minDimensions.height : currentBox.top,\n    left: /w/.test(direction) ? currentBox.right - minDimensions.width : currentBox.left,\n    bottom: /s/.test(direction) ? currentBox.top + minDimensions.height : currentBox.bottom,\n    right: /e/.test(direction) ? currentBox.left + minDimensions.width : currentBox.right\n  };\n\n  var childrenBox = childrenBounds ? asTRBL(childrenBounds) : minBox;\n\n  var combinedBox = {\n    top: min(minBox.top, childrenBox.top),\n    left: min(minBox.left, childrenBox.left),\n    bottom: max(minBox.bottom, childrenBox.bottom),\n    right: max(minBox.right, childrenBox.right)\n  };\n\n  return asBounds(combinedBox);\n}\n\nfunction asPadding(mayBePadding, defaultValue) {\n  if (typeof mayBePadding !== 'undefined') {\n    return mayBePadding;\n  } else {\n    return DEFAULT_CHILD_BOX_PADDING;\n  }\n}\n\nexport function addPadding(bbox, padding) {\n  var left, right, top, bottom;\n\n  if (typeof padding === 'object') {\n    left = asPadding(padding.left);\n    right = asPadding(padding.right);\n    top = asPadding(padding.top);\n    bottom = asPadding(padding.bottom);\n  } else {\n    left = right = top = bottom = asPadding(padding);\n  }\n\n  return {\n    x: bbox.x - left,\n    y: bbox.y - top,\n    width: bbox.width + left + right,\n    height: bbox.height + top + bottom\n  };\n}\n\n\n/**\n * Is the given element part of the resize\n * targets min boundary box?\n *\n * This is the default implementation which excludes\n * connections and labels.\n *\n * @param {Element} element\n */\nfunction isBBoxChild(element) {\n\n  // exclude connections\n  if (element.waypoints) {\n    return false;\n  }\n\n  // exclude labels\n  if (element.type === 'label') {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Return children bounding computed from a shapes children\n * or a list of prefiltered children.\n *\n * @param {Shape|Shape[]} shapeOrChildren\n * @param {RectTRBL|number} padding\n *\n * @return {Rect}\n */\nexport function computeChildrenBBox(shapeOrChildren, padding) {\n\n  var elements;\n\n  // compute based on shape\n  if (shapeOrChildren.length === undefined) {\n\n    // grab all the children that are part of the\n    // parents children box\n    elements = filter(shapeOrChildren.children, isBBoxChild);\n\n  } else {\n    elements = shapeOrChildren;\n  }\n\n  if (elements.length) {\n    return addPadding(getBBox(elements), padding);\n  }\n}\n", "import { is } from '../../../util/ModelUtil';\n\nimport {\n  getParent\n} from './ModelingUtil';\n\nimport {\n  isHorizontal\n} from '../../../util/DiUtil';\n\nimport {\n  asTRBL\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport {\n  substractTRBL,\n  resizeTRBL\n} from 'diagram-js/lib/features/resize/ResizeUtil';\n\n/**\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n */\n\nvar abs = Math.abs;\n\n\nfunction getTRBLResize(oldBounds, newBounds) {\n  return substractTRBL(asTRBL(newBounds), asTRBL(oldBounds));\n}\n\n\nvar LANE_PARENTS = [\n  'bpmn:Participant',\n  'bpmn:Process',\n  'bpmn:SubProcess'\n];\n\nexport var LANE_INDENTATION = 30;\n\n\n/**\n * Return all lanes that are children of the given shape.\n *\n * @param  {Shape} shape\n * @param  {Shape[]} [collectedShapes]\n *\n * @return {Shape[]}\n */\nexport function collectLanes(shape, collectedShapes) {\n\n  collectedShapes = collectedShapes || [];\n\n  shape.children.filter(function(s) {\n    if (is(s, 'bpmn:Lane')) {\n      collectLanes(s, collectedShapes);\n\n      collectedShapes.push(s);\n    }\n  });\n\n  return collectedShapes;\n}\n\n\n/**\n * Return all lanes that are direct children of the given shape.\n *\n * @param {Shape} shape\n *\n * @return {Shape[]}\n */\nexport function getChildLanes(shape) {\n  return shape.children.filter(function(c) {\n    return is(c, 'bpmn:Lane');\n  });\n}\n\n\n/**\n * Return the parent shape of the given lane.\n *\n * @param {Shape} shape\n *\n * @return {Shape}\n */\nexport function getLanesRoot(shape) {\n  return getParent(shape, LANE_PARENTS) || shape;\n}\n\n\n/**\n * Compute the required resize operations for lanes\n * adjacent to the given shape, assuming it will be\n * resized to the given new bounds.\n *\n * @param {Shape} shape\n * @param {Rect} newBounds\n *\n * @return { {\n *   shape: Shape;\n *   newBounds: Rect;\n * }[] }\n */\nexport function computeLanesResize(shape, newBounds) {\n\n  var rootElement = getLanesRoot(shape);\n\n  var initialShapes = is(rootElement, 'bpmn:Process') ? [] : [ rootElement ];\n\n  var allLanes = collectLanes(rootElement, initialShapes),\n      shapeTrbl = asTRBL(shape),\n      shapeNewTrbl = asTRBL(newBounds),\n      trblResize = getTRBLResize(shape, newBounds),\n      resizeNeeded = [];\n\n  var isHorizontalLane = isHorizontal(shape);\n\n  allLanes.forEach(function(other) {\n\n    if (other === shape) {\n      return;\n    }\n\n    var topResize = isHorizontalLane ? 0 : trblResize.top,\n        rightResize = isHorizontalLane ? trblResize.right : 0,\n        bottomResize = isHorizontalLane ? 0 : trblResize.bottom,\n        leftResize = isHorizontalLane ? trblResize.left : 0;\n\n    var otherTrbl = asTRBL(other);\n\n    if (trblResize.top) {\n      if (abs(otherTrbl.bottom - shapeTrbl.top) < 10) {\n        bottomResize = shapeNewTrbl.top - otherTrbl.bottom;\n      }\n\n      if (abs(otherTrbl.top - shapeTrbl.top) < 5) {\n        topResize = shapeNewTrbl.top - otherTrbl.top;\n      }\n    }\n\n    if (trblResize.left) {\n      if (abs(otherTrbl.right - shapeTrbl.left) < 10) {\n        rightResize = shapeNewTrbl.left - otherTrbl.right;\n      }\n\n      if (abs(otherTrbl.left - shapeTrbl.left) < 5) {\n        leftResize = shapeNewTrbl.left - otherTrbl.left;\n      }\n    }\n\n    if (trblResize.bottom) {\n      if (abs(otherTrbl.top - shapeTrbl.bottom) < 10) {\n        topResize = shapeNewTrbl.bottom - otherTrbl.top;\n      }\n\n      if (abs(otherTrbl.bottom - shapeTrbl.bottom) < 5) {\n        bottomResize = shapeNewTrbl.bottom - otherTrbl.bottom;\n      }\n    }\n\n    if (trblResize.right) {\n      if (abs(otherTrbl.left - shapeTrbl.right) < 10) {\n        leftResize = shapeNewTrbl.right - otherTrbl.left;\n      }\n\n      if (abs(otherTrbl.right - shapeTrbl.right) < 5) {\n        rightResize = shapeNewTrbl.right - otherTrbl.right;\n      }\n    }\n\n    if (topResize || rightResize || bottomResize || leftResize) {\n\n      resizeNeeded.push({\n        shape: other,\n        newBounds: resizeTRBL(other, {\n          top: topResize,\n          right: rightResize,\n          bottom: bottomResize,\n          left: leftResize\n        })\n      });\n    }\n\n  });\n\n  return resizeNeeded;\n}", "import {\n  filter\n} from 'min-dash';\n\nimport {\n  eachElement\n} from 'diagram-js/lib/util/Elements';\n\nimport {\n  getLanesRoot,\n  getChildLanes,\n  LANE_INDENTATION\n} from '../util/LaneUtil';\n\nimport {\n  isHorizontal\n} from '../../../util/DiUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool\n */\n\n/**\n * A handler that allows us to add a new lane\n * above or below an existing one.\n *\n * @implements {CommandHandler}\n *\n * @param {Modeling} modeling\n * @param {SpaceTool} spaceTool\n */\nexport default function AddLaneHandler(modeling, spaceTool) {\n  this._modeling = modeling;\n  this._spaceTool = spaceTool;\n}\n\nAddLaneHandler.$inject = [\n  'modeling',\n  'spaceTool'\n];\n\n\nAddLaneHandler.prototype.preExecute = function(context) {\n\n  var spaceTool = this._spaceTool,\n      modeling = this._modeling;\n\n  var shape = context.shape,\n      location = context.location;\n\n  var lanesRoot = getLanesRoot(shape);\n\n  var isRoot = lanesRoot === shape,\n      laneParent = isRoot ? shape : shape.parent;\n\n  var existingChildLanes = getChildLanes(laneParent);\n\n  var isHorizontalLane = isHorizontal(shape);\n\n  // never mix up horizontal/vertical lanes\n  if (isHorizontalLane) {\n    if (location === 'left') {\n      location = 'top';\n    } else\n    if (location === 'right') {\n      location = 'bottom';\n    }\n  } else {\n    if (location === 'top') {\n      location = 'left';\n    } else\n    if (location === 'bottom') {\n      location = 'right';\n    }\n  }\n\n  // (0) add a lane if we currently got none and are adding to root\n  if (!existingChildLanes.length) {\n    var siblingPosition = isHorizontalLane ? {\n      x: shape.x + LANE_INDENTATION,\n      y: shape.y,\n      width: shape.width - LANE_INDENTATION,\n      height: shape.height\n    } : {\n      x: shape.x,\n      y: shape.y + LANE_INDENTATION,\n      width: shape.width,\n      height: shape.height - LANE_INDENTATION\n    };\n\n    modeling.createShape(\n      {\n        type: 'bpmn:Lane',\n        isHorizontal: isHorizontalLane\n      },\n      siblingPosition,\n      laneParent\n    );\n  }\n\n  // (1) collect affected elements to create necessary space\n  var allAffected = [];\n\n  eachElement(lanesRoot, function(element) {\n    allAffected.push(element);\n\n    // handle element labels in the diagram root\n    if (element.label) {\n      allAffected.push(element.label);\n    }\n\n    if (element === shape) {\n      return [];\n    }\n\n    return filter(element.children, function(c) {\n      return c !== shape;\n    });\n  });\n\n  var offset,\n      lanePosition,\n      spacePos,\n      direction,\n      axis;\n\n  if (location === 'top') {\n    offset = -120;\n    lanePosition = shape.y;\n    spacePos = lanePosition + 10;\n    direction = 'n';\n    axis = 'y';\n  } else\n  if (location === 'left') {\n    offset = -120;\n    lanePosition = shape.x;\n    spacePos = lanePosition + 10;\n    direction = 'w';\n    axis = 'x';\n  } else\n  if (location === 'bottom') {\n    offset = 120;\n    lanePosition = shape.y + shape.height;\n    spacePos = lanePosition - 10;\n    direction = 's';\n    axis = 'y';\n  } else\n  if (location === 'right') {\n    offset = 120;\n    lanePosition = shape.x + shape.width;\n    spacePos = lanePosition - 10;\n    direction = 'e';\n    axis = 'x';\n  }\n\n  var adjustments = spaceTool.calculateAdjustments(allAffected, axis, offset, spacePos);\n\n  var delta = isHorizontalLane ? { x: 0, y: offset } : { x: offset, y: 0 };\n\n  spaceTool.makeSpace(\n    adjustments.movingShapes,\n    adjustments.resizingShapes,\n    delta,\n    direction,\n    spacePos\n  );\n\n  // (2) create new lane at open space\n  var newLanePosition = isHorizontalLane ? {\n    x: shape.x + (isRoot ? LANE_INDENTATION : 0),\n    y: lanePosition - (location === 'top' ? 120 : 0),\n    width: shape.width - (isRoot ? LANE_INDENTATION : 0),\n    height: 120\n  } : {\n    x: lanePosition - (location === 'left' ? 120 : 0),\n    y: shape.y + (isRoot ? LANE_INDENTATION : 0),\n    width: 120,\n    height: shape.height - (isRoot ? LANE_INDENTATION : 0)\n  };\n\n  context.newLane = modeling.createShape(\n    {\n      type: 'bpmn:Lane',\n      isHorizontal: isHorizontalLane\n    },\n    newLanePosition,\n    laneParent\n  );\n};\n", "import {\n  getChildLanes,\n  LANE_INDENTATION\n} from '../util/LaneUtil';\n\nimport {\n  isHorizontal\n} from '../../../util/DiUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('../Modeling').default} Modeling\n */\n\n/**\n * A handler that splits a lane into a number of sub-lanes,\n * creating new sub lanes, if necessary.\n *\n * @implements {CommandHandler}\n *\n * @param {Modeling} modeling\n */\nexport default function SplitLaneHandler(modeling) {\n  this._modeling = modeling;\n}\n\nSplitLaneHandler.$inject = [\n  'modeling'\n];\n\n\nSplitLaneHandler.prototype.preExecute = function(context) {\n\n  var modeling = this._modeling;\n\n  var shape = context.shape,\n      newLanesCount = context.count;\n\n  var childLanes = getChildLanes(shape),\n      existingLanesCount = childLanes.length;\n\n  if (existingLanesCount > newLanesCount) {\n    throw new Error(`more than <${ newLanesCount }> child lanes`);\n  }\n\n  var isHorizontalLane = isHorizontal(shape);\n\n  var laneBaseSize = isHorizontalLane ? shape.height : shape.width;\n  var newLanesSize = Math.round(laneBaseSize / newLanesCount);\n\n  // Iterate from first to last in child lane order,\n  // resizing existing lanes and creating new ones\n  // so that they split the parent proportionally.\n  //\n  // Due to rounding related errors, the last lane\n  // needs to take up all the remaining space.\n  var laneSize,\n      laneBounds,\n      newLaneAttrs,\n      idx;\n\n  for (idx = 0; idx < newLanesCount; idx++) {\n\n    // if last lane\n    if (idx === newLanesCount - 1) {\n      laneSize = laneBaseSize - (newLanesSize * idx);\n    } else {\n      laneSize = newLanesSize;\n    }\n\n    laneBounds = isHorizontalLane ? {\n      x: shape.x + LANE_INDENTATION,\n      y: shape.y + idx * newLanesSize,\n      width: shape.width - LANE_INDENTATION,\n      height: laneSize\n    } : {\n      x: shape.x + idx * newLanesSize,\n      y: shape.y + LANE_INDENTATION,\n      width: laneSize,\n      height: shape.height - LANE_INDENTATION\n    };\n\n    if (idx < existingLanesCount) {\n\n      // resize existing lane\n      modeling.resizeShape(childLanes[idx], laneBounds);\n    } else {\n\n      // create a new lane at position\n      newLaneAttrs = {\n        type: 'bpmn:Lane',\n        isHorizontal: isHorizontalLane\n      };\n\n      modeling.createShape(newLaneAttrs, laneBounds, shape);\n    }\n  }\n};\n", "import { is } from '../../../util/ModelUtil';\n\nimport {\n  getLanesRoot,\n  computeLanesResize\n} from '../util/LaneUtil';\n\nimport {\n  eachElement\n} from 'diagram-js/lib/util/Elements';\n\nimport {\n  asTRBL\n} from 'diagram-js/lib/layout/LayoutUtil';\n\nimport {\n  substractTRBL\n} from 'diagram-js/lib/features/resize/ResizeUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('../Modeling').default} Modeling\n * @typedef {import('../../space-tool/BpmnSpaceTool').default} SpaceTool\n *\n * @typedef {import('../../../model/Types').Shape} Shape\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n */\n\n/**\n * A handler that resizes a lane.\n *\n * @implements {CommandHandler}\n *\n * @param {Modeling} modeling\n * @param {SpaceTool} spaceTool\n */\nexport default function ResizeLaneHandler(modeling, spaceTool) {\n  this._modeling = modeling;\n  this._spaceTool = spaceTool;\n}\n\nResizeLaneHandler.$inject = [\n  'modeling',\n  'spaceTool'\n];\n\n\nResizeLaneHandler.prototype.preExecute = function(context) {\n\n  var shape = context.shape,\n      newBounds = context.newBounds,\n      balanced = context.balanced;\n\n  if (balanced !== false) {\n    this.resizeBalanced(shape, newBounds);\n  } else {\n    this.resizeSpace(shape, newBounds);\n  }\n};\n\n\n/**\n * Resize balanced, adjusting next / previous lane sizes.\n *\n * @param {Shape} shape\n * @param {Rect} newBounds\n */\nResizeLaneHandler.prototype.resizeBalanced = function(shape, newBounds) {\n\n  var modeling = this._modeling;\n\n  var resizeNeeded = computeLanesResize(shape, newBounds);\n\n  // resize the lane\n  modeling.resizeShape(shape, newBounds);\n\n  // resize other lanes as needed\n  resizeNeeded.forEach(function(r) {\n    modeling.resizeShape(r.shape, r.newBounds);\n  });\n};\n\n\n/**\n * Resize, making actual space and moving below / above elements.\n *\n * @param {Shape} shape\n * @param {Rect} newBounds\n */\nResizeLaneHandler.prototype.resizeSpace = function(shape, newBounds) {\n  var spaceTool = this._spaceTool;\n\n  var shapeTrbl = asTRBL(shape),\n      newTrbl = asTRBL(newBounds);\n\n  var trblDiff = substractTRBL(newTrbl, shapeTrbl);\n\n  var lanesRoot = getLanesRoot(shape);\n\n  var allAffected = [],\n      allLanes = [];\n\n  eachElement(lanesRoot, function(element) {\n    allAffected.push(element);\n\n    if (is(element, 'bpmn:Lane') || is(element, 'bpmn:Participant')) {\n      allLanes.push(element);\n    }\n\n    return element.children;\n  });\n\n  var change,\n      spacePos,\n      direction,\n      offset,\n      adjustments;\n\n  if (trblDiff.bottom || trblDiff.top) {\n\n    change = trblDiff.bottom || trblDiff.top;\n    spacePos = shape.y + (trblDiff.bottom ? shape.height : 0) + (trblDiff.bottom ? -10 : 10);\n    direction = trblDiff.bottom ? 's' : 'n';\n\n    offset = trblDiff.top > 0 || trblDiff.bottom < 0 ? -change : change;\n\n    adjustments = spaceTool.calculateAdjustments(allAffected, 'y', offset, spacePos);\n\n    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: 0, y: change }, direction);\n  }\n\n\n  if (trblDiff.left || trblDiff.right) {\n\n    change = trblDiff.right || trblDiff.left;\n    spacePos = shape.x + (trblDiff.right ? shape.width : 0) + (trblDiff.right ? -10 : 100);\n    direction = trblDiff.right ? 'e' : 'w';\n\n    offset = trblDiff.left > 0 || trblDiff.right < 0 ? -change : change;\n\n    adjustments = spaceTool.calculateAdjustments(allLanes, 'x', offset, spacePos);\n\n    spaceTool.makeSpace(adjustments.movingShapes, adjustments.resizingShapes, { x: change, y: 0 }, direction);\n  }\n};", "import {\n  collectLanes,\n  getLanesRoot\n} from '../util/LaneUtil';\n\nimport {\n  is\n} from '../../../util/ModelUtil';\n\nimport {\n  add as collectionAdd,\n  remove as collectionRemove\n} from 'diagram-js/lib/util/Collections';\n\nimport {\n  asTRBL\n} from 'diagram-js/lib/layout/LayoutUtil';\n\n/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('diagram-js/lib/core/ElementRegistry').default} ElementRegistry\n *\n * @typedef {import('../../../model/Types').Shape} Shape\n */\n\nvar FLOW_NODE_REFS_ATTR = 'flowNodeRef',\n    LANES_ATTR = 'lanes';\n\n\n/**\n * A handler that updates lane refs on changed elements.\n *\n * @implements {CommandHandler}\n *\n * @param {ElementRegistry} elementRegistry\n */\nexport default function UpdateFlowNodeRefsHandler(elementRegistry) {\n  this._elementRegistry = elementRegistry;\n}\n\nUpdateFlowNodeRefsHandler.$inject = [\n  'elementRegistry'\n];\n\n/**\n * @param {Shape} flowNodeShapes\n * @param {Shape} laneShapes\n *\n * @return { {\n *   flowNode: Shape;\n *   add: Shape[];\n *   remove: Shape[];\n * }[] }\n */\nUpdateFlowNodeRefsHandler.prototype._computeUpdates = function(flowNodeShapes, laneShapes) {\n\n  var handledNodes = [];\n\n  var updates = [];\n\n  var participantCache = {};\n\n  var allFlowNodeShapes = [];\n\n  function isInLaneShape(element, laneShape) {\n\n    var laneTrbl = asTRBL(laneShape);\n\n    var elementMid = {\n      x: element.x + element.width / 2,\n      y: element.y + element.height / 2\n    };\n\n    return elementMid.x > laneTrbl.left &&\n           elementMid.x < laneTrbl.right &&\n           elementMid.y > laneTrbl.top &&\n           elementMid.y < laneTrbl.bottom;\n  }\n\n  function addFlowNodeShape(flowNodeShape) {\n    if (handledNodes.indexOf(flowNodeShape) === -1) {\n      allFlowNodeShapes.push(flowNodeShape);\n      handledNodes.push(flowNodeShape);\n    }\n  }\n\n  function getAllLaneShapes(flowNodeShape) {\n\n    var root = getLanesRoot(flowNodeShape);\n\n    if (!participantCache[root.id]) {\n      participantCache[root.id] = collectLanes(root);\n    }\n\n    return participantCache[root.id];\n  }\n\n  function getNewLanes(flowNodeShape) {\n    if (!flowNodeShape.parent) {\n      return [];\n    }\n\n    var allLaneShapes = getAllLaneShapes(flowNodeShape);\n\n    return allLaneShapes.filter(function(l) {\n      return isInLaneShape(flowNodeShape, l);\n    }).map(function(shape) {\n      return shape.businessObject;\n    });\n  }\n\n  laneShapes.forEach(function(laneShape) {\n    var root = getLanesRoot(laneShape);\n\n    if (!root || handledNodes.indexOf(root) !== -1) {\n      return;\n    }\n\n    var children = root.children.filter(function(c) {\n      return is(c, 'bpmn:FlowNode');\n    });\n\n    children.forEach(addFlowNodeShape);\n\n    handledNodes.push(root);\n  });\n\n  flowNodeShapes.forEach(addFlowNodeShape);\n\n\n  allFlowNodeShapes.forEach(function(flowNodeShape) {\n\n    var flowNode = flowNodeShape.businessObject;\n\n    var lanes = flowNode.get(LANES_ATTR),\n        remove = lanes.slice(),\n        add = getNewLanes(flowNodeShape);\n\n    updates.push({ flowNode: flowNode, remove: remove, add: add });\n  });\n\n  laneShapes.forEach(function(laneShape) {\n\n    var lane = laneShape.businessObject;\n\n    // lane got removed XX-)\n    if (!laneShape.parent) {\n      lane.get(FLOW_NODE_REFS_ATTR).forEach(function(flowNode) {\n        updates.push({ flowNode: flowNode, remove: [ lane ], add: [] });\n      });\n    }\n  });\n\n  return updates;\n};\n\nUpdateFlowNodeRefsHandler.prototype.execute = function(context) {\n\n  var updates = context.updates;\n\n  if (!updates) {\n    updates = context.updates = this._computeUpdates(context.flowNodeShapes, context.laneShapes);\n  }\n\n\n  updates.forEach(function(update) {\n\n    var flowNode = update.flowNode,\n        lanes = flowNode.get(LANES_ATTR);\n\n    // unwire old\n    update.remove.forEach(function(oldLane) {\n      collectionRemove(lanes, oldLane);\n      collectionRemove(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n\n    // wire new\n    update.add.forEach(function(newLane) {\n      collectionAdd(lanes, newLane);\n      collectionAdd(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n  });\n\n  // TODO(nikku): return changed elements\n  // return [ ... ];\n\n  return [];\n};\n\n\nUpdateFlowNodeRefsHandler.prototype.revert = function(context) {\n\n  var updates = context.updates;\n\n  updates.forEach(function(update) {\n\n    var flowNode = update.flowNode,\n        lanes = flowNode.get(LANES_ATTR);\n\n    // unwire new\n    update.add.forEach(function(newLane) {\n      collectionRemove(lanes, newLane);\n      collectionRemove(newLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n\n    // wire old\n    update.remove.forEach(function(oldLane) {\n      collectionAdd(lanes, oldLane);\n      collectionAdd(oldLane.get(FLOW_NODE_REFS_ATTR), flowNode);\n    });\n  });\n\n  // TODO(nikku): return changed elements\n  // return [ ... ];\n\n  return [];\n};\n", "/**\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\n *\n * @typedef {import('../../../model/Types').Moddle} Moddle\n */\n\n/**\n * @implements {CommandHandler}\n *\n * @param {Moddle} moddle\n */\nexport default function IdClaimHandler(moddle) {\n  this._moddle = moddle;\n}\n\nIdClaimHandler.$inject = [ 'moddle' ];\n\n\nIdClaimHandler.prototype.execute = function(context) {\n  var ids = this._moddle.ids,\n      id = context.id,\n      element = context.element,\n      claiming = context.claiming;\n\n  if (claiming) {\n    ids.claim(id, element);\n  } else {\n    ids.unclaim(id);\n  }\n\n  return [];\n};\n\n/**\n * Command revert implementation.\n */\nIdClaimHandler.prototype.revert = function(context) {\n  var ids = this._moddle.ids,\n      id = context.id,\n      element = context.element,\n      claiming = context.claiming;\n\n  if (claiming) {\n    ids.unclaim(id);\n  } else {\n    ids.claim(id, element);\n  }\n\n  return [];\n};\n\n", "import {\n  assign\n} from 'min-dash';\n\nimport { is } from './ModelUtil';\n\nimport { isLabel } from 'diagram-js/lib/util/ModelUtil';\n\nexport { isLabel } from 'diagram-js/lib/util/ModelUtil';\n\n/**\n * @typedef {import('diagram-js/lib/util/Types').Point} Point\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n *\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').ModdleElement} ModdleElement\n */\n\nexport var DEFAULT_LABEL_SIZE = {\n  width: 90,\n  height: 20\n};\n\nexport var FLOW_LABEL_INDENT = 15;\n\n\n/**\n * Return true if the given semantic has an external label.\n *\n * @param {Element} semantic\n *\n * @return {boolean}\n */\nexport function isLabelExternal(semantic) {\n  return is(semantic, 'bpmn:Event') ||\n         is(semantic, 'bpmn:Gateway') ||\n         is(semantic, 'bpmn:DataStoreReference') ||\n         is(semantic, 'bpmn:DataObjectReference') ||\n         is(semantic, 'bpmn:DataInput') ||\n         is(semantic, 'bpmn:DataOutput') ||\n         is(semantic, 'bpmn:SequenceFlow') ||\n         is(semantic, 'bpmn:MessageFlow') ||\n         is(semantic, 'bpmn:Group');\n}\n\n/**\n * Return true if the given element has an external label.\n *\n * @param {Element} element\n *\n * @return {boolean}\n */\nexport function hasExternalLabel(element) {\n  return isLabel(element.label);\n}\n\n/**\n * Get the position of a sequence flow label.\n *\n * @param  {Point[]} waypoints\n *\n * @return {Point}\n */\nexport function getFlowLabelPosition(waypoints) {\n\n  // get the waypoints mid\n  var mid = waypoints.length / 2 - 1;\n\n  var first = waypoints[Math.floor(mid)];\n  var second = waypoints[Math.ceil(mid + 0.01)];\n\n  // get position\n  var position = getWaypointsMid(waypoints);\n\n  // calculate angle\n  var angle = Math.atan((second.y - first.y) / (second.x - first.x));\n\n  var x = position.x,\n      y = position.y;\n\n  if (Math.abs(angle) < Math.PI / 2) {\n    y -= FLOW_LABEL_INDENT;\n  } else {\n    x += FLOW_LABEL_INDENT;\n  }\n\n  return { x: x, y: y };\n}\n\n\n/**\n * Get the middle of a number of waypoints.\n *\n * @param  {Point[]} waypoints\n *\n * @return {Point}\n */\nexport function getWaypointsMid(waypoints) {\n\n  var mid = waypoints.length / 2 - 1;\n\n  var first = waypoints[Math.floor(mid)];\n  var second = waypoints[Math.ceil(mid + 0.01)];\n\n  return {\n    x: first.x + (second.x - first.x) / 2,\n    y: first.y + (second.y - first.y) / 2\n  };\n}\n\n/**\n * Get the middle of the external label of an element.\n *\n * @param {Element} element\n *\n * @return {Point}\n */\nexport function getExternalLabelMid(element) {\n\n  if (element.waypoints) {\n    return getFlowLabelPosition(element.waypoints);\n  } else if (is(element, 'bpmn:Group')) {\n    return {\n      x: element.x + element.width / 2,\n      y: element.y + DEFAULT_LABEL_SIZE.height / 2\n    };\n  } else {\n    return {\n      x: element.x + element.width / 2,\n      y: element.y + element.height + DEFAULT_LABEL_SIZE.height / 2\n    };\n  }\n}\n\n\n/**\n * Return the bounds of an elements label, parsed from the elements DI or\n * generated from its bounds.\n *\n * @param {ModdleElement} di\n * @param {Element} element\n *\n * @return {Rect}\n */\nexport function getExternalLabelBounds(di, element) {\n\n  var mid,\n      size,\n      bounds,\n      label = di.label;\n\n  if (label && label.bounds) {\n    bounds = label.bounds;\n\n    size = {\n      width: Math.max(DEFAULT_LABEL_SIZE.width, bounds.width),\n      height: bounds.height\n    };\n\n    mid = {\n      x: bounds.x + bounds.width / 2,\n      y: bounds.y + bounds.height / 2\n    };\n  } else {\n\n    mid = getExternalLabelMid(element);\n\n    size = DEFAULT_LABEL_SIZE;\n  }\n\n  return assign({\n    x: mid.x - size.width / 2,\n    y: mid.y - size.height / 2\n  }, size);\n}\n\n/**\n * @param {ModdleElement} semantic\n *\n * @returns {string}\n */\nfunction getLabelAttr(semantic) {\n  if (\n    is(semantic, 'bpmn:FlowElement') ||\n    is(semantic, 'bpmn:Participant') ||\n    is(semantic, 'bpmn:Lane') ||\n    is(semantic, 'bpmn:SequenceFlow') ||\n    is(semantic, 'bpmn:MessageFlow') ||\n    is(semantic, 'bpmn:DataInput') ||\n    is(semantic, 'bpmn:DataOutput')\n  ) {\n    return 'name';\n  }\n\n  if (is(semantic, 'bpmn:TextAnnotation')) {\n    return 'text';\n  }\n\n  if (is(semantic, 'bpmn:Group')) {\n    return 'categoryValueRef';\n  }\n}\n\n/**\n * @param {ModdleElement} semantic\n *\n * @returns {string}\n */\nfunction getCategoryValue(semantic) {\n  var categoryValueRef = semantic['categoryValueRef'];\n\n  if (!categoryValueRef) {\n    return '';\n  }\n\n\n  return categoryValueRef.value || '';\n}\n\n/**\n * @param {Element} element\n *\n * @return {string}\n */\nexport function getLabel(element) {\n  var semantic = element.businessObject,\n      attr = getLabelAttr(semantic);\n\n  if (attr) {\n\n    if (attr === 'categoryValueRef') {\n\n      return getCategoryValue(semantic);\n    }\n\n    return semantic[attr] || '';\n  }\n}\n\n\n/**\n * @param {Element} element\n * @param {string} text\n *\n * @return {Element}\n */\nexport function setLabel(element, text) {\n  var semantic = element.businessObject,\n      attr = getLabelAttr(semantic);\n\n  if (attr) {\n\n    if (attr === 'categoryValueRef') {\n      semantic['categoryValueRef'].value = text;\n    } else {\n      semantic[attr] = text;\n    }\n\n  }\n\n  return element;\n}\n", "import {\r\n  assign,\r\n  forEach,\r\n  isString,\r\n  pick\r\n} from 'min-dash';\r\n\r\nimport {\r\n  getDi,\r\n  isAny\r\n} from '../../../util/ModelUtil';\r\n\r\nimport {\r\n  isLabel\r\n} from '../../../util/LabelUtil';\r\n\r\nimport { isConnection } from 'diagram-js/lib/util/ModelUtil';\r\n\r\n/**\r\n * @typedef {import('diagram-js/lib/command/CommandHandler').default} CommandHandler\r\n *\r\n * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack\r\n *\r\n * @typedef {import('../../../model/Types').ModdleElement} ModdleElement\r\n */\r\n\r\nvar DEFAULT_COLORS = {\r\n  fill: undefined,\r\n  stroke: undefined\r\n};\r\n\r\n/**\r\n * @implements {CommandHandler}\r\n *\r\n * @param {CommandStack} commandStack\r\n */\r\nexport default function SetColorHandler(commandStack) {\r\n  this._commandStack = commandStack;\r\n\r\n  this._normalizeColor = function(color) {\r\n\r\n    // Remove color for falsy values.\r\n    if (!color) {\r\n      return undefined;\r\n    }\r\n\r\n    if (isString(color)) {\r\n      var hexColor = colorToHex(color);\r\n\r\n      if (hexColor) {\r\n        return hexColor;\r\n      }\r\n    }\r\n\r\n    throw new Error(`invalid color value: ${ color }`);\r\n  };\r\n}\r\n\r\nSetColorHandler.$inject = [\r\n  'commandStack'\r\n];\r\n\r\n\r\nSetColorHandler.prototype.postExecute = function(context) {\r\n  var elements = context.elements,\r\n      colors = context.colors || DEFAULT_COLORS;\r\n\r\n  var self = this;\r\n\r\n  var di = {};\r\n\r\n  if ('fill' in colors) {\r\n    assign(di, {\r\n      'background-color': this._normalizeColor(colors.fill) });\r\n  }\r\n\r\n  if ('stroke' in colors) {\r\n    assign(di, {\r\n      'border-color': this._normalizeColor(colors.stroke) });\r\n  }\r\n\r\n  forEach(elements, function(element) {\r\n    var assignedDi = isConnection(element) ? pick(di, [ 'border-color' ]) : di,\r\n        elementDi = getDi(element);\r\n\r\n    // TODO @barmac: remove once we drop bpmn.io properties\r\n    ensureLegacySupport(assignedDi);\r\n\r\n    if (isLabel(element)) {\r\n\r\n      // set label colors as bpmndi:BPMNLabel#color\r\n      self._commandStack.execute('element.updateModdleProperties', {\r\n        element: element,\r\n        moddleElement: elementDi.label,\r\n        properties: {\r\n          color: di['border-color']\r\n        }\r\n      });\r\n    } else {\r\n\r\n      // ignore non-compliant di\r\n      if (!isAny(elementDi, [ 'bpmndi:BPMNEdge', 'bpmndi:BPMNShape' ])) {\r\n        return;\r\n      }\r\n\r\n      // set colors bpmndi:BPMNEdge or bpmndi:BPMNShape\r\n      self._commandStack.execute('element.updateProperties', {\r\n        element: element,\r\n        properties: {\r\n          di: assignedDi\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n};\r\n\r\n/**\r\n * Convert color from rgb(a)/hsl to hex. Returns `null` for unknown color names\r\n * and for colors with alpha less than 1.0. This depends on `<canvas>`\r\n * serialization of the `context.fillStyle`.\r\n * Cf. https://html.spec.whatwg.org/multipage/canvas.html#dom-context-2d-fillstyle\r\n *\r\n * @example\r\n *\r\n * ```javascript\r\n * colorToHex('fuchsia'); // \"#ff00ff\"\r\n *\r\n * colorToHex('rgba(1, 2, 3, 0.4)'); // null\r\n * ```\r\n *\r\n * @param {string} color\r\n *\r\n * @return {string|null}\r\n */\r\nfunction colorToHex(color) {\r\n  var context = document.createElement('canvas').getContext('2d');\r\n\r\n  // (0) Start with transparent to account for browser default values.\r\n  context.fillStyle = 'transparent';\r\n\r\n  // (1) Assign color so that it's serialized.\r\n  context.fillStyle = color;\r\n\r\n  // (2) Return null for non-hex serialization result.\r\n  return /^#[0-9a-fA-F]{6}$/.test(context.fillStyle) ? context.fillStyle : null;\r\n}\r\n\r\n/**\r\n * Add legacy properties if required.\r\n *\r\n * @param {ModdleElement} di\r\n */\r\nfunction ensureLegacySupport(di) {\r\n  if ('border-color' in di) {\r\n    di.stroke = di['border-color'];\r\n  }\r\n\r\n  if ('background-color' in di) {\r\n    di.fill = di['background-color'];\r\n  }\r\n}\r\n", "import {\n  setLabel,\n  getLabel\n} from '../../../util/LabelUtil';\n\nimport {\n  getExternalLabelMid,\n  isLabelExternal,\n  hasExternalLabel,\n  isLabel\n} from '../../../util/LabelUtil';\n\nimport {\n  is\n} from '../../../util/ModelUtil';\n\nvar NULL_DIMENSIONS = {\n  width: 0,\n  height: 0\n};\n\n/**\n * @typedef {import('../../modeling/Modeling').default} Modeling\n * @typedef {import('../../../draw/TextRenderer').default} TextRenderer\n * @typedef {import('../../modeling/BpmnFactory').default} BpmnFactory\n *\n * @typedef {import('../../../model/Types').Element} Element\n */\n\n/**\n * A handler that updates the text of a BPMN element.\n *\n * @param {Modeling} modeling\n * @param {TextRenderer} textRenderer\n * @param {BpmnFactory} bpmnFactory\n */\nexport default function UpdateLabelHandler(modeling, textRenderer, bpmnFactory) {\n\n  /**\n   * Set the label and return the changed elements.\n   *\n   * Element parameter can be label itself or connection (i.e. sequence flow).\n   *\n   * @param {Element} element\n   * @param {string} text\n   */\n  function setText(element, text) {\n\n    // external label if present\n    var label = element.label || element;\n\n    var labelTarget = element.labelTarget || element;\n\n    setLabel(label, text, labelTarget !== label);\n\n    return [ label, labelTarget ];\n  }\n\n  function preExecute(ctx) {\n    var element = ctx.element,\n        businessObject = element.businessObject,\n        newLabel = ctx.newLabel;\n\n    if (!isLabel(element)\n        && isLabelExternal(element)\n        && !hasExternalLabel(element)\n        && !isEmptyText(newLabel)) {\n\n      // create label\n      var paddingTop = 7;\n\n      var labelCenter = getExternalLabelMid(element);\n\n      labelCenter = {\n        x: labelCenter.x,\n        y: labelCenter.y + paddingTop\n      };\n\n      modeling.createLabel(element, labelCenter, {\n        id: businessObject.id + '_label',\n        businessObject: businessObject,\n        di: element.di\n      });\n    }\n  }\n\n  function execute(ctx) {\n    ctx.oldLabel = getLabel(ctx.element);\n    return setText(ctx.element, ctx.newLabel);\n  }\n\n  function revert(ctx) {\n    return setText(ctx.element, ctx.oldLabel);\n  }\n\n  function postExecute(ctx) {\n    var element = ctx.element,\n        label = element.label || element,\n        newLabel = ctx.newLabel,\n        newBounds = ctx.newBounds,\n        hints = ctx.hints || {};\n\n    // ignore internal labels for elements except text annotations\n    if (!isLabel(label) && !is(label, 'bpmn:TextAnnotation')) {\n      return;\n    }\n\n    if (isLabel(label) && isEmptyText(newLabel)) {\n\n      if (hints.removeShape !== false) {\n        modeling.removeShape(label, { unsetLabel: false });\n      }\n\n      return;\n    }\n\n    var text = getLabel(element);\n\n    // resize element based on label _or_ pre-defined bounds\n    if (typeof newBounds === 'undefined') {\n      newBounds = textRenderer.getExternalLabelBounds(label, text);\n    }\n\n    // setting newBounds to false or _null_ will\n    // disable the postExecute resize operation\n    if (newBounds) {\n      modeling.resizeShape(label, newBounds, NULL_DIMENSIONS);\n    }\n  }\n\n  // API\n\n  this.preExecute = preExecute;\n  this.execute = execute;\n  this.revert = revert;\n  this.postExecute = postExecute;\n}\n\nUpdateLabelHandler.$inject = [\n  'modeling',\n  'textRenderer',\n  'bpmnFactory'\n];\n\n\n// helpers //////////\n\nfunction isEmptyText(label) {\n  return !label || !label.trim();\n}", "import inherits from 'inherits-browser';\n\nimport BaseModeling from 'diagram-js/lib/features/modeling/Modeling';\n\nimport UpdateModdlePropertiesHandler from './cmd/UpdateModdlePropertiesHandler';\nimport UpdatePropertiesHandler from './cmd/UpdatePropertiesHandler';\nimport UpdateCanvasRootHandler from './cmd/UpdateCanvasRootHandler';\nimport AddLaneHandler from './cmd/AddLaneHandler';\nimport SplitLaneHandler from './cmd/SplitLaneHandler';\nimport ResizeLaneHandler from './cmd/ResizeLaneHandler';\nimport UpdateFlowNodeRefsHandler from './cmd/UpdateFlowNodeRefsHandler';\nimport IdClaimHandler from './cmd/IdClaimHandler';\nimport SetColorHandler from './cmd/SetColorHandler';\n\nimport UpdateLabelHandler from '../label-editing/cmd/UpdateLabelHandler';\n\n/**\n * @typedef {import('../rules/BpmnRules').default} BpmnRules\n * @typedef {import('diagram-js/lib/command/CommandStack').default} CommandStack\n * @typedef {import('./ElementFactory').default} ElementFactory\n * @typedef {import('diagram-js/lib/core/EventBus').default} EventBus\n *\n * @typedef {import('diagram-js/lib/features/modeling/Modeling').ModelingHints} ModelingHints\n *\n * @typedef {import('../../model/Types').Connection} Connection\n * @typedef {import('../../model/Types').Element} Element\n * @typedef {import('../../model/Types').Label} Label\n * @typedef {import('../../model/Types').Parent} Parent\n * @typedef {import('../../model/Types').Root} Root\n * @typedef {import('../../model/Types').Shape} Shape\n * @typedef {import('../../model/Types').ModdleElement} ModdleElement\n *\n * @typedef {import('diagram-js/lib/util/Types').Rect} Rect\n *\n * @typedef {import('../../util/Types').Colors} Colors\n *\n * @typedef { {\n *   removeShape?: boolean;\n * } } UpdateLabelHints\n */\n\n/**\n * The BPMN 2.0 modeling entry point.\n *\n * @template {Connection} [T=Connection]\n * @template {Element} [U=Element]\n * @template {Label} [V=Label]\n * @template {Parent} [W=Parent]\n * @template {Shape} [X=Shape]\n *\n * @extends {BaseModeling<T, U, V, W, X>}\n *\n * @param {EventBus} eventBus\n * @param {ElementFactory} elementFactory\n * @param {CommandStack} commandStack\n * @param {BpmnRules} bpmnRules\n */\nexport default function Modeling(\n    eventBus,\n    elementFactory,\n    commandStack,\n    bpmnRules\n) {\n\n  BaseModeling.call(this, eventBus, elementFactory, commandStack);\n\n  this._bpmnRules = bpmnRules;\n}\n\ninherits(Modeling, BaseModeling);\n\nModeling.$inject = [\n  'eventBus',\n  'elementFactory',\n  'commandStack',\n  'bpmnRules'\n];\n\n\nModeling.prototype.getHandlers = function() {\n  var handlers = BaseModeling.prototype.getHandlers.call(this);\n\n  handlers['element.updateModdleProperties'] = UpdateModdlePropertiesHandler;\n  handlers['element.updateProperties'] = UpdatePropertiesHandler;\n  handlers['canvas.updateRoot'] = UpdateCanvasRootHandler;\n  handlers['lane.add'] = AddLaneHandler;\n  handlers['lane.resize'] = ResizeLaneHandler;\n  handlers['lane.split'] = SplitLaneHandler;\n  handlers['lane.updateRefs'] = UpdateFlowNodeRefsHandler;\n  handlers['id.updateClaim'] = IdClaimHandler;\n  handlers['element.setColor'] = SetColorHandler;\n  handlers['element.updateLabel'] = UpdateLabelHandler;\n\n  return handlers;\n};\n\n/**\n * Update an element's label.\n *\n * @param {Element} element The element.\n * @param {string} newLabel The new label.\n * @param {Rect} [newBounds] The optional bounds of the label.\n * @param {UpdateLabelHints} [hints] The optional hints.\n */\nModeling.prototype.updateLabel = function(element, newLabel, newBounds, hints) {\n  this._commandStack.execute('element.updateLabel', {\n    element: element,\n    newLabel: newLabel,\n    newBounds: newBounds,\n    hints: hints || {}\n  });\n};\n\n/**\n * @param {Element} source\n * @param {Element} target\n * @param {Partial<Connection>} [attrs]\n * @param {ModelingHints} [hints]\n *\n * @return {T}\n */\nModeling.prototype.connect = function(source, target, attrs, hints) {\n\n  var bpmnRules = this._bpmnRules;\n\n  if (!attrs) {\n    attrs = bpmnRules.canConnect(source, target);\n  }\n\n  if (!attrs) {\n    return;\n  }\n\n  return this.createConnection(source, target, attrs, source.parent, hints);\n};\n\n/**\n * Update a model element's properties.\n *\n * @param {Element} element The element.\n * @param {ModdleElement} moddleElement The model element.\n * @param {Object} properties The updated properties.\n */\nModeling.prototype.updateModdleProperties = function(element, moddleElement, properties) {\n  this._commandStack.execute('element.updateModdleProperties', {\n    element: element,\n    moddleElement: moddleElement,\n    properties: properties\n  });\n};\n\n/**\n * Update an element's properties.\n *\n * @param {Element} element The element.\n * @param {Object} properties The updated properties.\n */\nModeling.prototype.updateProperties = function(element, properties) {\n  this._commandStack.execute('element.updateProperties', {\n    element: element,\n    properties: properties\n  });\n};\n\n/**\n * Resize a lane.\n *\n * @param {Shape} laneShape The lane.\n * @param {Rect} newBounds The new bounds of the lane.\n * @param {boolean} [balanced] Wether to resize neighboring lanes.\n */\nModeling.prototype.resizeLane = function(laneShape, newBounds, balanced) {\n  this._commandStack.execute('lane.resize', {\n    shape: laneShape,\n    newBounds: newBounds,\n    balanced: balanced\n  });\n};\n\n/**\n * Add a lane.\n *\n * @param {Shape} targetLaneShape The shape to add the lane to.\n * @param {string} location The location.\n *\n * @return {Shape} The added lane.\n */\nModeling.prototype.addLane = function(targetLaneShape, location) {\n  var context = {\n    shape: targetLaneShape,\n    location: location\n  };\n\n  this._commandStack.execute('lane.add', context);\n\n  return context.newLane;\n};\n\n/**\n * Split a lane.\n *\n * @param {Shape} targetLane The lane to split.\n * @param {number} count The number of lanes to split the lane into. Must not\n * exceed the number of existing lanes.\n */\nModeling.prototype.splitLane = function(targetLane, count) {\n  this._commandStack.execute('lane.split', {\n    shape: targetLane,\n    count: count\n  });\n};\n\n/**\n * Turn a process into a collaboration.\n *\n * @return {Root} The root of the collaboration.\n */\nModeling.prototype.makeCollaboration = function() {\n\n  var collaborationElement = this._create('root', {\n    type: 'bpmn:Collaboration'\n  });\n\n  var context = {\n    newRoot: collaborationElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n\n  return collaborationElement;\n};\n\n/**\n * Transform a collaboration into a process.\n *\n * @return {Root} The root of the process.\n */\nModeling.prototype.makeProcess = function() {\n\n  var processElement = this._create('root', {\n    type: 'bpmn:Process'\n  });\n\n  var context = {\n    newRoot: processElement\n  };\n\n  this._commandStack.execute('canvas.updateRoot', context);\n\n  return processElement;\n};\n\n/**\n * Update the referenced lanes of each flow node.\n *\n * @param {Shape[]} flowNodeShapes The flow nodes to update.\n * @param {Shape[]} laneShapes The lanes.\n */\nModeling.prototype.updateLaneRefs = function(flowNodeShapes, laneShapes) {\n\n  this._commandStack.execute('lane.updateRefs', {\n    flowNodeShapes: flowNodeShapes,\n    laneShapes: laneShapes\n  });\n};\n\n/**\n * Claim an ID.\n *\n * @param {string} id The ID to claim.\n * @param {ModdleElement} moddleElement The model element the ID is claimed for.\n */\nModeling.prototype.claimId = function(id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement,\n    claiming: true\n  });\n};\n\n/**\n * Unclaim an ID.\n *\n * @param {string} id The ID to unclaim.\n * @param {ModdleElement} moddleElement The model element the ID is claimed for.\n */\nModeling.prototype.unclaimId = function(id, moddleElement) {\n  this._commandStack.execute('id.updateClaim', {\n    id: id,\n    element: moddleElement\n  });\n};\n\n/**\n * Set the color(s) of one or many elements.\n *\n * @param {Element[]} elements The elements to set the color(s) for.\n * @param {Colors} colors The color(s) to set.\n */\nModeling.prototype.setColor = function(elements, colors) {\n  if (!elements.length) {\n    elements = [ elements ];\n  }\n\n  this._commandStack.execute('element.setColor', {\n    elements: elements,\n    colors: colors\n  });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAae,SAAR,cAA+B,UAAU,QAAQ;AACtD,OAAK,YAAY;AACjB,OAAK,UAAU;AACjB;AAEA,cAAc,UAAU,CAAE,YAAY,QAAS;AAG/C,cAAc,UAAU,aAAa,SAAS,SAAS;AACrD,MAAI,WAAW,KAAK;AAEpB,MAAI,WAAW,QAAQ,UACnB,YAAY,QAAQ;AAGxB,UAAQ,UAAU,SAAS,SAAS;AAClC,QAAIA,SAAQ;AAAA,MACV,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AAEA,QAAI,UAAU,UAAU,IAAI,GAAG;AAC7B,MAAAA,OAAM,IAAI,UAAU,OAAO,QAAQ;AAAA,IAErC,WAAW,UAAU,UAAU,KAAK,GAAG;AACrC,MAAAA,OAAM,IAAK,UAAU,QAAQ,QAAQ,QAAS,QAAQ;AAAA,IAExD,WAAW,UAAU,UAAU,MAAM,GAAG;AACtC,MAAAA,OAAM,IAAK,UAAU,SAAS,KAAK,MAAM,QAAQ,QAAQ,CAAC,IAAK,QAAQ;AAAA,IAEzE,WAAW,UAAU,UAAU,GAAG,GAAG;AACnC,MAAAA,OAAM,IAAI,UAAU,MAAM,QAAQ;AAAA,IAEpC,WAAW,UAAU,UAAU,MAAM,GAAG;AACtC,MAAAA,OAAM,IAAK,UAAU,SAAS,QAAQ,SAAU,QAAQ;AAAA,IAE1D,WAAW,UAAU,UAAU,MAAM,GAAG;AACtC,MAAAA,OAAM,IAAK,UAAU,SAAS,KAAK,MAAM,QAAQ,SAAS,CAAC,IAAK,QAAQ;AAAA,IAC1E;AAEA,aAAS,aAAa,CAAE,OAAQ,GAAGA,QAAO,QAAQ,MAAM;AAAA,EAC1D,CAAC;AACH;AAEA,cAAc,UAAU,cAAc,SAAS,SAAS;AAExD;;;ACzCe,SAAR,mBAAoC,UAAU;AACnD,OAAK,YAAY;AACnB;AAEA,mBAAmB,UAAU,CAAE,UAAW;AAe1C,mBAAmB,UAAU,aAAa,SAAS,SAAS;AAE1D,MAAI,SAAS,QAAQ;AAErB,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAEA,MAAI,SAAS,QAAQ,UAAU,OAAO,QAClC,QAAQ,QAAQ,OAChB,QAAQ,QAAQ,SAAS,CAAC;AAE9B,UAAQ,QAAQ,QACd,KAAK,UAAU;AAAA,IACb;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IAAQ,EAAE,QAAQ,MAAM,OAAO;AAAA,EAAC;AAEpC,UAAQ,QAAQ;AAClB;AAEA,mBAAmB,UAAU,cAAc,SAAS,SAAS;AAC3D,MAAI,QAAQ,QAAQ,SAAS,CAAC;AAE9B,MAAI,CAAC,iBAAiB,QAAQ,QAAQ,QAAQ,KAAK,GAAG;AAGpD,QAAI,MAAM,qBAAqB,QAAQ,QAAQ;AAC7C,WAAK,UAAU,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,UAAU;AAAA,IAC1E,OAAO;AACL,WAAK,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,UAAU;AAAA,IAC1E;AAAA,EACF;AACF;AAGA,SAAS,iBAAiB,QAAQ,QAAQ;AACxC,SAAO,KAAK,OAAO,UAAU,SAAS,GAAG;AACvC,WAAO,EAAE,WAAW;AAAA,EACtB,CAAC;AACH;;;AC7De,SAAR,wBAAyC,QAAQ,UAAU;AAChE,OAAK,UAAU;AACf,OAAK,YAAY;AACnB;AAEA,wBAAwB,UAAU,CAAE,UAAU,UAAW;AAiBzD,wBAAwB,UAAU,UAAU,SAAS,SAAS;AAE5D,MAAI,aAAa,QAAQ,YACrB,SAAS,QAAQ,QACjB,SAAS,QAAQ,QACjB,SAAS,QAAQ,QACjB,cAAc,QAAQ,aACtB,QAAQ,QAAQ;AAEpB,MAAI,CAAC,UAAU,CAAC,QAAQ;AACtB,UAAM,IAAI,MAAM,4BAA4B;AAAA,EAC9C;AAEA,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAEA,aAAW,SAAS;AACpB,aAAW,SAAS;AAEpB,MAAI,CAAC,WAAW,WAAW;AACzB,eAAW,YAAY,KAAK,UAAU,iBAAiB,YAAY,KAAK;AAAA,EAC1E;AAGA,OAAK,QAAQ,cAAc,YAAY,QAAQ,WAAW;AAE1D,SAAO;AACT;AAEA,wBAAwB,UAAU,SAAS,SAAS,SAAS;AAC3D,MAAI,aAAa,QAAQ;AAEzB,OAAK,QAAQ,iBAAiB,UAAU;AAExC,aAAW,SAAS;AACpB,aAAW,SAAS;AAEpB,SAAO;AACT;;;ACpDA,IAAI,QAAQ,KAAK;AAKF,SAAR,sBAAuC,UAAU;AACtD,OAAK,YAAY;AACnB;AAEA,sBAAsB,UAAU;AAAA,EAC9B;AACF;AAEA,sBAAsB,UAAU,aAAa,SAAS,SAAS;AAC7D,MAAI,WAAW,QAAQ,UACnB,SAAS,QAAQ,QACjB,cAAc,QAAQ,aACtB,WAAW,QAAQ,UACnB,QAAQ,QAAQ;AAEpB,MAAI,WAAW,KAAK;AAGpB,UAAQ,UAAU,SAAS,SAAS;AAClC,QAAI,CAAC,SAAS,QAAQ,CAAC,GAAG;AACxB,cAAQ,IAAI;AAAA,IACd;AAEA,QAAI,CAAC,SAAS,QAAQ,CAAC,GAAG;AACxB,cAAQ,IAAI;AAAA,IACd;AAAA,EACF,CAAC;AAED,MAAI,kBAAkB,OAAO,UAAU,SAAS,SAAS;AACvD,WAAO,CAAC,QAAQ;AAAA,EAClB,CAAC;AAED,MAAI,OAAO,QAAQ,eAAe;AAGlC,UAAQ,UAAU,SAAS,SAAS;AAClC,QAAI,aAAa,OAAO,GAAG;AACzB,cAAQ,YAAY,IAAI,QAAQ,WAAW,SAAS,UAAU;AAC5D,eAAO;AAAA,UACL,GAAG,MAAM,SAAS,IAAI,KAAK,IAAI,KAAK,QAAQ,IAAI,SAAS,CAAC;AAAA,UAC1D,GAAG,MAAM,SAAS,IAAI,KAAK,IAAI,KAAK,SAAS,IAAI,SAAS,CAAC;AAAA,QAC7D;AAAA,MACF,CAAC;AAAA,IACH;AAEA,WAAO,SAAS;AAAA,MACd,GAAG,MAAM,QAAQ,IAAI,KAAK,IAAI,KAAK,QAAQ,IAAI,SAAS,CAAC;AAAA,MACzD,GAAG,MAAM,QAAQ,IAAI,KAAK,IAAI,KAAK,SAAS,IAAI,SAAS,CAAC;AAAA,IAC5D,CAAC;AAAA,EACH,CAAC;AAED,MAAI,UAAU,WAAW,QAAQ;AAEjC,MAAI,QAAQ,CAAC;AAEb,UAAQ,UAAU,SAAS,SAAS;AAClC,QAAI,aAAa,OAAO,GAAG;AACzB,YAAO,QAAQ,EAAG,IAAI,SAAS,WAAW,IACxC,SAAS;AAAA,QACP,MAAO,QAAQ,OAAO,EAAG;AAAA,QACzB,MAAO,QAAQ,OAAO,EAAG;AAAA,QACzB;AAAA,QACA;AAAA,QACA,QAAQ,UAAU;AAAA,QAClB;AAAA,MACF,IACA,SAAS;AAAA,QACP,MAAO,QAAQ,OAAO,EAAG;AAAA,QACzB,MAAO,QAAQ,OAAO,EAAG;AAAA,QACzB;AAAA,QACA,QAAQ,UAAU;AAAA,QAClB;AAAA,MACF;AAEF;AAAA,IACF;AAEA,QAAI,mBAAmB,OAAO,CAAC,GAAG,KAAK;AAEvC,QAAI,QAAQ,QAAQ,OAAO,MAAM,IAAI;AACnC,uBAAiB,aAAa;AAAA,IAChC;AAEA,QAAI,QAAQ,OAAO,GAAG;AACpB,yBAAmB,KAAK,kBAAkB,CAAE,QAAS,CAAC;AAAA,IACxD;AAEA,UAAO,QAAQ,EAAG,IAAI,SAAS,WAAW,IACxC,SAAS;AAAA,MACP;AAAA,MACA,KAAK,SAAS,CAAE,KAAK,KAAK,SAAS,QAAS,CAAC;AAAA,MAC7C,QAAQ,UAAU;AAAA,MAClB;AAAA,MACA;AAAA,IACF,IACA,SAAS;AAAA,MACP;AAAA,MACA,KAAK,SAAS,CAAE,KAAK,KAAK,SAAS,QAAS,CAAC;AAAA,MAC7C,QAAQ,UAAU;AAAA,MAClB;AAAA,IACF;AAAA,EACJ,CAAC;AAED,UAAQ,WAAW,OAAO,KAAK;AACjC;;;AC7HA,IAAIC,SAAQ,KAAK;AAQF,SAAR,mBAAoC,QAAQ;AACjD,OAAK,UAAU;AACjB;AAEA,mBAAmB,UAAU,CAAE,QAAS;AAexC,mBAAmB,UAAU,UAAU,SAAS,SAAS;AAEvD,MAAI,QAAQ,QAAQ,OAChB,mBAAmB,QAAQ,UAC3B,SAAS,QAAQ,QACjB,cAAc,QAAQ;AAE1B,MAAI,CAAC,QAAQ;AACX,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAEA,MAAI,CAAC,kBAAkB;AACrB,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AAGA,MAAI,iBAAiB,UAAU,QAAW;AACxC,WAAO,OAAO,gBAAgB;AAAA,EAChC,OAAO;AACL,WAAO,OAAO;AAAA,MACZ,GAAG,iBAAiB,IAAIA,OAAM,MAAM,QAAQ,CAAC;AAAA,MAC7C,GAAG,iBAAiB,IAAIA,OAAM,MAAM,SAAS,CAAC;AAAA,IAChD,CAAC;AAAA,EACH;AAGA,OAAK,QAAQ,SAAS,OAAO,QAAQ,WAAW;AAEhD,SAAO;AACT;AAMA,mBAAmB,UAAU,SAAS,SAAS,SAAS;AAEtD,MAAI,QAAQ,QAAQ;AAGpB,OAAK,QAAQ,YAAY,KAAK;AAE9B,SAAO;AACT;;;AC7De,SAAR,mBAAoC,QAAQ;AACjD,qBAAmB,KAAK,MAAM,MAAM;AACtC;AAEA,EAAS,oBAAoB,kBAAkB;AAE/C,mBAAmB,UAAU,CAAE,QAAS;AAMxC,IAAI,kBAAkB,mBAAmB,UAAU;AAYnD,mBAAmB,UAAU,UAAU,SAAS,SAAS;AAEvD,MAAI,QAAQ,QAAQ;AAEpB,wBAAsB,KAAK;AAE3B,QAAM,cAAc,QAAQ;AAE5B,SAAO,gBAAgB,KAAK,MAAM,OAAO;AAC3C;AAEA,IAAI,iBAAiB,mBAAmB,UAAU;AAKlD,mBAAmB,UAAU,SAAS,SAAS,SAAS;AACtD,UAAQ,MAAM,cAAc;AAE5B,SAAO,eAAe,KAAK,MAAM,OAAO;AAC1C;AAKA,SAAS,sBAAsB,OAAO;AAGpC,GAAE,SAAS,QAAS,EAAE,QAAQ,SAAS,MAAM;AAC3C,QAAI,OAAO,MAAM,IAAI,MAAM,aAAa;AACtC,YAAM,IAAI,IAAI;AAAA,IAChB;AAAA,EACF,CAAC;AACH;;;AC3DO,SAAS,UAAU,YAAY,UAAU;AAE9C,MAAI,OAAO,aAAa,YAAY;AAClC,UAAM,IAAI,MAAM,sCAAsC;AAAA,EACxD;AAEA,MAAI,CAAC,YAAY;AACf;AAAA,EACF;AAEA,MAAIC;AAEJ,SAAQA,KAAI,WAAW,CAAC,GAAI;AAC1B,aAASA,EAAC;AAAA,EACZ;AAEA,SAAO;AACT;;;AClBe,SAAR,wBAAyC,QAAQ,UAAU;AAChE,OAAK,UAAU;AACf,OAAK,YAAY;AACnB;AAEA,wBAAwB,UAAU;AAAA,EAChC;AAAA,EACA;AACF;AAMA,wBAAwB,UAAU,aAAa,SAAS,SAAS;AAE/D,MAAI,WAAW,KAAK;AAEpB,MAAI,aAAa,QAAQ;AAGzB,YAAU,WAAW,UAAU,SAASC,aAAY;AAIlD,aAAS,iBAAiBA,aAAY,EAAE,QAAQ,KAAK,CAAC;AAAA,EACxD,CAAC;AAED,YAAU,WAAW,UAAU,SAASA,aAAY;AAClD,aAAS,iBAAiBA,aAAY,EAAE,QAAQ,KAAK,CAAC;AAAA,EACxD,CAAC;AAEH;AAGA,wBAAwB,UAAU,UAAU,SAAS,SAAS;AAE5D,MAAI,aAAa,QAAQ,YACrB,SAAS,WAAW;AAExB,UAAQ,SAAS;AAGjB,UAAQ,cAAc,QAAc,OAAO,UAAU,UAAU;AAE/D,UAAQ,SAAS,WAAW;AAC5B,UAAQ,SAAS,WAAW;AAE5B,OAAK,QAAQ,iBAAiB,UAAU;AAExC,aAAW,SAAS;AACpB,aAAW,SAAS;AAEpB,SAAO;AACT;AAKA,wBAAwB,UAAU,SAAS,SAAS,SAAS;AAE3D,MAAI,aAAa,QAAQ,YACrB,SAAS,QAAQ,QACjB,cAAc,QAAQ;AAE1B,aAAW,SAAS,QAAQ;AAC5B,aAAW,SAAS,QAAQ;AAG5B,MAAc,OAAO,UAAU,YAAY,WAAW;AAEtD,OAAK,QAAQ,cAAc,YAAY,MAAM;AAE7C,SAAO;AACT;;;AC9Ee,SAAR,sBAAuC,UAAU,iBAAiB;AACvE,OAAK,YAAY;AACjB,OAAK,mBAAmB;AAC1B;AAEA,sBAAsB,UAAU;AAAA,EAC9B;AAAA,EACA;AACF;AAGA,sBAAsB,UAAU,cAAc,SAAS,SAAS;AAE9D,MAAI,WAAW,KAAK,WAChB,kBAAkB,KAAK,kBACvB,WAAW,QAAQ;AAEvB,UAAQ,UAAU,SAAS,SAAS;AAIlC,QAAI,CAAC,gBAAgB,IAAI,QAAQ,EAAE,GAAG;AACpC;AAAA,IACF;AAEA,QAAI,QAAQ,WAAW;AACrB,eAAS,iBAAiB,OAAO;AAAA,IACnC,OAAO;AACL,eAAS,YAAY,OAAO;AAAA,IAC9B;AAAA,EACF,CAAC;AACH;;;ACtBe,SAAR,mBAAoC,QAAQ,UAAU;AAC3D,OAAK,UAAU;AACf,OAAK,YAAY;AACnB;AAEA,mBAAmB,UAAU,CAAE,UAAU,UAAW;AAOpD,mBAAmB,UAAU,aAAa,SAAS,SAAS;AAE1D,MAAI,WAAW,KAAK;AAEpB,MAAI,QAAQ,QAAQ;AAGpB,YAAU,MAAM,UAAU,SAAS,YAAY;AAI7C,aAAS,iBAAiB,YAAY,EAAE,QAAQ,KAAK,CAAC;AAAA,EACxD,CAAC;AAED,YAAU,MAAM,UAAU,SAAS,YAAY;AAC7C,aAAS,iBAAiB,YAAY,EAAE,QAAQ,KAAK,CAAC;AAAA,EACxD,CAAC;AAGD,YAAU,MAAM,UAAU,SAAS,OAAO;AACxC,QAAI,aAAa,KAAK,GAAG;AACvB,eAAS,iBAAiB,OAAO,EAAE,QAAQ,KAAK,CAAC;AAAA,IACnD,OAAO;AACL,eAAS,YAAY,OAAO,EAAE,QAAQ,KAAK,CAAC;AAAA,IAC9C;AAAA,EACF,CAAC;AACH;AAKA,mBAAmB,UAAU,UAAU,SAAS,SAAS;AACvD,MAAI,SAAS,KAAK;AAElB,MAAI,QAAQ,QAAQ,OAChB,YAAY,MAAM;AAEtB,UAAQ,YAAY;AAGpB,UAAQ,iBAAiB,QAAc,UAAU,UAAU,KAAK;AAGhE,SAAO,YAAY,KAAK;AAExB,SAAO;AACT;AAMA,mBAAmB,UAAU,SAAS,SAAS,SAAS;AAEtD,MAAI,SAAS,KAAK;AAElB,MAAI,QAAQ,QAAQ,OAChB,YAAY,QAAQ,WACpB,iBAAiB,QAAQ;AAG7B,MAAc,UAAU,UAAU,OAAO,cAAc;AAEvD,SAAO,SAAS,OAAO,SAAS;AAEhC,SAAO;AACT;;;ACpFe,SAAR,mBAAoC,UAAU;AACnD,OAAK,YAAY;AACnB;AAEA,mBAAmB,UAAU,CAAE,UAAW;AAE1C,IAAI,WAAW;AAAA,EACb,GAAG;AAAA,EACH,GAAG;AACL;AAEA,mBAAmB,UAAU,aAAa,SAAS,SAAS;AAC1D,MAAI,WAAW,KAAK;AAEpB,MAAI,SAAS,QAAQ,QACjB,OAAO,QAAQ,MACf,YAAY,QAAQ;AAExB,WAAS,YAAY,OAAO,SAAS;AACnC,UAAM,MAAM,MAAM,KAAK,IAAI,QAAQ,IAAI,GAAG,MAAM,MAAM,GAAG;AACzD,UAAM,MAAM,MAAM,KAAK,IAAI,QAAQ,IAAI,IAAI,QAAQ,SAAS,GAAG,MAAM,MAAM,GAAG;AAAA,EAChF;AAEA,WAASC,QAAO,SAAS;AACvB,WAAO,QAAQ,IAAI,IAAI,QAAQ,SAAS,IAAI;AAAA,EAC9C;AAEA,WAAS,QAAQ,KAAK;AACpB,WAAO,IAAI,SAAS;AAAA,EACtB;AAEA,WAAS,UAAU,OAAO;AACxB,WAAO,MAAM,MAAM,MAAM;AAAA,EAC3B;AAEA,WAAS,cAAc,WAAW,SAAS;AACzC,QAAIC,SAAQ,EAAE,GAAG,EAAE;AAEnB,IAAAA,OAAM,IAAI,IAAI,YAAYD,QAAO,OAAO;AAExC,QAAIC,OAAM,IAAI,GAAG;AAEf,MAAAA,OAAM,SAAS,IAAI,CAAC,IAAI;AAExB,eAAS,aAAa,CAAE,OAAQ,GAAGA,QAAO,QAAQ,MAAM;AAAA,IAC1D;AAAA,EACF;AAEA,MAAI,aAAa,OAAO,CAAC,GACrB,eAAe,QAAQ,MAAM,GAC7B,YAAY,OAAQ,YAAa;AAErC,MAAI,QACA,gBACA,aAAa;AAEjB,UAAQ,QAAQ,SAAS,OAAO,KAAK;AACnC,QAAI,gBACA,SACA;AAEJ,QAAI,MAAM,SAAS,SAAS,GAAG;AAC7B,UAAI,OAAO,QAAQ,OAAO,SAAS,GAAG;AACpC,oBAAY,OAAO,MAAM,SAAS,CAAC,CAAC;AAEpC,sBAAc,UAAU,MAAM,KAAK;AAAA,MACrC;AACA;AAAA,IACF;AAEA,qBAAiB,OAAO,MAAM,UAAU,IAAI;AAE5C,cAAU,eAAe,CAAC;AAE1B,QAAI,QAAQ,cAAc;AACxB,gBAAU,eAAe,QAAQ,cAAc,CAAC;AAAA,IAClD;AAEA,gBAAYD,QAAO,OAAO;AAG1B,UAAM,QAAQ;AAEd,YAAQ,gBAAgB,SAAS,SAAS;AAExC,oBAAc,WAAW,OAAO;AAEhC,UAAI,MAAM,UAAU,MAAM;AACxB,cAAM,QAAQ;AAAA,UACZ,KAAK,QAAQ,IAAI;AAAA,UACjB,KAAK,QAAQ,IAAI,IAAI,QAAQ,SAAS;AAAA,QACxC;AAEA;AAAA,MACF;AAGA,kBAAY,OAAO,OAAO;AAAA,IAC5B,CAAC;AAED,QAAI,OAAO,QAAQ,OAAO,SAAS,GAAG;AACpC,oBAAc,UAAU,MAAM,KAAK;AAAA,IACrC;AAAA,EACF,CAAC;AAED,mBAAiB,KAAK,IAAI,UAAU,MAAM,MAAM,WAAW,MAAM,GAAG;AAEpE,WAAS,KAAK,OAAO,iBAAiB,eAAe,OAAO,SAAS,EAAE;AAEvE,MAAI,SAAS,OAAO,SAAS,GAAG;AAC9B;AAAA,EACF;AAEA,UAAQ,QAAQ,SAAS,OAAO,UAAU;AACxC,QAAIC,SAAQ,CAAC,GACT;AAEJ,QAAI,UAAU,cAAc,UAAU,WAAW;AAC/C;AAAA,IACF;AAEA,gBAAY,OAAO,WAAW,CAAC;AAE/B,UAAM,MAAM,MAAM;AAElB,YAAQ,MAAM,UAAU,SAAS,SAAS,KAAK;AAC7C,MAAAA,OAAM,SAAS,IAAI,CAAC,IAAI;AACxB,MAAAA,OAAM,IAAI,IAAK,UAAU,MAAM,MAAM,QAAQ,IAAI,IAAK;AAEtD,UAAI,MAAM,MAAM,QAAQ,QAAQ,IAAI,GAAG;AACrC,QAAAA,OAAM,IAAI,KAAK,QAAQ,IAAI,IAAI,MAAM,MAAM;AAAA,MAC7C;AAEA,UAAIA,OAAM,IAAI,GAAG;AACf,iBAAS,aAAa,CAAE,OAAQ,GAAGA,QAAO,QAAQ,MAAM;AAAA,MAC1D;AAEA,YAAM,MAAM,MAAM,KAAK,IAAI,QAAQ,IAAI,IAAI,QAAQ,SAAS,GAAG,MAAM,MAAM,MAAM,MAAM,CAAC;AAAA,IAC1F,CAAC;AAAA,EACH,CAAC;AACH;AAEA,mBAAmB,UAAU,cAAc,SAAS,SAAS;AAE7D;;;ACjJe,SAAR,wBAAyC,UAAU,QAAQ;AAChE,OAAK,YAAY;AACjB,OAAK,UAAU;AACjB;AAEA,wBAAwB,UAAU,CAAE,YAAY,QAAS;AAEzD,wBAAwB,UAAU,UAAU,SAAS,SAAS;AAE5D,MAAI,aAAa,QAAQ;AAEzB,MAAI,eAAe,WAAW;AAE9B,SAAO,SAAS;AAAA,IACd;AAAA,EACF,CAAC;AAED,aAAW,YAAY,KAAK,UAAU,iBAAiB,YAAY,QAAQ,KAAK;AAEhF,SAAO;AACT;AAEA,wBAAwB,UAAU,SAAS,SAAS,SAAS;AAE3D,MAAI,aAAa,QAAQ;AAEzB,aAAW,YAAY,QAAQ;AAE/B,SAAO;AACT;;;AC3Be,SAAR,wBAAyC;AAAE;AAGlD,sBAAsB,UAAU,UAAU,SAAS,SAAS;AAE1D,MAAI,aAAa,QAAQ,YACrBC,SAAQ,QAAQ;AAEpB,MAAI,YAAY,QAAQ,aAAa,WAAW,QAC5C,iBAAiB,QAAQ,gBACzB,YAAY,WAAW;AAG3B,UAAQ,YAAY;AACpB,UAAQ,iBAAiB,OAAiB,UAAU,UAAU,UAAU;AAGxE,MAAc,UAAU,UAAU,YAAY,cAAc;AAG5D,aAAW,SAAS;AAGpB,UAAQ,WAAW,WAAW,SAAS,GAAG;AACxC,MAAE,KAAKA,OAAM;AACb,MAAE,KAAKA,OAAM;AAEb,QAAI,EAAE,UAAU;AACd,QAAE,SAAS,KAAKA,OAAM;AACtB,QAAE,SAAS,KAAKA,OAAM;AAAA,IACxB;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEA,sBAAsB,UAAU,SAAS,SAAS,SAAS;AAEzD,MAAI,aAAa,QAAQ,YACrB,YAAY,WAAW,QACvB,YAAY,QAAQ,WACpB,iBAAiB,QAAQ,gBACzBA,SAAQ,QAAQ;AAGpB,SAAiB,UAAU,UAAU,UAAU;AAG/C,MAAc,UAAU,UAAU,YAAY,cAAc;AAG5D,aAAW,SAAS;AAGpB,UAAQ,WAAW,WAAW,SAAS,GAAG;AACxC,MAAE,KAAKA,OAAM;AACb,MAAE,KAAKA,OAAM;AAEb,QAAI,EAAE,UAAU;AACd,QAAE,SAAS,KAAKA,OAAM;AACtB,QAAE,SAAS,KAAKA,OAAM;AAAA,IACxB;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;ACvEO,SAAS,OAAO,QAAQ;AAC7B,SAAO;AAAA,IACL,GAAG,OAAO,IAAK,OAAO,QAAQ;AAAA,IAC9B,GAAG,OAAO,IAAK,OAAO,SAAS;AAAA,EACjC;AACF;AAQO,SAAS,MAAM,GAAG,GAAG;AAC1B,SAAO;AAAA,IACL,GAAG,EAAE,IAAI,EAAE;AAAA,IACX,GAAG,EAAE,IAAI,EAAE;AAAA,EACb;AACF;;;ACAO,SAAS,kBAAkB,OAAO,WAAW,WAAW;AAC7D,MAAI,YAAY,OAAO,SAAS,GAC5B,YAAY,OAAO,SAAS,GAC5B,WAAW,MAAM,OAAO,SAAS;AAErC,MAAI,WAAW;AAAA,IACb,GAAG,SAAS,KAAK,UAAU,QAAQ,UAAU;AAAA,IAC7C,GAAG,SAAS,KAAK,UAAU,SAAS,UAAU;AAAA,EAChD;AAEA,SAAO,WAAW;AAAA,IAChB,GAAG,UAAU,IAAI,SAAS;AAAA,IAC1B,GAAG,UAAU,IAAI,SAAS;AAAA,EAC5B,CAAC;AACH;AAaO,SAAS,uBAAuB,OAAO,WAAW,WAAW;AAClE,MAAI,cAAc,OAAO,KAAK,GAC1B,YAAY,OAAO,SAAS,GAC5B,YAAY,OAAO,SAAS,GAC5B,aAAa,MAAM,OAAO,WAAW,GACrC,iBAAiB,MAAM,aAAa,SAAS,GAC7C,sBAAsB,uBAAuB,aAAa,WAAW,SAAS;AAElF,MAAI,qBAAqB;AACvB,WAAO;AAAA,EACT;AAEA,MAAI,iBAAiB;AAAA,IACnB,GAAG,eAAe,KAAK,UAAU,QAAQ,UAAU;AAAA,IACnD,GAAG,eAAe,KAAK,UAAU,SAAS,UAAU;AAAA,EACtD;AAEA,MAAI,iBAAiB;AAAA,IACnB,GAAG,UAAU,IAAI,eAAe;AAAA,IAChC,GAAG,UAAU,IAAI,eAAe;AAAA,EAClC;AAEA,SAAO,WAAW;AAAA,IAChB,GAAG,eAAe,IAAI,WAAW,IAAI,MAAM;AAAA,IAC3C,GAAG,eAAe,IAAI,WAAW,IAAI,MAAM;AAAA,EAC7C,CAAC;AACH;AAEA,SAAS,uBAAuB,gBAAgB,WAAW,WAAW;AACpE,MAAI,UAAU,OAAO,SAAS,GAC1B,UAAU,OAAO,SAAS;AAE9B,MAAI,QAAQ,SAAS,OAAO,GAAG;AAC7B,WAAO;AAAA,EACT;AAEA,MAAI,iBAAiB,eAAe,WAAW,cAAc,GACzD,qBACA,gBACA;AAEJ,MAAI,mBAAmB,OAAO;AAC5B,0BAAsB;AAAA,MACpB,GAAG;AAAA,MACH,GAAG,QAAQ,SAAS,QAAQ;AAAA,IAC9B;AAAA,EACF,WAAW,mBAAmB,UAAU;AACtC,0BAAsB;AAAA,MACpB,GAAG;AAAA,MACH,GAAG,QAAQ,MAAM,QAAQ;AAAA,IAC3B;AAAA,EACF,WAAW,mBAAmB,SAAS;AACrC,0BAAsB;AAAA,MACpB,GAAG,QAAQ,OAAO,QAAQ;AAAA,MAC1B,GAAG;AAAA,IACL;AAAA,EACF,WAAW,mBAAmB,QAAQ;AACpC,0BAAsB;AAAA,MACpB,GAAG,QAAQ,QAAQ,QAAQ;AAAA,MAC3B,GAAG;AAAA,IACL;AAAA,EACF,OAAO;AAGL,WAAO;AAAA,EACT;AAEA,mBAAiB;AAAA,IACf,GAAG,eAAe,IAAI,oBAAoB;AAAA,IAC1C,GAAG,eAAe,IAAI,oBAAoB;AAAA,EAC5C;AAEA,mBAAiB,eAAe,WAAW,cAAc;AAEzD,MAAI,mBAAmB,gBAAgB;AAGrC,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAEA,SAAS,QAAQ,SAAS,SAAS;AACjC,SAAO,oBAAoB,SAAS,OAAO,KAAK,kBAAkB,SAAS,OAAO;AACpF;AAEA,SAAS,oBAAoB,SAAS,SAAS;AAC7C,SAAO,QAAQ,UAAU,QAAQ,SAAS,QAAQ,SAAS,QAAQ;AACrE;AAEA,SAAS,kBAAkB,SAAS,SAAS;AAC3C,SAAO,QAAQ,QAAQ,QAAQ,OAAO,QAAQ,WAAW,QAAQ;AACnE;;;ACxHO,SAAS,uBAAuB,YAAY,OAAO,WAAW;AAEnE,MAAI,YAAY,iBAAiB,UAAU,GACvC,2BAA2B,yBAAyB,WAAW,KAAK,GACpE,YAAY,UAAU,CAAC;AAG3B,MAAI,yBAAyB,QAAQ;AACnC,WAAO,yBAA0B,yBAAyB,SAAS,CAAE;AAAA,EACvE;AAEA,SAAO,kBAAkB,UAAU,YAAY,WAAW,WAAW,KAAK;AAC5E;AAGO,SAAS,uBAAuB,YAAY,OAAO,WAAW;AAEnE,MAAI,YAAY,iBAAiB,UAAU,GACvC,2BAA2B,yBAAyB,WAAW,KAAK,GACpE,YAAY,UAAU,UAAU,SAAS,CAAC;AAG9C,MAAI,yBAAyB,QAAQ;AACnC,WAAO,yBAA0B,CAAE;AAAA,EACrC;AAEA,SAAO,kBAAkB,UAAU,YAAY,WAAW,WAAW,KAAK;AAC5E;AAGO,SAAS,qBAAqB,YAAY,QAAQ,WAAW;AAElE,MAAI,YAAY,iBAAiB,UAAU,GACvC,YAAY,SAAS,QAAQ,SAAS,GACtC,YAAY,UAAW,CAAE;AAE7B,SAAO,kBAAkB,UAAU,YAAY,WAAW,WAAW,MAAM;AAC7E;AAGO,SAAS,qBAAqB,YAAY,QAAQ,WAAW;AAElE,MAAI,YAAY,iBAAiB,UAAU,GACvC,YAAY,SAAS,QAAQ,SAAS,GACtC,YAAY,UAAW,UAAU,SAAS,CAAE;AAEhD,SAAO,kBAAkB,UAAU,YAAY,WAAW,WAAW,MAAM;AAC7E;AAKA,SAAS,SAAS,QAAQC,QAAO;AAC/B,SAAO;AAAA,IACL,GAAG,OAAO,IAAIA,OAAM;AAAA,IACpB,GAAG,OAAO,IAAIA,OAAM;AAAA,IACpB,OAAO,OAAO;AAAA,IACd,QAAQ,OAAO;AAAA,EACjB;AACF;AAUA,SAAS,iBAAiB,YAAY;AAEpC,MAAI,YAAY,WAAW;AAE3B,MAAI,CAAC,UAAU,QAAQ;AACrB,UAAM,IAAI,MAAM,gBAAgB,WAAW,KAAK,gBAAgB;AAAA,EAClE;AAEA,SAAO;AACT;AAEA,SAAS,yBAAyB,WAAW,QAAQ;AACnD,MAAI,oBAAoB,IAAI,WAAW,WAAW;AAElD,SAAO,OAAO,mBAAmB,SAAS,UAAU;AAClD,WAAO,eAAe,UAAU,MAAM;AAAA,EACxC,CAAC;AACH;AAQA,SAAS,eAAe,OAAO,QAAQ;AACrC,SAAO,eAAe,QAAQ,OAAO,CAAC,MAAM;AAC9C;AAEA,SAAS,YAAY,OAAO;AAC1B,SAAO,MAAM,YAAY;AAC3B;;;ACjHe,SAAR,cAA+B;AAKpC,OAAK,YAAY,CAAC;AAKlB,OAAK,iBAAiB,CAAC;AAKvB,OAAK,mBAAmB,CAAC;AAKzB,OAAK,sBAAsB,CAAC;AAK5B,OAAK,WAAW,CAAC;AACnB;AAQA,YAAY,UAAU,MAAM,SAAS,SAAS,YAAY;AACxD,SAAO,KAAK,OAAO,CAAE,OAAQ,GAAG,UAAU;AAC5C;AAQA,YAAY,UAAU,SAAS,SAAS,UAAU,YAAY;AAE5D,MAAI,aAAa,WAAW,UAAU,CAAC,CAAC,YAAY,IAAI;AAExD,SAAO,MAAM,UAAU;AAEvB,SAAO;AACT;;;ACvCe,SAAR,WAA4B,UAAU;AAC3C,OAAK,YAAY;AACnB;AAgBA,WAAW,UAAU,gBAAgB,SAAS,UAAUC,QAAO,WAAW;AACxE,MAAI,CAAC,UAAU;AACb,WAAO,CAAC;AAAA,EACV,OAAO;AACL,WAAO,KAAK,YAAY,KAAK,WAAW,QAAQ,GAAGA,QAAO,SAAS;AAAA,EACrE;AACF;AAUA,WAAW,UAAU,cAAc,SAAS,SAASA,QAAO,WAAW,SAAS,cAAc;AAC5F,MAAI,WAAW,KAAK;AAEpB,MAAI,YAAY,QAAQ,WACpB,iBAAiB,QAAQ,gBACzB,sBAAsB,QAAQ,qBAC9B,WAAW,QAAQ,UACnB,aAAa;AAEjB,MAAI,gBAAgB,aAAa,WAAW,WAAW;AACrD,iBAAa;AAAA,EACf;AAGA,UAAQ,WAAW,SAAS,OAAO;AAGjC,aAAS,UAAU,OAAOA,QAAO,SAAS,MAAM,EAAE,KAAK,CAAC,cAAc,WAAW;AAAA,MAC/E,SAAS;AAAA,MACT,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,CAAC;AAGD,UAAQ,gBAAgB,SAAS,GAAG;AAElC,QAAI,cAAc,CAAC,CAAC,UAAU,EAAE,OAAO,EAAE,GACrC,cAAc,CAAC,CAAC,UAAU,EAAE,OAAO,EAAE;AAEzC,QAAI,oBAAoB,EAAE,EAAE,KAAK,eAAe,aAAa;AAC3D,eAAS,eAAe,GAAGA,QAAO,SAAS,EAAE,EAAE,KAAK,CAAC,cAAc,SAAS;AAAA,IAC9E,OAAO;AACL,eAAS,iBAAiB,GAAG;AAAA,QAC3B,iBAAiB,eAAe,qBAAqB,GAAG,EAAE,QAAQA,MAAK;AAAA,QACvE,eAAe,eAAe,qBAAqB,GAAG,EAAE,QAAQA,MAAK;AAAA,MACvE,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACH;AASA,WAAW,UAAU,aAAa,SAAS,UAAU;AACnD,SAAO,IAAI,YAAY,EAAE,OAAO,UAAU,IAAI;AAChD;;;AClGe,SAAR,oBAAqC,UAAU;AACpD,OAAK,UAAU,IAAI,WAAW,QAAQ;AACxC;AAEA,oBAAoB,UAAU,CAAE,UAAW;AAE3C,oBAAoB,UAAU,aAAa,SAAS,SAAS;AAC3D,UAAQ,UAAU,KAAK,QAAQ,WAAW,QAAQ,MAAM;AAC1D;AAEA,oBAAoB,UAAU,cAAc,SAAS,SAAS;AAE5D,MAAI,QAAQ,QAAQ,OAChB;AAEJ,MAAI,SAAS,MAAM,cAAc;AAC/B,mBAAe,MAAM;AACrB,UAAM,YAAY,aAAa;AAAA,EACjC;AAEA,OAAK,QAAQ;AAAA,IACX,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR;AAAA,EACF;AACF;;;ACXe,SAAR,iBAAkC,UAAU;AACjD,OAAK,YAAY;AAEjB,OAAK,UAAU,IAAI,WAAW,QAAQ;AACxC;AAEA,iBAAiB,UAAU,CAAE,UAAW;AAGxC,iBAAiB,UAAU,UAAU,SAAS,SAAS;AAErD,MAAI,QAAQ,QAAQ,OAChBC,SAAQ,QAAQ,OAChB,YAAY,QAAQ,aAAa,MAAM,QACvC,iBAAiB,QAAQ,gBACzB,YAAY,MAAM;AAEtB,UAAQ,YAAY,KAAK,OAAO,CAAE,KAAK,KAAK,SAAS,QAAS,CAAC;AAG/D,UAAQ,YAAY;AACpB,UAAQ,iBAAiB,OAAiB,UAAU,UAAU,KAAK;AAGnE,MAAc,UAAU,UAAU,OAAO,cAAc;AAGvD,SAAO,OAAO;AAAA,IACZ,QAAQ;AAAA,IACR,GAAG,MAAM,IAAIA,OAAM;AAAA,IACnB,GAAG,MAAM,IAAIA,OAAM;AAAA,EACrB,CAAC;AAED,SAAO;AACT;AAEA,iBAAiB,UAAU,cAAc,SAAS,SAAS;AAEzD,MAAI,QAAQ,QAAQ,OAChBA,SAAQ,QAAQ,OAChB,QAAQ,QAAQ;AAEpB,MAAI,WAAW,KAAK;AAEpB,MAAI,MAAM,WAAW,OAAO;AAE1B,YAAQ,MAAM,UAAU,SAAS,GAAG;AAClC,eAAS,iBAAiB,GAAG;AAAA,QAC3B,eAAe,qBAAqB,GAAG,OAAOA,MAAK;AAAA,MACrD,CAAC;AAAA,IACH,CAAC;AAED,YAAQ,MAAM,UAAU,SAAS,GAAG;AAClC,eAAS,iBAAiB,GAAG;AAAA,QAC3B,iBAAiB,qBAAqB,GAAG,OAAOA,MAAK;AAAA,MACvD,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAEA,MAAI,MAAM,YAAY,OAAO;AAC3B,SAAK,aAAa,OAAO;AAAA,EAC3B;AACF;AAEA,iBAAiB,UAAU,SAAS,SAAS,SAAS;AAEpD,MAAI,QAAQ,QAAQ,OAChB,YAAY,QAAQ,WACpB,iBAAiB,QAAQ,gBACzBA,SAAQ,QAAQ;AAGpB,MAAc,UAAU,UAAU,OAAO,cAAc;AAGvD,SAAO,OAAO;AAAA,IACZ,QAAQ;AAAA,IACR,GAAG,MAAM,IAAIA,OAAM;AAAA,IACnB,GAAG,MAAM,IAAIA,OAAM;AAAA,EACrB,CAAC;AAED,SAAO;AACT;AAEA,iBAAiB,UAAU,eAAe,SAAS,SAAS;AAE1D,MAAIA,SAAQ,QAAQ,OAChB,QAAQ,QAAQ;AAEpB,OAAK,QAAQ,cAAc,MAAM,UAAUA,QAAO,IAAI;AACxD;AAEA,iBAAiB,UAAU,eAAe,SAAS,SAAS;AAC1D,SAAO,QAAQ,aAAa,QAAQ,MAAM;AAC5C;;;AC9Ge,SAAR,2BAA4C,UAAU;AAC3D,OAAK,YAAY;AACnB;AAEA,2BAA2B,UAAU,CAAE,UAAW;AAElD,2BAA2B,UAAU,UAAU,SAAS,SAAS;AAC/D,MAAI,YAAY,QAAQ,WACpB,YAAY,QAAQ,WACpB,aAAa,QAAQ,YACrB,kBAAkB,QAAQ;AAE9B,MAAI,CAAC,aAAa,CAAC,WAAW;AAC5B,UAAM,IAAI,MAAM,iCAAiC;AAAA,EACnD;AAEA,MAAI,QAAQ,eAAe,GAAG;AAC5B,YAAQ,eAAe,WAAW;AAClC,eAAW,YAAY;AAAA,EACzB;AAEA,MAAI,WAAW;AACb,YAAQ,YAAY,WAAW;AAC/B,eAAW,SAAS;AAAA,EACtB;AAEA,MAAI,WAAW;AACb,YAAQ,YAAY,WAAW;AAC/B,eAAW,SAAS;AAAA,EACtB;AAEA,SAAO;AACT;AAEA,2BAA2B,UAAU,cAAc,SAAS,SAAS;AACnE,MAAI,aAAa,QAAQ,YACrB,YAAY,QAAQ,WACpB,YAAY,QAAQ,WACpB,kBAAkB,QAAQ,iBAC1B,QAAQ,QAAQ,SAAS,CAAC;AAE9B,MAAI,wBAAwB,CAAC;AAE7B,MAAI,MAAM,iBAAiB;AACzB,0BAAsB,kBAAkB,MAAM;AAAA,EAChD;AAEA,MAAI,MAAM,eAAe;AACvB,0BAAsB,gBAAgB,MAAM;AAAA,EAC9C;AAEA,MAAI,MAAM,qBAAqB,OAAO;AACpC;AAAA,EACF;AAEA,MAAI,cAAc,CAAC,aAAa,MAAM,YAAY,WAAW;AAC3D,0BAAsB,kBAAkB,sBAAsB,mBACzD,WAAW,QAAQ,eAAe,IAAI,gBAAiB,CAAE,IAAI,eAAe;AAAA,EACnF;AAEA,MAAI,cAAc,CAAC,aAAa,MAAM,YAAY,WAAW;AAC3D,0BAAsB,gBAAgB,sBAAsB,iBACvD,WAAW,QAAQ,eAAe,IAAI,gBAAiB,gBAAgB,SAAS,CAAE,IAAI,eAAe;AAAA,EAC5G;AAEA,MAAI,MAAM,cAAc;AACtB,0BAAsB,YAAY,MAAM;AAAA,EAC1C;AAEA,OAAK,UAAU,iBAAiB,YAAY,qBAAqB;AACnE;AAEA,2BAA2B,UAAU,SAAS,SAAS,SAAS;AAC9D,MAAI,YAAY,QAAQ,WACpB,YAAY,QAAQ,WACpB,eAAe,QAAQ,cACvB,aAAa,QAAQ;AAEzB,MAAI,WAAW;AACb,eAAW,SAAS;AAAA,EACtB;AAEA,MAAI,WAAW;AACb,eAAW,SAAS;AAAA,EACtB;AAEA,MAAI,cAAc;AAChB,eAAW,YAAY;AAAA,EACzB;AAEA,SAAO;AACT;AAMA,SAAS,WAAW,OAAO;AACzB,SAAO,MAAM,YAAY;AAC3B;;;ACtFe,SAAR,oBAAqC,UAAU,OAAO;AAC3D,OAAK,YAAY;AACjB,OAAK,SAAS;AAChB;AAEA,oBAAoB,UAAU,CAAE,YAAY,OAAQ;AAcpD,oBAAoB,UAAU,aAAa,SAAS,SAAS;AAC3D,MAAI,OAAO,MACP,WAAW,KAAK,WAChB,QAAQ,KAAK;AAEjB,MAAI,WAAW,QAAQ,UACnB,UAAU,QAAQ,SAClB,QAAQ,QAAQ,SAAS,CAAC,GAC1B;AAEJ,WAAS,aAAa,QAAQ,QAAQ,YAAY;AAChD,WAAO,MAAM,QAAQ,wBAAwB;AAAA,MAC3C;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAGA,MAAI,WAAW;AAAA,IACb,GAAG,QAAQ;AAAA,IACX,GAAG,QAAQ;AAAA,EACb;AAEA,MAAI,YAAY;AAAA,IACd,GAAG,SAAS;AAAA,IACZ,GAAG,SAAS;AAAA,IACZ,OAAO,SAAS;AAAA,IAChB,QAAQ,SAAS;AAAA,EACnB;AAEA,aAAW,QAAQ,WACjB,QAAQ,YACR,KAAK,YAAY,SAAS,UAAU,SAAS,QAAQ,KAAK;AAG5D,MAAI,SAAS,MAAM;AACjB,aAAS,iBAAiB,UAAU,SAAS,IAAI;AAAA,EACnD;AAGA,MAAI;AAEJ,MAAI,MAAM,iBAAiB,OAAO;AAChC,eAAW,SAAS,SAAS,MAAM;AAEnC,aAAS,aAAa,UAAU,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,UAAU,KAAK;AAAA,EACjE;AAGA,MAAI,WAAW,SAAS,SAAS,MAAM,GACnC,WAAW,SAAS,SAAS,MAAM;AAEvC,UAAQ,UAAU,SAAS,YAAY;AACrC,QAAI,SAAS,WAAW,QACpB,UAAU,aAAa,QAAQ,UAAU,UAAU;AAEvD,QAAI,SAAS;AACX,WAAK;AAAA,QACH;AAAA,QAAY;AAAA,QACZ,uBAAuB,YAAY,UAAU,SAAS;AAAA,QACtD;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,UAAQ,UAAU,SAAS,YAAY;AACrC,QAAI,SAAS,WAAW,QACpB,UAAU,aAAa,UAAU,QAAQ,UAAU;AAEvD,QAAI,SAAS;AACX,WAAK;AAAA,QACH;AAAA,QAAY;AAAA,QACZ,uBAAuB,YAAY,UAAU,SAAS;AAAA,QACtD;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAMA,oBAAoB,UAAU,cAAc,SAAS,SAAS;AAC5D,MAAI,WAAW,QAAQ;AAEvB,OAAK,UAAU,YAAY,QAAQ;AACrC;AAGA,oBAAoB,UAAU,UAAU,SAAS,SAAS;AAAC;AAG3D,oBAAoB,UAAU,SAAS,SAAS,SAAS;AAAC;AAG1D,oBAAoB,UAAU,cAAc,SAAS,OAAO,UAAU,QAAQ,OAAO;AACnF,SAAO,KAAK,UAAU,YAAY,OAAO,UAAU,QAAQ,KAAK;AAClE;AAGA,oBAAoB,UAAU,iBAAiB,SAAS,YAAY,WAAW,cAAc,OAAO;AAClG,OAAK,UAAU,eAAe,YAAY,WAAW,cAAc,KAAK;AAC1E;AAGA,oBAAoB,UAAU,eAAe,SAAS,YAAY,WAAW,cAAc,OAAO;AAChG,OAAK,UAAU,aAAa,YAAY,WAAW,cAAc,KAAK;AACxE;;;ACrIe,SAAR,mBAAoC,UAAU;AACnD,OAAK,YAAY;AACnB;AAEA,mBAAmB,UAAU,CAAE,UAAW;AAc1C,mBAAmB,UAAU,UAAU,SAAS,SAAS;AACvD,MAAI,QAAQ,QAAQ,OAChB,YAAY,QAAQ,WACpB,YAAY,QAAQ;AAExB,MAAI,UAAU,MAAM,UAAa,UAAU,MAAM,UAC7C,UAAU,UAAU,UAAa,UAAU,WAAW,QAAW;AACnE,UAAM,IAAI,MAAM,sDAAsD;AAAA,EACxE;AAEA,MAAI,cAAc,UAAU,QAAQ,UAAU,SACzC,UAAU,SAAS,UAAU,SAAS;AACzC,UAAM,IAAI,MAAM,+DAA+D;AAAA,EACjF,WAAW,CAAC,aACP,UAAU,QAAQ,MAAM,UAAU,SAAS,IAAI;AAClD,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC7D;AAGA,UAAQ,YAAY;AAAA,IAClB,OAAQ,MAAM;AAAA,IACd,QAAQ,MAAM;AAAA,IACd,GAAQ,MAAM;AAAA,IACd,GAAQ,MAAM;AAAA,EAChB;AAGA,SAAO,OAAO;AAAA,IACZ,OAAQ,UAAU;AAAA,IAClB,QAAQ,UAAU;AAAA,IAClB,GAAQ,UAAU;AAAA,IAClB,GAAQ,UAAU;AAAA,EACpB,CAAC;AAED,SAAO;AACT;AAEA,mBAAmB,UAAU,cAAc,SAAS,SAAS;AAC3D,MAAI,WAAW,KAAK;AAEpB,MAAI,QAAQ,QAAQ,OAChB,YAAY,QAAQ,WACpB,QAAQ,QAAQ,SAAS,CAAC;AAE9B,MAAI,MAAM,WAAW,OAAO;AAC1B;AAAA,EACF;AAEA,UAAQ,MAAM,UAAU,SAAS,GAAG;AAClC,aAAS,iBAAiB,GAAG;AAAA,MAC3B,eAAe,uBAAuB,GAAG,OAAO,SAAS;AAAA,IAC3D,CAAC;AAAA,EACH,CAAC;AAED,UAAQ,MAAM,UAAU,SAAS,GAAG;AAClC,aAAS,iBAAiB,GAAG;AAAA,MAC3B,iBAAiB,uBAAuB,GAAG,OAAO,SAAS;AAAA,IAC7D,CAAC;AAAA,EACH,CAAC;AAEH;AAEA,mBAAmB,UAAU,SAAS,SAAS,SAAS;AAEtD,MAAI,QAAQ,QAAQ,OAChB,YAAY,QAAQ;AAGxB,SAAO,OAAO;AAAA,IACZ,OAAQ,UAAU;AAAA,IAClB,QAAQ,UAAU;AAAA,IAClB,GAAQ,UAAU;AAAA,IAClB,GAAQ,UAAU;AAAA,EACpB,CAAC;AAED,SAAO;AACT;;;AC7FO,SAAS,aAAa,MAAMC,QAAO;AAExC,MAAI,SAAS,KAAK;AAChB,QAAIA,SAAQ,GAAG;AACb,aAAO;AAAA,IACT;AAEA,QAAIA,SAAQ,GAAG;AACb,aAAO;AAAA,IACT;AAAA,EACF;AAEA,MAAI,SAAS,KAAK;AAChB,QAAIA,SAAQ,GAAG;AACb,aAAO;AAAA,IACT;AAEA,QAAIA,SAAQ,GAAG;AACb,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AACT;AAWO,SAAS,gCAAgC,cAAc,gBAAgB;AAC5E,MAAI,+BAA+B,CAAC;AAEpC,UAAQ,aAAa,OAAO,cAAc,GAAG,SAAS,OAAO;AAC3D,QAAI,WAAW,MAAM,UACjB,WAAW,MAAM;AAErB,YAAQ,SAAS,OAAO,QAAQ,GAAG,SAAS,YAAY;AACtD,UAAI,SAAS,WAAW,QACpB,SAAS,WAAW;AAExB,UAAI,SAAS,cAAc,MAAM,KAC/B,SAAS,cAAc,MAAM,KAC7B,SAAS,gBAAgB,MAAM,KAC/B,SAAS,gBAAgB,MAAM,GAAG;AAElC,YAAI,CAAC,SAAS,8BAA8B,UAAU,GAAG;AACvD,uCAA6B,KAAK,UAAU;AAAA,QAC9C;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AACT;AAEA,SAAS,SAAS,OAAO,MAAM;AAC7B,SAAO,MAAM,QAAQ,IAAI,MAAM;AACjC;AAWO,SAAS,aAAa,QAAQ,WAAWA,QAAO;AACrD,MAAI,IAAI,OAAO,GACX,IAAI,OAAO,GACX,QAAQ,OAAO,OACf,SAAS,OAAO,QAChB,KAAKA,OAAM,GACX,KAAKA,OAAM;AAEf,UAAQ,WAAW;AAAA,IACnB,KAAK;AACH,aAAO;AAAA,QACL;AAAA,QACA,GAAG,IAAI;AAAA,QACP;AAAA,QACA,QAAQ,SAAS;AAAA,MACnB;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ,SAAS;AAAA,MACnB;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP;AAAA,QACA,OAAO,QAAQ;AAAA,QACf;AAAA,MACF;AAAA,IACF,KAAK;AACH,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA,OAAO,QAAQ;AAAA,QACf;AAAA,MACF;AAAA,IACF;AACE,YAAM,IAAI,MAAM,wBAAwB,SAAS;AAAA,EACnD;AACF;;;AC1Ge,SAAR,iBAAkC,UAAU;AACjD,OAAK,YAAY;AACnB;AAEA,iBAAiB,UAAU,CAAE,UAAW;AAExC,iBAAiB,UAAU,aAAa,SAAS,SAAS;AACxD,MAAIC,SAAQ,QAAQ,OAChB,YAAY,QAAQ,WACpB,eAAe,QAAQ,cACvB,iBAAiB,QAAQ,gBACzB,QAAQ,QAAQ,OAChB,YAAY,CAAC;AAGjB,OAAK,WAAW,cAAcA,MAAK;AAGnC,UAAQ,gBAAgB,SAAS,OAAO;AACtC,cAAU,MAAM,EAAE,IAAI,UAAU,KAAK;AAAA,EACvC,CAAC;AAGD,OAAK,aAAa,gBAAgBA,QAAO,SAAS;AAGlD,OAAK;AAAA,IACH,gCAAgC,cAAc,cAAc;AAAA,IAC5DA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEA,iBAAiB,UAAU,UAAU,WAAW;AAAC;AACjD,iBAAiB,UAAU,SAAS,WAAW;AAAC;AAEhD,iBAAiB,UAAU,aAAa,SAAS,QAAQA,QAAO;AAC9D,MAAI,OAAO;AAEX,UAAQ,QAAQ,SAAS,SAAS;AAChC,SAAK,UAAU,UAAU,SAASA,QAAO,MAAM;AAAA,MAC7C,YAAY;AAAA,MACZ,QAAQ;AAAA,MACR,SAAS;AAAA,IACX,CAAC;AAAA,EACH,CAAC;AACH;AAEA,iBAAiB,UAAU,eAAe,SAAS,QAAQA,QAAO,WAAW;AAC3E,MAAI,OAAO;AAEX,UAAQ,QAAQ,SAAS,OAAO;AAC9B,QAAI,YAAY,aAAa,OAAO,WAAWA,MAAK;AAEpD,SAAK,UAAU,YAAY,OAAO,WAAW,MAAM;AAAA,MACjD,eAAe;AAAA,MACf,YAAY;AAAA,MACZ,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,CAAC;AACH;AAOA,iBAAiB,UAAU,4BAA4B,SACnD,aACAA,QACA,WACA,OACA,cACA,gBACA,WACF;AACA,MAAI,OAAO,MACP,iBAAiB,aAAa,OAAO,cAAc;AAEvD,UAAQ,aAAa,SAAS,YAAY;AACxC,QAAI,SAAS,WAAW,QACpB,SAAS,WAAW,QACpB,YAAY,cAAc,UAAU,GACpC,OAAO,qBAAqB,SAAS,GACrC,cAAc,CAAC;AAEnB,QAAIC,UAAS,gBAAgB,MAAM,KAAKA,UAAS,gBAAgB,MAAM,GAAG;AAGxE,kBAAY,IAAI,WAAW,SAAS,UAAU;AAC5C,YAAI,mBAAmB,UAAU,OAAO,SAAS,GAAG;AAGlD,mBAAU,IAAK,IAAI,SAAU,IAAK,IAAID,OAAO,IAAK;AAAA,QACpD;AAEA,YAAI,SAAS,YAAY,mBAAmB,SAAS,UAAU,OAAO,SAAS,GAAG;AAGhF,mBAAS,SAAU,IAAK,IAAI,SAAS,SAAU,IAAK,IAAIA,OAAO,IAAK;AAAA,QACtE;AAEA,eAAO;AAAA,MACT,CAAC;AAED,WAAK,UAAU,gBAAgB,YAAY,WAAW;AAAA,QACpD,eAAe;AAAA,MACjB,CAAC;AAAA,IACH,WAAWC,UAAS,gBAAgB,MAAM,KAAKA,UAAS,gBAAgB,MAAM,GAAG;AAG/E,UAAIA,UAAS,cAAc,MAAM,GAAG;AAClC,oBAAY,kBAAkB,qBAAqB,YAAY,QAAQD,MAAK;AAAA,MAC9E,WAAWC,UAAS,cAAc,MAAM,GAAG;AACzC,oBAAY,gBAAgB,qBAAqB,YAAY,QAAQD,MAAK;AAAA,MAC5E,WAAWC,UAAS,gBAAgB,MAAM,GAAG;AAC3C,oBAAY,kBAAkB;AAAA,UAC5B;AAAA,UAAY;AAAA,UAAQ,UAAU,OAAO,EAAE;AAAA,QACzC;AAAA,MACF,WAAWA,UAAS,gBAAgB,MAAM,GAAG;AAC3C,oBAAY,gBAAgB;AAAA,UAC1B;AAAA,UAAY;AAAA,UAAQ,UAAU,OAAO,EAAE;AAAA,QACzC;AAAA,MACF;AAEA,WAAK,UAAU,iBAAiB,YAAY,WAAW;AAAA,IACzD;AAAA,EACF,CAAC;AACH;AAKA,SAAS,aAAa,UAAU;AAC9B,SAAO,OAAO,CAAC,GAAG,QAAQ;AAC5B;AAEA,SAAS,cAAc,YAAY;AACjC,SAAO,IAAI,WAAW,WAAW,SAAS,UAAU;AAElD,eAAW,aAAa,QAAQ;AAEhC,QAAI,SAAS,UAAU;AACrB,eAAS,WAAW,aAAa,SAAS,QAAQ;AAAA,IACpD;AAEA,WAAO;AAAA,EACT,CAAC;AACH;AAEA,SAAS,qBAAqB,WAAW;AACvC,UAAQ,WAAW;AAAA,IACnB,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,EACT;AACF;AAEA,SAAS,mBAAmB,UAAU,OAAO,WAAW;AACtD,MAAI,eAAe,qBAAqB,SAAS;AAEjD,MAAI,MAAM,KAAK,SAAS,GAAG;AACzB,WAAO,SAAU,YAAa,IAAI;AAAA,EACpC,WAAW,MAAM,KAAK,SAAS,GAAG;AAChC,WAAO,SAAU,YAAa,IAAI;AAAA,EACpC;AACF;AAEA,SAASA,UAAS,OAAO,MAAM;AAC7B,SAAO,MAAM,QAAQ,IAAI,MAAM;AACjC;AAEA,SAAS,UAAU,OAAO;AACxB,SAAO;AAAA,IACL,GAAG,MAAM;AAAA,IACT,GAAG,MAAM;AAAA,IACT,QAAQ,MAAM;AAAA,IACd,OAAO,MAAM;AAAA,EACf;AACF;;;ACtMe,SAAR,2BAA4C,UAAU;AAC3D,OAAK,YAAY;AACnB;AAEA,2BAA2B,UAAU,CAAE,UAAW;AAGlD,2BAA2B,UAAU,UAAU,SAAS,SAAS;AAE/D,MAAI,QAAQ,QAAQ,OAChB,WAAW,MAAM;AAGrB,UAAQ,wBAAwB,+BAA+B,QAAQ;AAGvE,QAAM,YAAY,CAAC,MAAM;AAGzB,MAAI,SAAS,mBAAmB,UAAU,MAAM,SAAS;AAEzD,SAAO,CAAE,KAAM,EAAE,OAAO,MAAM;AAChC;AAGA,2BAA2B,UAAU,SAAS,SAAS,SAAS;AAE9D,MAAI,QAAQ,QAAQ,OAChB,wBAAwB,QAAQ;AAEpC,MAAI,WAAW,MAAM;AAGrB,MAAI,SAAS,2BAA2B,UAAU,qBAAqB;AAGvE,QAAM,YAAY,CAAC,MAAM;AAEzB,SAAO,CAAE,KAAM,EAAE,OAAO,MAAM;AAChC;AAYA,SAAS,+BAA+B,UAAU;AAEhD,MAAI,SAAS,CAAC;AAEd,UAAQ,UAAU,SAAS,SAAS;AAClC,WAAO,QAAQ,EAAE,IAAI,QAAQ;AAE7B,QAAI,QAAQ,UAAU;AACpB,eAAS,OAAO,CAAC,GAAG,QAAQ,+BAA+B,QAAQ,QAAQ,CAAC;AAAA,IAC9E;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAGA,SAAS,mBAAmB,UAAU,WAAW;AAC/C,MAAI,SAAS,CAAC;AACd,UAAQ,UAAU,SAAS,SAAS;AAClC,YAAQ,SAAS;AAEjB,aAAS,OAAO,OAAO,OAAO;AAE9B,QAAI,QAAQ,UAAU;AACpB,eAAS,OAAO,OAAO,mBAAmB,QAAQ,UAAU,QAAQ,aAAa,SAAS,CAAC;AAAA,IAC7F;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEA,SAAS,2BAA2B,UAAU,WAAW;AACvD,MAAI,SAAS,CAAC;AACd,UAAQ,UAAU,SAAS,SAAS;AAClC,YAAQ,SAAS,UAAU,QAAQ,EAAE;AAErC,aAAS,OAAO,OAAO,OAAO;AAE9B,QAAI,QAAQ,UAAU;AACpB,eAAS,OAAO,OAAO,2BAA2B,QAAQ,UAAU,SAAS,CAAC;AAAA,IAChF;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;AClGe,SAAR,wBAAyC,UAAU;AACxD,OAAK,YAAY;AACnB;AAEA,wBAAwB,UAAU,CAAE,UAAW;AAG/C,wBAAwB,UAAU,UAAU,SAAS,SAAS;AAC5D,MAAI,QAAQ,QAAQ,OAChB,UAAU,QAAQ,SAClB,UAAU,MAAM;AAGpB,UAAQ,UAAU;AAClB,UAAQ,cAAc,eAAe,SAAS,KAAK;AAGnD,cAAY,SAAS,KAAK;AAG1B,QAAM,OAAO;AAEb,SAAO;AACT;AAEA,wBAAwB,UAAU,SAAS,SAAS,SAAS;AAC3D,MAAI,QAAQ,QAAQ,OAChB,UAAU,QAAQ,SAClB,UAAU,QAAQ,SAClB,cAAc,QAAQ;AAG1B,QAAM,OAAO;AAGb,iBAAe,SAAS,KAAK;AAG7B,cAAY,SAAS,OAAO,WAAW;AAEvC,SAAO;AACT;AAGA,SAAS,eAAe,MAAM,UAAU;AAGtC,SAAO,OAAiB,QAAQ,KAAK,WAAW,QAAQ;AAC1D;AAEA,SAAS,YAAY,MAAM,UAAU,KAAK;AAExC,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEA,MAAI,YAAY,KAAK;AAErB,MAAI,CAAC,WAAW;AACd,SAAK,YAAY,YAAY,CAAC;AAAA,EAChC;AAEA,MAAc,WAAW,UAAU,GAAG;AACxC;;;AC7Ee,SAAR,yBAA0C;AAAE;AAEnD,uBAAuB,UAAU,UAAU,SAAS,SAAS;AAE3D,MAAI,aAAa,QAAQ,YACrB,eAAe,QAAQ;AAE3B,UAAQ,eAAe,WAAW;AAElC,aAAW,YAAY;AAEvB,SAAO;AACT;AAEA,uBAAuB,UAAU,SAAS,SAAS,SAAS;AAE1D,MAAI,aAAa,QAAQ,YACrB,eAAe,QAAQ;AAE3B,aAAW,YAAY;AAEvB,SAAO;AACT;;;AC6Ee,SAAR,SAA0B,UAAU,gBAAgB,cAAc;AACvE,OAAK,YAAY;AACjB,OAAK,kBAAkB;AACvB,OAAK,gBAAgB;AAErB,MAAI,OAAO;AAEX,WAAS,GAAG,gBAAgB,WAAW;AAGrC,SAAK,iBAAiB,YAAY;AAAA,EACpC,CAAC;AACH;AAEA,SAAS,UAAU,CAAE,YAAY,kBAAkB,cAAe;AAOlE,SAAS,UAAU,cAAc,WAAW;AAC1C,SAAO;AAAA,IACL,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,cAAc;AAAA,IACd,gBAAgB;AAAA,IAChB,iBAAiB;AAAA,IACjB,wBAAwB;AAAA,IAExB,aAAa;AAAA,IAEb,gBAAgB;AAAA,IAEhB,qBAAqB;AAAA,IACrB,qBAAqB;AAAA,IACrB,mBAAmB;AAAA,IACnB,qBAAqB;AAAA,IAErB,8BAA8B;AAAA,IAE9B,wBAAwB;AAAA,IAExB,mBAAmB;AAAA,IACnB,iBAAiB;AAAA,IACjB,mBAAmB;AAAA,IAEnB,uBAAuB;AAAA,IACvB,kBAAkB;AAAA,IAElB,4BAA4B;AAAA,EAC9B;AACF;AAOA,SAAS,UAAU,mBAAmB,SAAS,cAAc;AAC3D,UAAQ,KAAK,YAAY,GAAG,SAAS,SAAS,IAAI;AAChD,iBAAa,gBAAgB,IAAI,OAAO;AAAA,EAC1C,CAAC;AACH;AAYA,SAAS,UAAU,YAAY,SAAS,OAAOC,QAAO,WAAW,gBAAgB,OAAO;AAEtF,MAAI,OAAO,mBAAmB,UAAU;AACtC,YAAQ;AACR,qBAAiB;AAAA,EACnB;AAEA,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,OAAQA;AAAA,IACR;AAAA,IACA;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,cAAc,OAAO;AAClD;AASA,SAAS,UAAU,mBAAmB,SAAS,OAAO,SAAS;AAC7D,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,4BAA4B,OAAO;AAChE;AAWA,SAAS,UAAU,eAAe,SAAS,QAAQA,QAAO,QAAQ,OAAO;AAEvE,UAAQ,SAAS,CAAC;AAElB,MAAI,SAAS,MAAM;AAEnB,MAAI,YAAY,QACZ;AAEJ,MAAI,WAAW,MAAM;AACnB,cAAU;AACV,gBAAY,OAAO;AAAA,EACrB,WAAW,WAAW,OAAO;AAC3B,cAAU;AAAA,EACZ;AAEA,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,OAAOA;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,iBAAiB,OAAO;AACrD;AAWA,SAAS,UAAU,iBAAiB,SAAS,YAAYA,QAAO,WAAW,gBAAgB,OAAO;AAEhG,MAAI,OAAO,mBAAmB,UAAU;AACtC,YAAQ;AACR,qBAAiB;AAAA,EACnB;AAEA,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,OAAOA;AAAA,IACP;AAAA,IACA;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,mBAAmB,OAAO;AACvD;AAQA,SAAS,UAAU,mBAAmB,SAAS,YAAY,OAAO;AAChE,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,qBAAqB,OAAO;AACzD;AA4BA,SAAS,UAAU,mBAAmB,SAAS,QAAQ,QAAQ,aAAa,YAAY,QAAQ,OAAO;AAErG,MAAI,OAAO,gBAAgB,UAAU;AACnC,YAAQ;AACR,aAAS;AACT,iBAAa;AACb,kBAAc;AAAA,EAChB;AAEA,eAAa,KAAK,QAAQ,cAAc,UAAU;AAElD,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,qBAAqB,OAAO;AAEvD,SAAO,QAAQ;AACjB;AA2BA,SAAS,UAAU,cAAc,SAAS,OAAO,UAAU,QAAQ,aAAa,OAAO;AAErF,MAAI,OAAO,gBAAgB,UAAU;AACnC,YAAQ;AACR,kBAAc;AAAA,EAChB;AAEA,UAAQ,SAAS,CAAC;AAElB,MAAI,SAAS,MAAM,QACf,QACA;AAEJ,UAAQ,KAAK,QAAQ,SAAS,KAAK;AAEnC,MAAI,QAAQ;AACV,aAAS,OAAO;AAChB,WAAO;AAAA,EACT,OAAO;AACL,aAAS;AAAA,EACX;AAEA,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,gBAAgB,OAAO;AAElD,SAAO,QAAQ;AACjB;AAaA,SAAS,UAAU,iBAAiB,SAAS,UAAU,UAAU,QAAQ,aAAa,OAAO;AAC3F,MAAI,CAAC,QAAQ,QAAQ,GAAG;AACtB,eAAW,CAAE,QAAS;AAAA,EACxB;AAEA,MAAI,OAAO,gBAAgB,UAAU;AACnC,YAAQ;AACR,kBAAc;AAAA,EAChB;AAEA,UAAQ,SAAS,CAAC;AAElB,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,mBAAmB,OAAO;AAErD,SAAO,QAAQ;AACjB;AAYA,SAAS,UAAU,cAAc,SAAS,aAAa,UAAU,OAAO,QAAQ;AAE9E,UAAQ,KAAK,QAAQ,SAAS,KAAK;AAEnC,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA,QAAQ,UAAU,YAAY;AAAA,IAC9B,OAAO;AAAA,EACT;AAEA,OAAK,cAAc,QAAQ,gBAAgB,OAAO;AAElD,SAAO,QAAQ;AACjB;AAcA,SAAS,UAAU,cAAc,SAAS,QAAQ,OAAO,UAAU,QAAQ,OAAO;AAEhF,UAAQ,SAAS,CAAC;AAElB,UAAQ,KAAK,QAAQ,SAAS,KAAK;AAEnC,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY,MAAM;AAAA,IAClB,kBAAkB,MAAM;AAAA,IACxB;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,gBAAgB,OAAO;AAElD,SAAO,QAAQ;AACjB;AAOA,SAAS,UAAU,iBAAiB,SAAS,UAAU;AACrD,MAAI,UAAU;AAAA,IACZ;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,mBAAmB,OAAO;AACvD;AASA,SAAS,UAAU,qBAAqB,SAAS,QAAQ,MAAM,WAAW;AACxE,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,uBAAuB,OAAO;AAC3D;AAQA,SAAS,UAAU,cAAc,SAAS,OAAO,OAAO;AACtD,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,gBAAgB,OAAO;AACpD;AAQA,SAAS,UAAU,mBAAmB,SAAS,YAAY,OAAO;AAChE,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,qBAAqB,OAAO;AACzD;AAWA,SAAS,UAAU,eAAe,SAAS,UAAU,UAAU,OAAO;AACpE,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,IACT,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,iBAAiB,OAAO;AAEnD,SAAO,QAAQ;AACjB;AAQA,SAAS,UAAU,gBAAgB,SAAS,UAAU,WAAW;AAC/D,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,kBAAkB,OAAO;AACtD;AAUA,SAAS,UAAU,cAAc,SAAS,OAAO,WAAW,WAAW,OAAO;AAC5E,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,gBAAgB,OAAO;AACpD;AAWA,SAAS,UAAU,cAAc,SAAS,cAAc,gBAAgBA,QAAO,WAAW,OAAO;AAC/F,MAAI,UAAU;AAAA,IACZ,OAAOA;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,aAAa,OAAO;AACjD;AASA,SAAS,UAAU,kBAAkB,SAAS,YAAY,cAAc,OAAO;AAC7E,MAAI,UAAU;AAAA,IACZ;AAAA,IACA;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,8BAA8B,OAAO;AAClE;AAWA,SAAS,UAAU,YAAY,SAAS,YAAY,QAAQ,QAAQ,iBAAiB,OAAO;AAC1F,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,IACX,WAAW;AAAA,IACX;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,wBAAwB,OAAO;AAC5D;AAUA,SAAS,UAAU,iBAAiB,SAAS,YAAY,WAAW,iBAAiB,OAAO;AAC1F,MAAI,CAAC,OAAO;AACV,YAAQ,CAAC;AAAA,EACX;AAEA,OAAK,UAAU,YAAY,WAAW,WAAW,QAAQ,iBAAiB,OAAO,OAAO;AAAA,IACtF,SAAS;AAAA,EACX,CAAC,CAAC;AACJ;AAUA,SAAS,UAAU,eAAe,SAAS,YAAY,WAAW,iBAAiB,OAAO;AACxF,MAAI,CAAC,OAAO;AACV,YAAQ,CAAC;AAAA,EACX;AAEA,OAAK,UAAU,YAAY,WAAW,QAAQ,WAAW,iBAAiB,OAAO,OAAO;AAAA,IACtF,SAAS;AAAA,EACX,CAAC,CAAC;AACJ;AAYA,SAAS,UAAU,UAAU,SAAS,QAAQ,QAAQ,OAAO,OAAO;AAClE,SAAO,KAAK,iBAAiB,QAAQ,QAAQ,SAAS,CAAC,GAAG,OAAO,QAAQ,KAAK;AAChF;AAEA,SAAS,UAAU,UAAU,SAAS,MAAM,OAAO;AACjD,MAAI,eAAe,KAAK,GAAG;AACzB,WAAO;AAAA,EACT,OAAO;AACL,WAAO,KAAK,gBAAgB,OAAO,MAAM,KAAK;AAAA,EAChD;AACF;AAQA,SAAS,UAAU,iBAAiB,SAAS,OAAO,OAAO;AACzD,MAAI,UAAU;AAAA,IACZ;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB;AAEA,OAAK,cAAc,QAAQ,wBAAwB,OAAO;AAC5D;;;AC1sBe,SAAR,8BAA+C,iBAAiB;AACrE,OAAK,mBAAmB;AAC1B;AAEA,8BAA8B,UAAU,CAAE,iBAAkB;AAE5D,8BAA8B,UAAU,UAAU,SAAS,SAAS;AAElE,MAAI,UAAU,QAAQ,SAClB,gBAAgB,QAAQ,eACxB,aAAa,QAAQ;AAEzB,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC5C;AAKA,MAAI,UAAU,QAAQ,WAAW,KAAK,qBAAqB,aAAa,EAAE,OAAO,OAAO;AACxF,MAAI,gBAAgB,QAAQ,iBAAiB,oBAAoB,eAAe,KAAK,UAAU,CAAC;AAEhG,sBAAoB,eAAe,UAAU;AAE7C,UAAQ,gBAAgB;AACxB,UAAQ,UAAU;AAElB,SAAO;AACT;AAEA,8BAA8B,UAAU,SAAS,SAAS,SAAS;AACjE,MAAI,gBAAgB,QAAQ,eACxB,gBAAgB,QAAQ,eACxB,UAAU,QAAQ;AAEtB,sBAAoB,eAAe,aAAa;AAEhD,SAAO;AACT;AASA,8BAA8B,UAAU,uBAAuB,SAAS,eAAe;AAErF,MAAI,kBAAkB,KAAK;AAE3B,MAAI,GAAG,eAAe,iBAAiB,GAAG;AACxC,WAAO,2BAA2B,eAAe,eAAe;AAAA,EAClE;AAEA,SAAO,CAAC;AACV;AAKA,SAAS,oBAAoB,eAAe,eAAe;AACzD,SAAO,OAAO,eAAe,SAAS,QAAQ,KAAK;AACjD,WAAO,GAAG,IAAI,cAAc,IAAI,GAAG;AACnC,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACP;AAEA,SAAS,oBAAoB,eAAe,YAAY;AACtD,UAAQ,YAAY,SAAS,OAAO,KAAK;AACvC,kBAAc,IAAI,KAAK,KAAK;AAAA,EAC9B,CAAC;AACH;AAEA,SAAS,2BAA2B,YAAY,iBAAiB;AAC/D,SAAO,gBAAgB,OAAO,SAAS,SAAS;AAC9C,WACE,GAAG,SAAS,0BAA0B,KAClC,kBAAkB,OAAO,EAAE,kBAAkB;AAAA,EAErD,CAAC;AACH;;;AClFA,IAAI,eAAe;AAAnB,IACI,KAAK;AADT,IAEI,KAAK;AAET,IAAI,kBAAkB;AAAA,EACpB,OAAO;AAAA,EACP,QAAQ;AACV;AAkBe,SAAR,wBACH,iBAAiB,QACjB,UAAU,cAAc;AAE1B,OAAK,mBAAmB;AACxB,OAAK,UAAU;AACf,OAAK,YAAY;AACjB,OAAK,gBAAgB;AACvB;AAEA,wBAAwB,UAAU;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAeA,wBAAwB,UAAU,UAAU,SAAS,SAAS;AAE5D,MAAI,UAAU,QAAQ,SAClB,UAAU,CAAE,OAAQ;AAExB,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,kBAAkB;AAAA,EACpC;AAEA,MAAI,kBAAkB,KAAK,kBACvB,MAAM,KAAK,QAAQ;AAEvB,MAAI,iBAAiB,QAAQ,gBACzB,aAAa,sBAAsB,QAAQ,UAAU,GACrD,gBAAgB,QAAQ,iBAAiB,cAAc,SAAS,UAAU;AAE9E,MAAI,WAAW,YAAY,cAAc,GAAG;AAC1C,QAAI,QAAQ,eAAe,EAAE,CAAC;AAE9B,oBAAgB,SAAS,SAAS,WAAW,EAAE,CAAC;AAEhD,QAAI,MAAM,WAAW,EAAE,GAAG,cAAc;AAAA,EAC1C;AAGA,MAAI,gBAAgB,YAAY;AAE9B,QAAI,WAAW,YAAY,GAAG;AAC5B,cAAQ,KAAK,gBAAgB,IAAI,WAAW,YAAY,EAAE,EAAE,CAAC;AAAA,IAC/D;AAEA,QAAI,eAAe,YAAY,GAAG;AAChC,cAAQ,KAAK,gBAAgB,IAAI,eAAe,YAAY,EAAE,EAAE,CAAC;AAAA,IACnE;AAAA,EACF;AAGA,gBAAc,SAAS,UAAU;AAGjC,UAAQ,gBAAgB;AACxB,UAAQ,UAAU;AAGlB,SAAO;AACT;AAGA,wBAAwB,UAAU,cAAc,SAAS,SAAS;AAChE,MAAI,UAAU,QAAQ,SAClB,QAAQ,QAAQ;AAEpB,MAAI,OAAO,SAAS,kBAAkB,KAAK,EAAE;AAE7C,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAIA,MAAI,iBAAiB,KAAK,cAAc,uBAAuB,OAAO,IAAI;AAE1E,OAAK,UAAU,YAAY,OAAO,gBAAgB,eAAe;AACnE;AAaA,wBAAwB,UAAU,SAAS,SAAS,SAAS;AAE3D,MAAI,UAAU,QAAQ,SAClB,aAAa,QAAQ,YACrB,gBAAgB,QAAQ,eACxB,iBAAiB,QAAQ,gBACzB,kBAAkB,KAAK,kBACvB,MAAM,KAAK,QAAQ;AAGvB,gBAAc,SAAS,aAAa;AAEpC,MAAI,WAAW,YAAY,cAAc,GAAG;AAC1C,QAAI,QAAQ,WAAW,EAAE,CAAC;AAE1B,oBAAgB,SAAS,SAAS,cAAc,EAAE,CAAC;AAEnD,QAAI,MAAM,cAAc,EAAE,GAAG,cAAc;AAAA,EAC7C;AAEA,SAAO,QAAQ;AACjB;AAGA,SAAS,WAAW,YAAY,gBAAgB;AAC9C,SAAO,MAAM,cAAc,WAAW,EAAE,MAAM,eAAe,EAAE;AACjE;AAGA,SAAS,cAAc,SAAS,YAAY;AAC1C,MAAI,gBAAgB,KAAK,UAAU,GAC/B,iBAAiB,QAAQ,gBACzB,KAAK,MAAM,OAAO;AAEtB,SAAO,OAAO,eAAe,SAAS,QAAQ,KAAK;AAGjD,QAAI,QAAQ,IAAI;AACd,aAAO,GAAG,IAAI,eAAe,IAAI,GAAG;AAAA,IAEtC,OAAO;AACL,aAAO,GAAG,IAAI,gBAAgB,IAAI,KAAK,WAAW,EAAE,CAAC;AAAA,IACvD;AAEA,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACP;AAGA,SAAS,gBAAgB,IAAI,eAAe;AAC1C,SAAO,OAAO,eAAe,SAAS,QAAQ,KAAK;AACjD,WAAO,GAAG,IAAI,MAAM,GAAG,IAAI,GAAG;AAE9B,WAAO;AAAA,EACT,GAAG,CAAC,CAAC;AACP;AAGA,SAAS,cAAc,SAAS,YAAY;AAC1C,MAAI,iBAAiB,QAAQ,gBACzB,KAAK,MAAM,OAAO;AAEtB,UAAQ,YAAY,SAAS,OAAO,KAAK;AAEvC,QAAI,QAAQ,IAAI;AACd,qBAAe,IAAI,KAAK,KAAK;AAAA,IAC/B,OAAO;AAGL,UAAI,IAAI;AACN,wBAAgB,IAAI,KAAK;AAAA,MAC3B;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAGA,SAAS,gBAAgB,IAAI,YAAY;AACvC,UAAQ,YAAY,SAAS,OAAO,KAAK;AACvC,OAAG,IAAI,KAAK,KAAK;AAAA,EACnB,CAAC;AACH;AAGA,IAAI,yBAAyB,CAAE,SAAU;AAUzC,SAAS,sBAAsB,YAAY;AAEzC,MAAI,iBAAiB,OAAO,CAAC,GAAG,UAAU;AAE1C,yBAAuB,QAAQ,SAAS,MAAM;AAC5C,QAAI,QAAQ,YAAY;AACtB,qBAAe,IAAI,IAAI,kBAAkB,eAAe,IAAI,CAAC;AAAA,IAC/D;AAAA,EACF,CAAC;AAED,SAAO;AACT;;;AChPe,SAAR,wBAAyC,QAAQ,UAAU;AAChE,OAAK,UAAU;AACf,OAAK,YAAY;AACnB;AAEA,wBAAwB,UAAU;AAAA,EAChC;AAAA,EACA;AACF;AAGA,wBAAwB,UAAU,UAAU,SAAS,SAAS;AAE5D,MAAI,SAAS,KAAK;AAElB,MAAI,UAAU,QAAQ,SAClB,wBAAwB,QAAQ,gBAChC,UAAU,OAAO,eAAe,GAChC,wBAAwB,QAAQ,gBAChC,kBAAkB,sBAAsB,SACxC,UAAU,MAAM,OAAO;AAG3B,SAAO,eAAe,OAAO;AAC7B,SAAO,kBAAkB,OAAO;AAGhC,MAAc,gBAAgB,cAAc,qBAAqB;AACjE,wBAAsB,UAAU;AAEhC,SAAiB,gBAAgB,cAAc,qBAAqB;AACpE,wBAAsB,UAAU;AAGhC,UAAQ,KAAK;AAEb,UAAQ,cAAc;AACtB,UAAQ,KAAK;AAEb,UAAQ,UAAU;AAIlB,SAAO,CAAC;AACV;AAGA,wBAAwB,UAAU,SAAS,SAAS,SAAS;AAE3D,MAAI,SAAS,KAAK;AAElB,MAAI,UAAU,QAAQ,SAClB,wBAAwB,QAAQ,gBAChC,UAAU,QAAQ,SAClB,wBAAwB,QAAQ,gBAChC,kBAAkB,sBAAsB,SACxC,UAAU,MAAM,OAAO;AAG3B,SAAO,eAAe,OAAO;AAC7B,SAAO,kBAAkB,OAAO;AAGhC,SAAiB,gBAAgB,cAAc,qBAAqB;AACpE,wBAAsB,UAAU;AAEhC,MAAc,gBAAgB,cAAc,qBAAqB;AACjE,wBAAsB,UAAU;AAGhC,UAAQ,KAAK;AAEb,UAAQ,cAAc;AACtB,UAAQ,KAAK;AAKb,SAAO,CAAC;AACV;;;AC9FA,IAAI,MAAM,KAAK;AAAf,IACI,MAAM,KAAK;AAEf,IAAI,4BAA4B;AA6BzB,SAAS,cAAc,OAAO,OAAO;AAC1C,SAAO;AAAA,IACL,KAAK,MAAM,MAAM,MAAM;AAAA,IACvB,OAAO,MAAM,QAAQ,MAAM;AAAA,IAC3B,QAAQ,MAAM,SAAS,MAAM;AAAA,IAC7B,MAAM,MAAM,OAAO,MAAM;AAAA,EAC3B;AACF;AAWO,SAASC,cAAa,QAAQ,WAAWC,QAAO;AACrD,MAAI,KAAKA,OAAM,GACX,KAAKA,OAAM;AAEf,MAAI,YAAY;AAAA,IACd,GAAG,OAAO;AAAA,IACV,GAAG,OAAO;AAAA,IACV,OAAO,OAAO;AAAA,IACd,QAAQ,OAAO;AAAA,EACjB;AAEA,MAAI,UAAU,QAAQ,GAAG,MAAM,IAAI;AACjC,cAAU,IAAI,OAAO,IAAI;AACzB,cAAU,SAAS,OAAO,SAAS;AAAA,EACrC,WAAW,UAAU,QAAQ,GAAG,MAAM,IAAI;AACxC,cAAU,SAAS,OAAO,SAAS;AAAA,EACrC;AAEA,MAAI,UAAU,QAAQ,GAAG,MAAM,IAAI;AACjC,cAAU,QAAQ,OAAO,QAAQ;AAAA,EACnC,WAAW,UAAU,QAAQ,GAAG,MAAM,IAAI;AACxC,cAAU,IAAI,OAAO,IAAI;AACzB,cAAU,QAAQ,OAAO,QAAQ;AAAA,EACnC;AAEA,SAAO;AACT;AAYO,SAAS,WAAW,QAAQ,QAAQ;AACzC,SAAO;AAAA,IACL,GAAG,OAAO,KAAK,OAAO,QAAQ;AAAA,IAC9B,GAAG,OAAO,KAAK,OAAO,OAAO;AAAA,IAC7B,OAAO,OAAO,SAAS,OAAO,QAAQ,MAAM,OAAO,SAAS;AAAA,IAC5D,QAAQ,OAAO,UAAU,OAAO,OAAO,MAAM,OAAO,UAAU;AAAA,EAChE;AACF;AAeA,SAAS,iBAAiB,MAAM,MAAM,mBAAmB;AAEvD,MAAI,QAAQ,KAAK,IAAI,GACjB,WAAW,kBAAkB,OAAO,kBAAkB,IAAI,IAAI,GAC9D,WAAW,kBAAkB,OAAO,kBAAkB,IAAI,IAAI;AAElE,MAAI,SAAS,QAAQ,GAAG;AACtB,aAAS,WAAW,KAAK,IAAI,IAAI,MAAM,KAAK,OAAO,QAAQ;AAAA,EAC7D;AAEA,MAAI,SAAS,QAAQ,GAAG;AACtB,aAAS,WAAW,KAAK,IAAI,IAAI,MAAM,KAAK,OAAO,QAAQ;AAAA,EAC7D;AAEA,SAAO;AACT;AAEO,SAAS,kBAAkB,eAAe,mBAAmB;AAElE,MAAI,CAAC,mBAAmB;AACtB,WAAO;AAAA,EACT;AAEA,MAAI,cAAc,OAAO,aAAa;AAEtC,SAAO,SAAS;AAAA,IACd,KAAK,iBAAiB,OAAO,aAAa,iBAAiB;AAAA,IAC3D,OAAO,iBAAiB,SAAS,aAAa,iBAAiB;AAAA,IAC/D,QAAQ,iBAAiB,UAAU,aAAa,iBAAiB;AAAA,IACjE,MAAM,iBAAiB,QAAQ,aAAa,iBAAiB;AAAA,EAC/D,CAAC;AACH;AAGO,SAAS,mBAAmB,WAAW,eAAe,eAAe,gBAAgB;AAE1F,MAAI,aAAa,OAAO,aAAa;AAErC,MAAI,SAAS;AAAA,IACX,KAAK,IAAI,KAAK,SAAS,IAAI,WAAW,SAAS,cAAc,SAAS,WAAW;AAAA,IACjF,MAAM,IAAI,KAAK,SAAS,IAAI,WAAW,QAAQ,cAAc,QAAQ,WAAW;AAAA,IAChF,QAAQ,IAAI,KAAK,SAAS,IAAI,WAAW,MAAM,cAAc,SAAS,WAAW;AAAA,IACjF,OAAO,IAAI,KAAK,SAAS,IAAI,WAAW,OAAO,cAAc,QAAQ,WAAW;AAAA,EAClF;AAEA,MAAI,cAAc,iBAAiB,OAAO,cAAc,IAAI;AAE5D,MAAI,cAAc;AAAA,IAChB,KAAK,IAAI,OAAO,KAAK,YAAY,GAAG;AAAA,IACpC,MAAM,IAAI,OAAO,MAAM,YAAY,IAAI;AAAA,IACvC,QAAQ,IAAI,OAAO,QAAQ,YAAY,MAAM;AAAA,IAC7C,OAAO,IAAI,OAAO,OAAO,YAAY,KAAK;AAAA,EAC5C;AAEA,SAAO,SAAS,WAAW;AAC7B;AAEA,SAAS,UAAU,cAAc,cAAc;AAC7C,MAAI,OAAO,iBAAiB,aAAa;AACvC,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEO,SAAS,WAAW,MAAM,SAAS;AACxC,MAAI,MAAM,OAAO,KAAK;AAEtB,MAAI,OAAO,YAAY,UAAU;AAC/B,WAAO,UAAU,QAAQ,IAAI;AAC7B,YAAQ,UAAU,QAAQ,KAAK;AAC/B,UAAM,UAAU,QAAQ,GAAG;AAC3B,aAAS,UAAU,QAAQ,MAAM;AAAA,EACnC,OAAO;AACL,WAAO,QAAQ,MAAM,SAAS,UAAU,OAAO;AAAA,EACjD;AAEA,SAAO;AAAA,IACL,GAAG,KAAK,IAAI;AAAA,IACZ,GAAG,KAAK,IAAI;AAAA,IACZ,OAAO,KAAK,QAAQ,OAAO;AAAA,IAC3B,QAAQ,KAAK,SAAS,MAAM;AAAA,EAC9B;AACF;AAYA,SAAS,YAAY,SAAS;AAG5B,MAAI,QAAQ,WAAW;AACrB,WAAO;AAAA,EACT;AAGA,MAAI,QAAQ,SAAS,SAAS;AAC5B,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAWO,SAAS,oBAAoB,iBAAiB,SAAS;AAE5D,MAAI;AAGJ,MAAI,gBAAgB,WAAW,QAAW;AAIxC,eAAW,OAAO,gBAAgB,UAAU,WAAW;AAAA,EAEzD,OAAO;AACL,eAAW;AAAA,EACb;AAEA,MAAI,SAAS,QAAQ;AACnB,WAAO,WAAW,QAAQ,QAAQ,GAAG,OAAO;AAAA,EAC9C;AACF;;;ACnOA,IAAI,MAAM,KAAK;AAGf,SAAS,cAAc,WAAW,WAAW;AAC3C,SAAO,cAAc,OAAO,SAAS,GAAG,OAAO,SAAS,CAAC;AAC3D;AAGA,IAAI,eAAe;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AACF;AAEO,IAAI,mBAAmB;AAWvB,SAAS,aAAa,OAAO,iBAAiB;AAEnD,oBAAkB,mBAAmB,CAAC;AAEtC,QAAM,SAAS,OAAO,SAAS,GAAG;AAChC,QAAI,GAAG,GAAG,WAAW,GAAG;AACtB,mBAAa,GAAG,eAAe;AAE/B,sBAAgB,KAAK,CAAC;AAAA,IACxB;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAUO,SAAS,cAAc,OAAO;AACnC,SAAO,MAAM,SAAS,OAAO,SAAS,GAAG;AACvC,WAAO,GAAG,GAAG,WAAW;AAAA,EAC1B,CAAC;AACH;AAUO,SAAS,aAAa,OAAO;AAClC,SAAO,UAAU,OAAO,YAAY,KAAK;AAC3C;AAgBO,SAAS,mBAAmB,OAAO,WAAW;AAEnD,MAAI,cAAc,aAAa,KAAK;AAEpC,MAAI,gBAAgB,GAAG,aAAa,cAAc,IAAI,CAAC,IAAI,CAAE,WAAY;AAEzE,MAAI,WAAW,aAAa,aAAa,aAAa,GAClD,YAAY,OAAO,KAAK,GACxB,eAAe,OAAO,SAAS,GAC/B,aAAa,cAAc,OAAO,SAAS,GAC3C,eAAe,CAAC;AAEpB,MAAI,mBAAmB,aAAa,KAAK;AAEzC,WAAS,QAAQ,SAAS,OAAO;AAE/B,QAAI,UAAU,OAAO;AACnB;AAAA,IACF;AAEA,QAAI,YAAY,mBAAmB,IAAI,WAAW,KAC9C,cAAc,mBAAmB,WAAW,QAAQ,GACpD,eAAe,mBAAmB,IAAI,WAAW,QACjD,aAAa,mBAAmB,WAAW,OAAO;AAEtD,QAAI,YAAY,OAAO,KAAK;AAE5B,QAAI,WAAW,KAAK;AAClB,UAAI,IAAI,UAAU,SAAS,UAAU,GAAG,IAAI,IAAI;AAC9C,uBAAe,aAAa,MAAM,UAAU;AAAA,MAC9C;AAEA,UAAI,IAAI,UAAU,MAAM,UAAU,GAAG,IAAI,GAAG;AAC1C,oBAAY,aAAa,MAAM,UAAU;AAAA,MAC3C;AAAA,IACF;AAEA,QAAI,WAAW,MAAM;AACnB,UAAI,IAAI,UAAU,QAAQ,UAAU,IAAI,IAAI,IAAI;AAC9C,sBAAc,aAAa,OAAO,UAAU;AAAA,MAC9C;AAEA,UAAI,IAAI,UAAU,OAAO,UAAU,IAAI,IAAI,GAAG;AAC5C,qBAAa,aAAa,OAAO,UAAU;AAAA,MAC7C;AAAA,IACF;AAEA,QAAI,WAAW,QAAQ;AACrB,UAAI,IAAI,UAAU,MAAM,UAAU,MAAM,IAAI,IAAI;AAC9C,oBAAY,aAAa,SAAS,UAAU;AAAA,MAC9C;AAEA,UAAI,IAAI,UAAU,SAAS,UAAU,MAAM,IAAI,GAAG;AAChD,uBAAe,aAAa,SAAS,UAAU;AAAA,MACjD;AAAA,IACF;AAEA,QAAI,WAAW,OAAO;AACpB,UAAI,IAAI,UAAU,OAAO,UAAU,KAAK,IAAI,IAAI;AAC9C,qBAAa,aAAa,QAAQ,UAAU;AAAA,MAC9C;AAEA,UAAI,IAAI,UAAU,QAAQ,UAAU,KAAK,IAAI,GAAG;AAC9C,sBAAc,aAAa,QAAQ,UAAU;AAAA,MAC/C;AAAA,IACF;AAEA,QAAI,aAAa,eAAe,gBAAgB,YAAY;AAE1D,mBAAa,KAAK;AAAA,QAChB,OAAO;AAAA,QACP,WAAW,WAAW,OAAO;AAAA,UAC3B,KAAK;AAAA,UACL,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,MAAM;AAAA,QACR,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EAEF,CAAC;AAED,SAAO;AACT;;;AC1Je,SAAR,eAAgC,UAAU,WAAW;AAC1D,OAAK,YAAY;AACjB,OAAK,aAAa;AACpB;AAEA,eAAe,UAAU;AAAA,EACvB;AAAA,EACA;AACF;AAGA,eAAe,UAAU,aAAa,SAAS,SAAS;AAEtD,MAAI,YAAY,KAAK,YACjB,WAAW,KAAK;AAEpB,MAAI,QAAQ,QAAQ,OAChB,WAAW,QAAQ;AAEvB,MAAI,YAAY,aAAa,KAAK;AAElC,MAAI,SAAS,cAAc,OACvB,aAAa,SAAS,QAAQ,MAAM;AAExC,MAAI,qBAAqB,cAAc,UAAU;AAEjD,MAAI,mBAAmB,aAAa,KAAK;AAGzC,MAAI,kBAAkB;AACpB,QAAI,aAAa,QAAQ;AACvB,iBAAW;AAAA,IACb,WACI,aAAa,SAAS;AACxB,iBAAW;AAAA,IACb;AAAA,EACF,OAAO;AACL,QAAI,aAAa,OAAO;AACtB,iBAAW;AAAA,IACb,WACI,aAAa,UAAU;AACzB,iBAAW;AAAA,IACb;AAAA,EACF;AAGA,MAAI,CAAC,mBAAmB,QAAQ;AAC9B,QAAI,kBAAkB,mBAAmB;AAAA,MACvC,GAAG,MAAM,IAAI;AAAA,MACb,GAAG,MAAM;AAAA,MACT,OAAO,MAAM,QAAQ;AAAA,MACrB,QAAQ,MAAM;AAAA,IAChB,IAAI;AAAA,MACF,GAAG,MAAM;AAAA,MACT,GAAG,MAAM,IAAI;AAAA,MACb,OAAO,MAAM;AAAA,MACb,QAAQ,MAAM,SAAS;AAAA,IACzB;AAEA,aAAS;AAAA,MACP;AAAA,QACE,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAGA,MAAI,cAAc,CAAC;AAEnB,cAAY,WAAW,SAAS,SAAS;AACvC,gBAAY,KAAK,OAAO;AAGxB,QAAI,QAAQ,OAAO;AACjB,kBAAY,KAAK,QAAQ,KAAK;AAAA,IAChC;AAEA,QAAI,YAAY,OAAO;AACrB,aAAO,CAAC;AAAA,IACV;AAEA,WAAO,OAAO,QAAQ,UAAU,SAAS,GAAG;AAC1C,aAAO,MAAM;AAAA,IACf,CAAC;AAAA,EACH,CAAC;AAED,MAAI,QACA,cACA,UACA,WACA;AAEJ,MAAI,aAAa,OAAO;AACtB,aAAS;AACT,mBAAe,MAAM;AACrB,eAAW,eAAe;AAC1B,gBAAY;AACZ,WAAO;AAAA,EACT,WACI,aAAa,QAAQ;AACvB,aAAS;AACT,mBAAe,MAAM;AACrB,eAAW,eAAe;AAC1B,gBAAY;AACZ,WAAO;AAAA,EACT,WACI,aAAa,UAAU;AACzB,aAAS;AACT,mBAAe,MAAM,IAAI,MAAM;AAC/B,eAAW,eAAe;AAC1B,gBAAY;AACZ,WAAO;AAAA,EACT,WACI,aAAa,SAAS;AACxB,aAAS;AACT,mBAAe,MAAM,IAAI,MAAM;AAC/B,eAAW,eAAe;AAC1B,gBAAY;AACZ,WAAO;AAAA,EACT;AAEA,MAAI,cAAc,UAAU,qBAAqB,aAAa,MAAM,QAAQ,QAAQ;AAEpF,MAAIC,SAAQ,mBAAmB,EAAE,GAAG,GAAG,GAAG,OAAO,IAAI,EAAE,GAAG,QAAQ,GAAG,EAAE;AAEvE,YAAU;AAAA,IACR,YAAY;AAAA,IACZ,YAAY;AAAA,IACZA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAGA,MAAI,kBAAkB,mBAAmB;AAAA,IACvC,GAAG,MAAM,KAAK,SAAS,mBAAmB;AAAA,IAC1C,GAAG,gBAAgB,aAAa,QAAQ,MAAM;AAAA,IAC9C,OAAO,MAAM,SAAS,SAAS,mBAAmB;AAAA,IAClD,QAAQ;AAAA,EACV,IAAI;AAAA,IACF,GAAG,gBAAgB,aAAa,SAAS,MAAM;AAAA,IAC/C,GAAG,MAAM,KAAK,SAAS,mBAAmB;AAAA,IAC1C,OAAO;AAAA,IACP,QAAQ,MAAM,UAAU,SAAS,mBAAmB;AAAA,EACtD;AAEA,UAAQ,UAAU,SAAS;AAAA,IACzB;AAAA,MACE,MAAM;AAAA,MACN,cAAc;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;;;ACxKe,SAAR,iBAAkC,UAAU;AACjD,OAAK,YAAY;AACnB;AAEA,iBAAiB,UAAU;AAAA,EACzB;AACF;AAGA,iBAAiB,UAAU,aAAa,SAAS,SAAS;AAExD,MAAI,WAAW,KAAK;AAEpB,MAAI,QAAQ,QAAQ,OAChB,gBAAgB,QAAQ;AAE5B,MAAI,aAAa,cAAc,KAAK,GAChC,qBAAqB,WAAW;AAEpC,MAAI,qBAAqB,eAAe;AACtC,UAAM,IAAI,MAAM,cAAe,aAAc,eAAe;AAAA,EAC9D;AAEA,MAAI,mBAAmB,aAAa,KAAK;AAEzC,MAAI,eAAe,mBAAmB,MAAM,SAAS,MAAM;AAC3D,MAAI,eAAe,KAAK,MAAM,eAAe,aAAa;AAQ1D,MAAI,UACA,YACA,cACA;AAEJ,OAAK,MAAM,GAAG,MAAM,eAAe,OAAO;AAGxC,QAAI,QAAQ,gBAAgB,GAAG;AAC7B,iBAAW,eAAgB,eAAe;AAAA,IAC5C,OAAO;AACL,iBAAW;AAAA,IACb;AAEA,iBAAa,mBAAmB;AAAA,MAC9B,GAAG,MAAM,IAAI;AAAA,MACb,GAAG,MAAM,IAAI,MAAM;AAAA,MACnB,OAAO,MAAM,QAAQ;AAAA,MACrB,QAAQ;AAAA,IACV,IAAI;AAAA,MACF,GAAG,MAAM,IAAI,MAAM;AAAA,MACnB,GAAG,MAAM,IAAI;AAAA,MACb,OAAO;AAAA,MACP,QAAQ,MAAM,SAAS;AAAA,IACzB;AAEA,QAAI,MAAM,oBAAoB;AAG5B,eAAS,YAAY,WAAW,GAAG,GAAG,UAAU;AAAA,IAClD,OAAO;AAGL,qBAAe;AAAA,QACb,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAEA,eAAS,YAAY,cAAc,YAAY,KAAK;AAAA,IACtD;AAAA,EACF;AACF;;;AC5De,SAAR,kBAAmC,UAAU,WAAW;AAC7D,OAAK,YAAY;AACjB,OAAK,aAAa;AACpB;AAEA,kBAAkB,UAAU;AAAA,EAC1B;AAAA,EACA;AACF;AAGA,kBAAkB,UAAU,aAAa,SAAS,SAAS;AAEzD,MAAI,QAAQ,QAAQ,OAChB,YAAY,QAAQ,WACpB,WAAW,QAAQ;AAEvB,MAAI,aAAa,OAAO;AACtB,SAAK,eAAe,OAAO,SAAS;AAAA,EACtC,OAAO;AACL,SAAK,YAAY,OAAO,SAAS;AAAA,EACnC;AACF;AASA,kBAAkB,UAAU,iBAAiB,SAAS,OAAO,WAAW;AAEtE,MAAI,WAAW,KAAK;AAEpB,MAAI,eAAe,mBAAmB,OAAO,SAAS;AAGtD,WAAS,YAAY,OAAO,SAAS;AAGrC,eAAa,QAAQ,SAAS,GAAG;AAC/B,aAAS,YAAY,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3C,CAAC;AACH;AASA,kBAAkB,UAAU,cAAc,SAAS,OAAO,WAAW;AACnE,MAAI,YAAY,KAAK;AAErB,MAAI,YAAY,OAAO,KAAK,GACxB,UAAU,OAAO,SAAS;AAE9B,MAAI,WAAW,cAAc,SAAS,SAAS;AAE/C,MAAI,YAAY,aAAa,KAAK;AAElC,MAAI,cAAc,CAAC,GACf,WAAW,CAAC;AAEhB,cAAY,WAAW,SAAS,SAAS;AACvC,gBAAY,KAAK,OAAO;AAExB,QAAI,GAAG,SAAS,WAAW,KAAK,GAAG,SAAS,kBAAkB,GAAG;AAC/D,eAAS,KAAK,OAAO;AAAA,IACvB;AAEA,WAAO,QAAQ;AAAA,EACjB,CAAC;AAED,MAAI,QACA,UACA,WACA,QACA;AAEJ,MAAI,SAAS,UAAU,SAAS,KAAK;AAEnC,aAAS,SAAS,UAAU,SAAS;AACrC,eAAW,MAAM,KAAK,SAAS,SAAS,MAAM,SAAS,MAAM,SAAS,SAAS,MAAM;AACrF,gBAAY,SAAS,SAAS,MAAM;AAEpC,aAAS,SAAS,MAAM,KAAK,SAAS,SAAS,IAAI,CAAC,SAAS;AAE7D,kBAAc,UAAU,qBAAqB,aAAa,KAAK,QAAQ,QAAQ;AAE/E,cAAU,UAAU,YAAY,cAAc,YAAY,gBAAgB,EAAE,GAAG,GAAG,GAAG,OAAO,GAAG,SAAS;AAAA,EAC1G;AAGA,MAAI,SAAS,QAAQ,SAAS,OAAO;AAEnC,aAAS,SAAS,SAAS,SAAS;AACpC,eAAW,MAAM,KAAK,SAAS,QAAQ,MAAM,QAAQ,MAAM,SAAS,QAAQ,MAAM;AAClF,gBAAY,SAAS,QAAQ,MAAM;AAEnC,aAAS,SAAS,OAAO,KAAK,SAAS,QAAQ,IAAI,CAAC,SAAS;AAE7D,kBAAc,UAAU,qBAAqB,UAAU,KAAK,QAAQ,QAAQ;AAE5E,cAAU,UAAU,YAAY,cAAc,YAAY,gBAAgB,EAAE,GAAG,QAAQ,GAAG,EAAE,GAAG,SAAS;AAAA,EAC1G;AACF;;;ACxHA,IAAI,sBAAsB;AAA1B,IACI,aAAa;AAUF,SAAR,0BAA2C,iBAAiB;AACjE,OAAK,mBAAmB;AAC1B;AAEA,0BAA0B,UAAU;AAAA,EAClC;AACF;AAYA,0BAA0B,UAAU,kBAAkB,SAAS,gBAAgB,YAAY;AAEzF,MAAI,eAAe,CAAC;AAEpB,MAAI,UAAU,CAAC;AAEf,MAAI,mBAAmB,CAAC;AAExB,MAAI,oBAAoB,CAAC;AAEzB,WAAS,cAAc,SAAS,WAAW;AAEzC,QAAI,WAAW,OAAO,SAAS;AAE/B,QAAI,aAAa;AAAA,MACf,GAAG,QAAQ,IAAI,QAAQ,QAAQ;AAAA,MAC/B,GAAG,QAAQ,IAAI,QAAQ,SAAS;AAAA,IAClC;AAEA,WAAO,WAAW,IAAI,SAAS,QACxB,WAAW,IAAI,SAAS,SACxB,WAAW,IAAI,SAAS,OACxB,WAAW,IAAI,SAAS;AAAA,EACjC;AAEA,WAAS,iBAAiB,eAAe;AACvC,QAAI,aAAa,QAAQ,aAAa,MAAM,IAAI;AAC9C,wBAAkB,KAAK,aAAa;AACpC,mBAAa,KAAK,aAAa;AAAA,IACjC;AAAA,EACF;AAEA,WAAS,iBAAiB,eAAe;AAEvC,QAAI,OAAO,aAAa,aAAa;AAErC,QAAI,CAAC,iBAAiB,KAAK,EAAE,GAAG;AAC9B,uBAAiB,KAAK,EAAE,IAAI,aAAa,IAAI;AAAA,IAC/C;AAEA,WAAO,iBAAiB,KAAK,EAAE;AAAA,EACjC;AAEA,WAAS,YAAY,eAAe;AAClC,QAAI,CAAC,cAAc,QAAQ;AACzB,aAAO,CAAC;AAAA,IACV;AAEA,QAAI,gBAAgB,iBAAiB,aAAa;AAElD,WAAO,cAAc,OAAO,SAAS,GAAG;AACtC,aAAO,cAAc,eAAe,CAAC;AAAA,IACvC,CAAC,EAAE,IAAI,SAAS,OAAO;AACrB,aAAO,MAAM;AAAA,IACf,CAAC;AAAA,EACH;AAEA,aAAW,QAAQ,SAAS,WAAW;AACrC,QAAI,OAAO,aAAa,SAAS;AAEjC,QAAI,CAAC,QAAQ,aAAa,QAAQ,IAAI,MAAM,IAAI;AAC9C;AAAA,IACF;AAEA,QAAI,WAAW,KAAK,SAAS,OAAO,SAAS,GAAG;AAC9C,aAAO,GAAG,GAAG,eAAe;AAAA,IAC9B,CAAC;AAED,aAAS,QAAQ,gBAAgB;AAEjC,iBAAa,KAAK,IAAI;AAAA,EACxB,CAAC;AAED,iBAAe,QAAQ,gBAAgB;AAGvC,oBAAkB,QAAQ,SAAS,eAAe;AAEhD,QAAI,WAAW,cAAc;AAE7B,QAAI,QAAQ,SAAS,IAAI,UAAU,GAC/BC,UAAS,MAAM,MAAM,GACrBC,OAAM,YAAY,aAAa;AAEnC,YAAQ,KAAK,EAAE,UAAoB,QAAQD,SAAQ,KAAKC,KAAI,CAAC;AAAA,EAC/D,CAAC;AAED,aAAW,QAAQ,SAAS,WAAW;AAErC,QAAI,OAAO,UAAU;AAGrB,QAAI,CAAC,UAAU,QAAQ;AACrB,WAAK,IAAI,mBAAmB,EAAE,QAAQ,SAAS,UAAU;AACvD,gBAAQ,KAAK,EAAE,UAAoB,QAAQ,CAAE,IAAK,GAAG,KAAK,CAAC,EAAE,CAAC;AAAA,MAChE,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEA,0BAA0B,UAAU,UAAU,SAAS,SAAS;AAE9D,MAAI,UAAU,QAAQ;AAEtB,MAAI,CAAC,SAAS;AACZ,cAAU,QAAQ,UAAU,KAAK,gBAAgB,QAAQ,gBAAgB,QAAQ,UAAU;AAAA,EAC7F;AAGA,UAAQ,QAAQ,SAAS,QAAQ;AAE/B,QAAI,WAAW,OAAO,UAClB,QAAQ,SAAS,IAAI,UAAU;AAGnC,WAAO,OAAO,QAAQ,SAAS,SAAS;AACtC,aAAiB,OAAO,OAAO;AAC/B,aAAiB,QAAQ,IAAI,mBAAmB,GAAG,QAAQ;AAAA,IAC7D,CAAC;AAGD,WAAO,IAAI,QAAQ,SAAS,SAAS;AACnC,UAAc,OAAO,OAAO;AAC5B,UAAc,QAAQ,IAAI,mBAAmB,GAAG,QAAQ;AAAA,IAC1D,CAAC;AAAA,EACH,CAAC;AAKD,SAAO,CAAC;AACV;AAGA,0BAA0B,UAAU,SAAS,SAAS,SAAS;AAE7D,MAAI,UAAU,QAAQ;AAEtB,UAAQ,QAAQ,SAAS,QAAQ;AAE/B,QAAI,WAAW,OAAO,UAClB,QAAQ,SAAS,IAAI,UAAU;AAGnC,WAAO,IAAI,QAAQ,SAAS,SAAS;AACnC,aAAiB,OAAO,OAAO;AAC/B,aAAiB,QAAQ,IAAI,mBAAmB,GAAG,QAAQ;AAAA,IAC7D,CAAC;AAGD,WAAO,OAAO,QAAQ,SAAS,SAAS;AACtC,UAAc,OAAO,OAAO;AAC5B,UAAc,QAAQ,IAAI,mBAAmB,GAAG,QAAQ;AAAA,IAC1D,CAAC;AAAA,EACH,CAAC;AAKD,SAAO,CAAC;AACV;;;AC9Me,SAAR,eAAgC,QAAQ;AAC7C,OAAK,UAAU;AACjB;AAEA,eAAe,UAAU,CAAE,QAAS;AAGpC,eAAe,UAAU,UAAU,SAAS,SAAS;AACnD,MAAI,MAAM,KAAK,QAAQ,KACnB,KAAK,QAAQ,IACb,UAAU,QAAQ,SAClB,WAAW,QAAQ;AAEvB,MAAI,UAAU;AACZ,QAAI,MAAM,IAAI,OAAO;AAAA,EACvB,OAAO;AACL,QAAI,QAAQ,EAAE;AAAA,EAChB;AAEA,SAAO,CAAC;AACV;AAKA,eAAe,UAAU,SAAS,SAAS,SAAS;AAClD,MAAI,MAAM,KAAK,QAAQ,KACnB,KAAK,QAAQ,IACb,UAAU,QAAQ,SAClB,WAAW,QAAQ;AAEvB,MAAI,UAAU;AACZ,QAAI,QAAQ,EAAE;AAAA,EAChB,OAAO;AACL,QAAI,MAAM,IAAI,OAAO;AAAA,EACvB;AAEA,SAAO,CAAC;AACV;;;AC/BO,IAAI,qBAAqB;AAAA,EAC9B,OAAO;AAAA,EACP,QAAQ;AACV;AAEO,IAAI,oBAAoB;AAUxB,SAAS,gBAAgB,UAAU;AACxC,SAAO,GAAG,UAAU,YAAY,KACzB,GAAG,UAAU,cAAc,KAC3B,GAAG,UAAU,yBAAyB,KACtC,GAAG,UAAU,0BAA0B,KACvC,GAAG,UAAU,gBAAgB,KAC7B,GAAG,UAAU,iBAAiB,KAC9B,GAAG,UAAU,mBAAmB,KAChC,GAAG,UAAU,kBAAkB,KAC/B,GAAG,UAAU,YAAY;AAClC;AASO,SAAS,iBAAiB,SAAS;AACxC,SAAO,QAAQ,QAAQ,KAAK;AAC9B;AASO,SAAS,qBAAqB,WAAW;AAG9C,MAAI,MAAM,UAAU,SAAS,IAAI;AAEjC,MAAI,QAAQ,UAAU,KAAK,MAAM,GAAG,CAAC;AACrC,MAAI,SAAS,UAAU,KAAK,KAAK,MAAM,IAAI,CAAC;AAG5C,MAAI,WAAW,gBAAgB,SAAS;AAGxC,MAAI,QAAQ,KAAK,MAAM,OAAO,IAAI,MAAM,MAAM,OAAO,IAAI,MAAM,EAAE;AAEjE,MAAI,IAAI,SAAS,GACb,IAAI,SAAS;AAEjB,MAAI,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,GAAG;AACjC,SAAK;AAAA,EACP,OAAO;AACL,SAAK;AAAA,EACP;AAEA,SAAO,EAAE,GAAM,EAAK;AACtB;AAUO,SAAS,gBAAgB,WAAW;AAEzC,MAAI,MAAM,UAAU,SAAS,IAAI;AAEjC,MAAI,QAAQ,UAAU,KAAK,MAAM,GAAG,CAAC;AACrC,MAAI,SAAS,UAAU,KAAK,KAAK,MAAM,IAAI,CAAC;AAE5C,SAAO;AAAA,IACL,GAAG,MAAM,KAAK,OAAO,IAAI,MAAM,KAAK;AAAA,IACpC,GAAG,MAAM,KAAK,OAAO,IAAI,MAAM,KAAK;AAAA,EACtC;AACF;AASO,SAAS,oBAAoB,SAAS;AAE3C,MAAI,QAAQ,WAAW;AACrB,WAAO,qBAAqB,QAAQ,SAAS;AAAA,EAC/C,WAAW,GAAG,SAAS,YAAY,GAAG;AACpC,WAAO;AAAA,MACL,GAAG,QAAQ,IAAI,QAAQ,QAAQ;AAAA,MAC/B,GAAG,QAAQ,IAAI,mBAAmB,SAAS;AAAA,IAC7C;AAAA,EACF,OAAO;AACL,WAAO;AAAA,MACL,GAAG,QAAQ,IAAI,QAAQ,QAAQ;AAAA,MAC/B,GAAG,QAAQ,IAAI,QAAQ,SAAS,mBAAmB,SAAS;AAAA,IAC9D;AAAA,EACF;AACF;AAYO,SAAS,uBAAuB,IAAI,SAAS;AAElD,MAAI,KACA,MACA,QACA,QAAQ,GAAG;AAEf,MAAI,SAAS,MAAM,QAAQ;AACzB,aAAS,MAAM;AAEf,WAAO;AAAA,MACL,OAAO,KAAK,IAAI,mBAAmB,OAAO,OAAO,KAAK;AAAA,MACtD,QAAQ,OAAO;AAAA,IACjB;AAEA,UAAM;AAAA,MACJ,GAAG,OAAO,IAAI,OAAO,QAAQ;AAAA,MAC7B,GAAG,OAAO,IAAI,OAAO,SAAS;AAAA,IAChC;AAAA,EACF,OAAO;AAEL,UAAM,oBAAoB,OAAO;AAEjC,WAAO;AAAA,EACT;AAEA,SAAO,OAAO;AAAA,IACZ,GAAG,IAAI,IAAI,KAAK,QAAQ;AAAA,IACxB,GAAG,IAAI,IAAI,KAAK,SAAS;AAAA,EAC3B,GAAG,IAAI;AACT;AAOA,SAAS,aAAa,UAAU;AAC9B,MACE,GAAG,UAAU,kBAAkB,KAC/B,GAAG,UAAU,kBAAkB,KAC/B,GAAG,UAAU,WAAW,KACxB,GAAG,UAAU,mBAAmB,KAChC,GAAG,UAAU,kBAAkB,KAC/B,GAAG,UAAU,gBAAgB,KAC7B,GAAG,UAAU,iBAAiB,GAC9B;AACA,WAAO;AAAA,EACT;AAEA,MAAI,GAAG,UAAU,qBAAqB,GAAG;AACvC,WAAO;AAAA,EACT;AAEA,MAAI,GAAG,UAAU,YAAY,GAAG;AAC9B,WAAO;AAAA,EACT;AACF;AAOA,SAAS,iBAAiB,UAAU;AAClC,MAAI,mBAAmB,SAAS,kBAAkB;AAElD,MAAI,CAAC,kBAAkB;AACrB,WAAO;AAAA,EACT;AAGA,SAAO,iBAAiB,SAAS;AACnC;AAOO,SAAS,SAAS,SAAS;AAChC,MAAI,WAAW,QAAQ,gBACnB,OAAO,aAAa,QAAQ;AAEhC,MAAI,MAAM;AAER,QAAI,SAAS,oBAAoB;AAE/B,aAAO,iBAAiB,QAAQ;AAAA,IAClC;AAEA,WAAO,SAAS,IAAI,KAAK;AAAA,EAC3B;AACF;AASO,SAAS,SAAS,SAAS,MAAM;AACtC,MAAI,WAAW,QAAQ,gBACnB,OAAO,aAAa,QAAQ;AAEhC,MAAI,MAAM;AAER,QAAI,SAAS,oBAAoB;AAC/B,eAAS,kBAAkB,EAAE,QAAQ;AAAA,IACvC,OAAO;AACL,eAAS,IAAI,IAAI;AAAA,IACnB;AAAA,EAEF;AAEA,SAAO;AACT;;;AC3OA,IAAI,iBAAiB;AAAA,EACnB,MAAM;AAAA,EACN,QAAQ;AACV;AAOe,SAAR,gBAAiC,cAAc;AACpD,OAAK,gBAAgB;AAErB,OAAK,kBAAkB,SAAS,OAAO;AAGrC,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,QAAI,SAAS,KAAK,GAAG;AACnB,UAAI,WAAW,WAAW,KAAK;AAE/B,UAAI,UAAU;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AAEA,UAAM,IAAI,MAAM,wBAAyB,KAAM,EAAE;AAAA,EACnD;AACF;AAEA,gBAAgB,UAAU;AAAA,EACxB;AACF;AAGA,gBAAgB,UAAU,cAAc,SAAS,SAAS;AACxD,MAAI,WAAW,QAAQ,UACnB,SAAS,QAAQ,UAAU;AAE/B,MAAI,OAAO;AAEX,MAAI,KAAK,CAAC;AAEV,MAAI,UAAU,QAAQ;AACpB,WAAO,IAAI;AAAA,MACT,oBAAoB,KAAK,gBAAgB,OAAO,IAAI;AAAA,IAAE,CAAC;AAAA,EAC3D;AAEA,MAAI,YAAY,QAAQ;AACtB,WAAO,IAAI;AAAA,MACT,gBAAgB,KAAK,gBAAgB,OAAO,MAAM;AAAA,IAAE,CAAC;AAAA,EACzD;AAEA,UAAQ,UAAU,SAAS,SAAS;AAClC,QAAI,aAAa,aAAa,OAAO,IAAI,KAAK,IAAI,CAAE,cAAe,CAAC,IAAI,IACpE,YAAY,MAAM,OAAO;AAG7B,wBAAoB,UAAU;AAE9B,QAAI,QAAQ,OAAO,GAAG;AAGpB,WAAK,cAAc,QAAQ,kCAAkC;AAAA,QAC3D;AAAA,QACA,eAAe,UAAU;AAAA,QACzB,YAAY;AAAA,UACV,OAAO,GAAG,cAAc;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AAGL,UAAI,CAAC,MAAM,WAAW,CAAE,mBAAmB,kBAAmB,CAAC,GAAG;AAChE;AAAA,MACF;AAGA,WAAK,cAAc,QAAQ,4BAA4B;AAAA,QACrD;AAAA,QACA,YAAY;AAAA,UACV,IAAI;AAAA,QACN;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAEH;AAoBA,SAAS,WAAW,OAAO;AACzB,MAAI,UAAU,SAAS,cAAc,QAAQ,EAAE,WAAW,IAAI;AAG9D,UAAQ,YAAY;AAGpB,UAAQ,YAAY;AAGpB,SAAO,oBAAoB,KAAK,QAAQ,SAAS,IAAI,QAAQ,YAAY;AAC3E;AAOA,SAAS,oBAAoB,IAAI;AAC/B,MAAI,kBAAkB,IAAI;AACxB,OAAG,SAAS,GAAG,cAAc;AAAA,EAC/B;AAEA,MAAI,sBAAsB,IAAI;AAC5B,OAAG,OAAO,GAAG,kBAAkB;AAAA,EACjC;AACF;;;ACjJA,IAAIC,mBAAkB;AAAA,EACpB,OAAO;AAAA,EACP,QAAQ;AACV;AAiBe,SAAR,mBAAoC,UAAU,cAAc,aAAa;AAU9E,WAAS,QAAQ,SAAS,MAAM;AAG9B,QAAI,QAAQ,QAAQ,SAAS;AAE7B,QAAI,cAAc,QAAQ,eAAe;AAEzC,aAAS,OAAO,MAAM,gBAAgB,KAAK;AAE3C,WAAO,CAAE,OAAO,WAAY;AAAA,EAC9B;AAEA,WAAS,WAAW,KAAK;AACvB,QAAI,UAAU,IAAI,SACd,iBAAiB,QAAQ,gBACzB,WAAW,IAAI;AAEnB,QAAI,CAAC,QAAQ,OAAO,KACb,gBAAgB,OAAO,KACvB,CAAC,iBAAiB,OAAO,KACzB,CAAC,YAAY,QAAQ,GAAG;AAG7B,UAAI,aAAa;AAEjB,UAAI,cAAc,oBAAoB,OAAO;AAE7C,oBAAc;AAAA,QACZ,GAAG,YAAY;AAAA,QACf,GAAG,YAAY,IAAI;AAAA,MACrB;AAEA,eAAS,YAAY,SAAS,aAAa;AAAA,QACzC,IAAI,eAAe,KAAK;AAAA,QACxB;AAAA,QACA,IAAI,QAAQ;AAAA,MACd,CAAC;AAAA,IACH;AAAA,EACF;AAEA,WAAS,QAAQ,KAAK;AACpB,QAAI,WAAW,SAAS,IAAI,OAAO;AACnC,WAAO,QAAQ,IAAI,SAAS,IAAI,QAAQ;AAAA,EAC1C;AAEA,WAAS,OAAO,KAAK;AACnB,WAAO,QAAQ,IAAI,SAAS,IAAI,QAAQ;AAAA,EAC1C;AAEA,WAAS,YAAY,KAAK;AACxB,QAAI,UAAU,IAAI,SACd,QAAQ,QAAQ,SAAS,SACzB,WAAW,IAAI,UACf,YAAY,IAAI,WAChB,QAAQ,IAAI,SAAS,CAAC;AAG1B,QAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,GAAG,OAAO,qBAAqB,GAAG;AACxD;AAAA,IACF;AAEA,QAAI,QAAQ,KAAK,KAAK,YAAY,QAAQ,GAAG;AAE3C,UAAI,MAAM,gBAAgB,OAAO;AAC/B,iBAAS,YAAY,OAAO,EAAE,YAAY,MAAM,CAAC;AAAA,MACnD;AAEA;AAAA,IACF;AAEA,QAAI,OAAO,SAAS,OAAO;AAG3B,QAAI,OAAO,cAAc,aAAa;AACpC,kBAAY,aAAa,uBAAuB,OAAO,IAAI;AAAA,IAC7D;AAIA,QAAI,WAAW;AACb,eAAS,YAAY,OAAO,WAAWA,gBAAe;AAAA,IACxD;AAAA,EACF;AAIA,OAAK,aAAa;AAClB,OAAK,UAAU;AACf,OAAK,SAAS;AACd,OAAK,cAAc;AACrB;AAEA,mBAAmB,UAAU;AAAA,EAC3B;AAAA,EACA;AAAA,EACA;AACF;AAKA,SAAS,YAAY,OAAO;AAC1B,SAAO,CAAC,SAAS,CAAC,MAAM,KAAK;AAC/B;;;AC5Fe,SAARC,UACH,UACA,gBACA,cACA,WACF;AAEA,WAAa,KAAK,MAAM,UAAU,gBAAgB,YAAY;AAE9D,OAAK,aAAa;AACpB;AAEA,EAASA,WAAU,QAAY;AAE/BA,UAAS,UAAU;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAGAA,UAAS,UAAU,cAAc,WAAW;AAC1C,MAAI,WAAW,SAAa,UAAU,YAAY,KAAK,IAAI;AAE3D,WAAS,gCAAgC,IAAI;AAC7C,WAAS,0BAA0B,IAAI;AACvC,WAAS,mBAAmB,IAAI;AAChC,WAAS,UAAU,IAAI;AACvB,WAAS,aAAa,IAAI;AAC1B,WAAS,YAAY,IAAI;AACzB,WAAS,iBAAiB,IAAI;AAC9B,WAAS,gBAAgB,IAAI;AAC7B,WAAS,kBAAkB,IAAI;AAC/B,WAAS,qBAAqB,IAAI;AAElC,SAAO;AACT;AAUAA,UAAS,UAAU,cAAc,SAAS,SAAS,UAAU,WAAW,OAAO;AAC7E,OAAK,cAAc,QAAQ,uBAAuB;AAAA,IAChD;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,SAAS,CAAC;AAAA,EACnB,CAAC;AACH;AAUAA,UAAS,UAAU,UAAU,SAAS,QAAQ,QAAQ,OAAO,OAAO;AAElE,MAAI,YAAY,KAAK;AAErB,MAAI,CAAC,OAAO;AACV,YAAQ,UAAU,WAAW,QAAQ,MAAM;AAAA,EAC7C;AAEA,MAAI,CAAC,OAAO;AACV;AAAA,EACF;AAEA,SAAO,KAAK,iBAAiB,QAAQ,QAAQ,OAAO,OAAO,QAAQ,KAAK;AAC1E;AASAA,UAAS,UAAU,yBAAyB,SAAS,SAAS,eAAe,YAAY;AACvF,OAAK,cAAc,QAAQ,kCAAkC;AAAA,IAC3D;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAQAA,UAAS,UAAU,mBAAmB,SAAS,SAAS,YAAY;AAClE,OAAK,cAAc,QAAQ,4BAA4B;AAAA,IACrD;AAAA,IACA;AAAA,EACF,CAAC;AACH;AASAA,UAAS,UAAU,aAAa,SAAS,WAAW,WAAW,UAAU;AACvE,OAAK,cAAc,QAAQ,eAAe;AAAA,IACxC,OAAO;AAAA,IACP;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAUAA,UAAS,UAAU,UAAU,SAAS,iBAAiB,UAAU;AAC/D,MAAI,UAAU;AAAA,IACZ,OAAO;AAAA,IACP;AAAA,EACF;AAEA,OAAK,cAAc,QAAQ,YAAY,OAAO;AAE9C,SAAO,QAAQ;AACjB;AASAA,UAAS,UAAU,YAAY,SAAS,YAAY,OAAO;AACzD,OAAK,cAAc,QAAQ,cAAc;AAAA,IACvC,OAAO;AAAA,IACP;AAAA,EACF,CAAC;AACH;AAOAA,UAAS,UAAU,oBAAoB,WAAW;AAEhD,MAAI,uBAAuB,KAAK,QAAQ,QAAQ;AAAA,IAC9C,MAAM;AAAA,EACR,CAAC;AAED,MAAI,UAAU;AAAA,IACZ,SAAS;AAAA,EACX;AAEA,OAAK,cAAc,QAAQ,qBAAqB,OAAO;AAEvD,SAAO;AACT;AAOAA,UAAS,UAAU,cAAc,WAAW;AAE1C,MAAI,iBAAiB,KAAK,QAAQ,QAAQ;AAAA,IACxC,MAAM;AAAA,EACR,CAAC;AAED,MAAI,UAAU;AAAA,IACZ,SAAS;AAAA,EACX;AAEA,OAAK,cAAc,QAAQ,qBAAqB,OAAO;AAEvD,SAAO;AACT;AAQAA,UAAS,UAAU,iBAAiB,SAAS,gBAAgB,YAAY;AAEvE,OAAK,cAAc,QAAQ,mBAAmB;AAAA,IAC5C;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAQAA,UAAS,UAAU,UAAU,SAAS,IAAI,eAAe;AACvD,OAAK,cAAc,QAAQ,kBAAkB;AAAA,IAC3C;AAAA,IACA,SAAS;AAAA,IACT,UAAU;AAAA,EACZ,CAAC;AACH;AAQAA,UAAS,UAAU,YAAY,SAAS,IAAI,eAAe;AACzD,OAAK,cAAc,QAAQ,kBAAkB;AAAA,IAC3C;AAAA,IACA,SAAS;AAAA,EACX,CAAC;AACH;AAQAA,UAAS,UAAU,WAAW,SAAS,UAAU,QAAQ;AACvD,MAAI,CAAC,SAAS,QAAQ;AACpB,eAAW,CAAE,QAAS;AAAA,EACxB;AAEA,OAAK,cAAc,QAAQ,oBAAoB;AAAA,IAC7C;AAAA,IACA;AAAA,EACF,CAAC;AACH;",
  "names": ["delta", "round", "e", "connection", "center", "delta", "delta", "delta", "delta", "delta", "delta", "delta", "includes", "delta", "resizeBounds", "delta", "delta", "remove", "add", "NULL_DIMENSIONS", "Modeling"]
}
