{
  "version": 3,
  "sources": ["../../diagram-js/lib/core/ElementFactory.js"],
  "sourcesContent": ["import {\n  create\n} from '../model';\n\nimport { assign } from 'min-dash';\n\n/**\n * @typedef {import('../model/Types').Element} Element\n * @typedef {import('../model/Types').Connection} Connection\n * @typedef {import('../model/Types').Label} Label\n * @typedef {import('../model/Types').Root} Root\n * @typedef {import('../model/Types').Shape} Shape\n */\n\n/**\n * A factory for model elements.\n *\n * @template {Connection} [T=Connection]\n * @template {Label} [U=Label]\n * @template {Root} [V=Root]\n * @template {Shape} [W=Shape]\n */\nexport default function ElementFactory() {\n  this._uid = 12;\n}\n\n/**\n * Create a root element.\n *\n * @param {Partial<Root>} [attrs]\n *\n * @return {V} The created root element.\n */\nElementFactory.prototype.createRoot = function(attrs) {\n  return this.create('root', attrs);\n};\n\n/**\n * Create a label.\n *\n * @param {Partial<Label>} [attrs]\n *\n * @return {U} The created label.\n */\nElementFactory.prototype.createLabel = function(attrs) {\n  return this.create('label', attrs);\n};\n\n/**\n * Create a shape.\n *\n * @param {Partial<Shape>} [attrs]\n *\n * @return {W} The created shape.\n */\nElementFactory.prototype.createShape = function(attrs) {\n  return this.create('shape', attrs);\n};\n\n/**\n * Create a connection.\n *\n * @param {Partial<Connection>} [attrs]\n *\n * @return {T} The created connection.\n */\nElementFactory.prototype.createConnection = function(attrs) {\n  return this.create('connection', attrs);\n};\n\n/**\n * Create a root element.\n *\n * @overlord\n * @param {'root'} type\n * @param {Partial<Root>} [attrs]\n * @return {V}\n */\n/**\n * Create a shape.\n *\n * @overlord\n * @param {'shape'} type\n * @param {Partial<Shape>} [attrs]\n * @return {W}\n */\n/**\n * Create a connection.\n *\n * @overlord\n * @param {'connection'} type\n * @param {Partial<Connection>} [attrs]\n * @return {T}\n */\n/**\n * Create a label.\n *\n * @param {'label'} type\n * @param {Partial<Label>} [attrs]\n * @return {U}\n */\nElementFactory.prototype.create = function(type, attrs) {\n\n  attrs = assign({}, attrs || {});\n\n  if (!attrs.id) {\n    attrs.id = type + '_' + (this._uid++);\n  }\n\n  return create(type, attrs);\n};"],
  "mappings": ";;;;;;;;AAsBe,SAAR,iBAAkC;AACvC,OAAK,OAAO;AACd;AASA,eAAe,UAAU,aAAa,SAAS,OAAO;AACpD,SAAO,KAAK,OAAO,QAAQ,KAAK;AAClC;AASA,eAAe,UAAU,cAAc,SAAS,OAAO;AACrD,SAAO,KAAK,OAAO,SAAS,KAAK;AACnC;AASA,eAAe,UAAU,cAAc,SAAS,OAAO;AACrD,SAAO,KAAK,OAAO,SAAS,KAAK;AACnC;AASA,eAAe,UAAU,mBAAmB,SAAS,OAAO;AAC1D,SAAO,KAAK,OAAO,cAAc,KAAK;AACxC;AAiCA,eAAe,UAAU,SAAS,SAAS,MAAM,OAAO;AAEtD,UAAQ,OAAO,CAAC,GAAG,SAAS,CAAC,CAAC;AAE9B,MAAI,CAAC,MAAM,IAAI;AACb,UAAM,KAAK,OAAO,MAAO,KAAK;AAAA,EAChC;AAEA,SAAO,OAAO,MAAM,KAAK;AAC3B;",
  "names": []
}
